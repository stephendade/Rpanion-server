/*
MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: common.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

jspack = require("jspack").jspack,
    _ = require("underscore"),
    events = require("events"), // for .emit(..), MAVLink20Processor inherits from events.EventEmitter
    util = require("util");

var Long = require('long');

// Add a convenience method to Buffer
Buffer.prototype.toByteArray = function () {
  return Array.prototype.slice.call(this, 0)
}

mavlink10 = function(){};

// Implement the X25CRC function (present in the Python version through the mavutil.py package)
mavlink10.x25Crc = function(buffer, crcIN) {

    var bytes = buffer;
    var crcOUT = crcIN || 0xffff;
    _.each(bytes, function(e) {
        var tmp = e ^ (crcOUT & 0xff);
        tmp = (tmp ^ (tmp << 4)) & 0xff;
        crcOUT = (crcOUT >> 8) ^ (tmp << 8) ^ (tmp << 3) ^ (tmp >> 4);
        crcOUT = crcOUT & 0xffff;
    });
    return crcOUT;

}

mavlink10.WIRE_PROTOCOL_VERSION = "1.0";
mavlink10.HEADER_LEN = 6;

mavlink10.MAVLINK_TYPE_CHAR     = 0
mavlink10.MAVLINK_TYPE_UINT8_T  = 1
mavlink10.MAVLINK_TYPE_INT8_T   = 2
mavlink10.MAVLINK_TYPE_UINT16_T = 3
mavlink10.MAVLINK_TYPE_INT16_T  = 4
mavlink10.MAVLINK_TYPE_UINT32_T = 5
mavlink10.MAVLINK_TYPE_INT32_T  = 6
mavlink10.MAVLINK_TYPE_UINT64_T = 7
mavlink10.MAVLINK_TYPE_INT64_T  = 8
mavlink10.MAVLINK_TYPE_FLOAT    = 9
mavlink10.MAVLINK_TYPE_DOUBLE   = 10

mavlink10.MAVLINK_IFLAG_SIGNED = 0x01

// Mavlink headers incorporate sequence, source system (platform) and source component. 
mavlink10.header = function(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags=0, compat_flags=0,) {

    this.mlen = ( typeof mlen === 'undefined' ) ? 0 : mlen;
    this.seq = ( typeof seq === 'undefined' ) ? 0 : seq;
    this.srcSystem = ( typeof srcSystem === 'undefined' ) ? 0 : srcSystem;
    this.srcComponent = ( typeof srcComponent === 'undefined' ) ? 0 : srcComponent;
    this.msgId = msgId
    this.incompat_flags = incompat_flags
    this.compat_flags = compat_flags

}

mavlink10.header.prototype.pack = function() {
    return jspack.Pack('BBBBBB', [254, this.mlen, this.seq, this.srcSystem, this.srcComponent, this.msgId]);
}
        
// Base class declaration: mavlink.message will be the parent class for each
// concrete implementation in mavlink.messages.
mavlink10.message = function() {};

// Convenience setter to facilitate turning the unpacked array of data into member properties
mavlink10.message.prototype.set = function(args,verbose) {
// inspect
    _.each(this.fieldnames, function(e, i) {
        var num = parseInt(i,10);
        if (this.hasOwnProperty(e) && isNaN(num)  ){ // asking for an attribure thats non-numeric is ok unless its already an attribute we have
            console.log("WARNING, overwriting an existing property is DANGEROUS:"+e+" ==>"+i+"==>"+args[i]+" -> "+JSON.stringify(this)); 
        }
    }, this);
// then modify
    _.each(this.fieldnames, function(e, i) {
        this[e] = args[i];
    }, this);
};

// This pack function builds the header and produces a complete MAVLink message,
// including header and message CRC.
mavlink10.message.prototype.pack = function(mav, crc_extra, payload) {

    this._payload = payload;
    var plen = this._payload.length;
    var incompat_flags = 0;
    this._header = new mavlink10.header(this._id, this._payload.length, mav.seq, mav.srcSystem, mav.srcComponent, incompat_flags, 0,);    
    this._msgbuf = this._header.pack().concat(this._payload);
    var crc = mavlink10.x25Crc(this._msgbuf.slice(1));

    // For now, assume always using crc_extra = True.  TODO: check/fix this.
    crc = mavlink10.x25Crc([crc_extra], crc);
    this._msgbuf = this._msgbuf.concat(jspack.Pack('<H', [crc] ) );
    return this._msgbuf;

}


// enums

// MAV_AUTOPILOT
mavlink10.MAV_AUTOPILOT_GENERIC = 0 // Generic autopilot, full support for everything
mavlink10.MAV_AUTOPILOT_RESERVED = 1 // Reserved for future use.
mavlink10.MAV_AUTOPILOT_SLUGS = 2 // SLUGS autopilot, http://slugsuav.soe.ucsc.edu
mavlink10.MAV_AUTOPILOT_ARDUPILOTMEGA = 3 // ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org
mavlink10.MAV_AUTOPILOT_OPENPILOT = 4 // OpenPilot, http://openpilot.org
mavlink10.MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5 // Generic autopilot only supporting simple waypoints
mavlink10.MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6 // Generic autopilot supporting waypoints and other simple navigation
                        // commands
mavlink10.MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7 // Generic autopilot supporting the full mission command set
mavlink10.MAV_AUTOPILOT_INVALID = 8 // No valid autopilot, e.g. a GCS or other MAVLink component
mavlink10.MAV_AUTOPILOT_PPZ = 9 // PPZ UAV - http://nongnu.org/paparazzi
mavlink10.MAV_AUTOPILOT_UDB = 10 // UAV Dev Board
mavlink10.MAV_AUTOPILOT_FP = 11 // FlexiPilot
mavlink10.MAV_AUTOPILOT_PX4 = 12 // PX4 Autopilot - http://px4.io/
mavlink10.MAV_AUTOPILOT_SMACCMPILOT = 13 // SMACCMPilot - http://smaccmpilot.org
mavlink10.MAV_AUTOPILOT_AUTOQUAD = 14 // AutoQuad -- http://autoquad.org
mavlink10.MAV_AUTOPILOT_ARMAZILA = 15 // Armazila -- http://armazila.com
mavlink10.MAV_AUTOPILOT_AEROB = 16 // Aerob -- http://aerob.ru
mavlink10.MAV_AUTOPILOT_ASLUAV = 17 // ASLUAV autopilot -- http://www.asl.ethz.ch
mavlink10.MAV_AUTOPILOT_SMARTAP = 18 // SmartAP Autopilot - http://sky-drones.com
mavlink10.MAV_AUTOPILOT_AIRRAILS = 19 // AirRails - http://uaventure.com
mavlink10.MAV_AUTOPILOT_ENUM_END = 20 // 

// MAV_TYPE
mavlink10.MAV_TYPE_GENERIC = 0 // Generic micro air vehicle
mavlink10.MAV_TYPE_FIXED_WING = 1 // Fixed wing aircraft.
mavlink10.MAV_TYPE_QUADROTOR = 2 // Quadrotor
mavlink10.MAV_TYPE_COAXIAL = 3 // Coaxial helicopter
mavlink10.MAV_TYPE_HELICOPTER = 4 // Normal helicopter with tail rotor.
mavlink10.MAV_TYPE_ANTENNA_TRACKER = 5 // Ground installation
mavlink10.MAV_TYPE_GCS = 6 // Operator control unit / ground control station
mavlink10.MAV_TYPE_AIRSHIP = 7 // Airship, controlled
mavlink10.MAV_TYPE_FREE_BALLOON = 8 // Free balloon, uncontrolled
mavlink10.MAV_TYPE_ROCKET = 9 // Rocket
mavlink10.MAV_TYPE_GROUND_ROVER = 10 // Ground rover
mavlink10.MAV_TYPE_SURFACE_BOAT = 11 // Surface vessel, boat, ship
mavlink10.MAV_TYPE_SUBMARINE = 12 // Submarine
mavlink10.MAV_TYPE_HEXAROTOR = 13 // Hexarotor
mavlink10.MAV_TYPE_OCTOROTOR = 14 // Octorotor
mavlink10.MAV_TYPE_TRICOPTER = 15 // Tricopter
mavlink10.MAV_TYPE_FLAPPING_WING = 16 // Flapping wing
mavlink10.MAV_TYPE_KITE = 17 // Kite
mavlink10.MAV_TYPE_ONBOARD_CONTROLLER = 18 // Onboard companion controller
mavlink10.MAV_TYPE_VTOL_DUOROTOR = 19 // Two-rotor VTOL using control surfaces in vertical operation in
                        // addition. Tailsitter.
mavlink10.MAV_TYPE_VTOL_QUADROTOR = 20 // Quad-rotor VTOL using a V-shaped quad config in vertical operation.
                        // Tailsitter.
mavlink10.MAV_TYPE_VTOL_TILTROTOR = 21 // Tiltrotor VTOL
mavlink10.MAV_TYPE_VTOL_RESERVED2 = 22 // VTOL reserved 2
mavlink10.MAV_TYPE_VTOL_RESERVED3 = 23 // VTOL reserved 3
mavlink10.MAV_TYPE_VTOL_RESERVED4 = 24 // VTOL reserved 4
mavlink10.MAV_TYPE_VTOL_RESERVED5 = 25 // VTOL reserved 5
mavlink10.MAV_TYPE_GIMBAL = 26 // Gimbal
mavlink10.MAV_TYPE_ADSB = 27 // ADSB system
mavlink10.MAV_TYPE_PARAFOIL = 28 // Steerable, nonrigid airfoil
mavlink10.MAV_TYPE_DODECAROTOR = 29 // Dodecarotor
mavlink10.MAV_TYPE_CAMERA = 30 // Camera
mavlink10.MAV_TYPE_CHARGING_STATION = 31 // Charging station
mavlink10.MAV_TYPE_FLARM = 32 // FLARM collision avoidance system
mavlink10.MAV_TYPE_SERVO = 33 // Servo
mavlink10.MAV_TYPE_ENUM_END = 34 // 

// FIRMWARE_VERSION_TYPE
mavlink10.FIRMWARE_VERSION_TYPE_DEV = 0 // development release
mavlink10.FIRMWARE_VERSION_TYPE_ALPHA = 64 // alpha release
mavlink10.FIRMWARE_VERSION_TYPE_BETA = 128 // beta release
mavlink10.FIRMWARE_VERSION_TYPE_RC = 192 // release candidate
mavlink10.FIRMWARE_VERSION_TYPE_OFFICIAL = 255 // official stable release
mavlink10.FIRMWARE_VERSION_TYPE_ENUM_END = 256 // 

// MAV_MODE_FLAG
mavlink10.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1 // 0b00000001 Reserved for future use.
mavlink10.MAV_MODE_FLAG_TEST_ENABLED = 2 // 0b00000010 system has a test mode enabled. This flag is intended for
                        // temporary system tests and should not be
                        // used for stable implementations.
mavlink10.MAV_MODE_FLAG_AUTO_ENABLED = 4 // 0b00000100 autonomous mode enabled, system finds its own goal
                        // positions. Guided flag can be set or not,
                        // depends on the actual implementation.
mavlink10.MAV_MODE_FLAG_GUIDED_ENABLED = 8 // 0b00001000 guided mode enabled, system flies waypoints / mission
                        // items.
mavlink10.MAV_MODE_FLAG_STABILIZE_ENABLED = 16 // 0b00010000 system stabilizes electronically its attitude (and
                        // optionally position). It needs however
                        // further control inputs to move around.
mavlink10.MAV_MODE_FLAG_HIL_ENABLED = 32 // 0b00100000 hardware in the loop simulation. All motors / actuators are
                        // blocked, but internal software is full
                        // operational.
mavlink10.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64 // 0b01000000 remote control input is enabled.
mavlink10.MAV_MODE_FLAG_SAFETY_ARMED = 128 // 0b10000000 MAV safety set to armed. Motors are enabled / running / can
                        // start. Ready to fly. Additional note: this
                        // flag is to be ignore when sent in the
                        // command MAV_CMD_DO_SET_MODE and
                        // MAV_CMD_COMPONENT_ARM_DISARM shall be used
                        // instead. The flag can still be used to
                        // report the armed state.
mavlink10.MAV_MODE_FLAG_ENUM_END = 129 // 

// MAV_MODE_FLAG_DECODE_POSITION
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1 // Eighth bit: 00000001
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_TEST = 2 // Seventh bit: 00000010
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4 // Sixth bit:   00000100
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8 // Fifth bit:  00001000
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16 // Fourth bit: 00010000
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_HIL = 32 // Third bit:  00100000
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64 // Second bit: 01000000
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128 // First bit:  10000000
mavlink10.MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129 // 

// MAV_GOTO
mavlink10.MAV_GOTO_DO_HOLD = 0 // Hold at the current position.
mavlink10.MAV_GOTO_DO_CONTINUE = 1 // Continue with the next item in mission execution.
mavlink10.MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2 // Hold at the current position of the system
mavlink10.MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3 // Hold at the position specified in the parameters of the DO_HOLD action
mavlink10.MAV_GOTO_ENUM_END = 4 // 

// MAV_MODE
mavlink10.MAV_MODE_PREFLIGHT = 0 // System is not ready to fly, booting, calibrating, etc. No flag is set.
mavlink10.MAV_MODE_MANUAL_DISARMED = 64 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink10.MAV_MODE_TEST_DISARMED = 66 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink10.MAV_MODE_STABILIZE_DISARMED = 80 // System is allowed to be active, under assisted RC control.
mavlink10.MAV_MODE_GUIDED_DISARMED = 88 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink10.MAV_MODE_AUTO_DISARMED = 92 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by
                        // waypoints)
mavlink10.MAV_MODE_MANUAL_ARMED = 192 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink10.MAV_MODE_TEST_ARMED = 194 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink10.MAV_MODE_STABILIZE_ARMED = 208 // System is allowed to be active, under assisted RC control.
mavlink10.MAV_MODE_GUIDED_ARMED = 216 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink10.MAV_MODE_AUTO_ARMED = 220 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by
                        // waypoints)
mavlink10.MAV_MODE_ENUM_END = 221 // 

// MAV_STATE
mavlink10.MAV_STATE_UNINIT = 0 // Uninitialized system, state is unknown.
mavlink10.MAV_STATE_BOOT = 1 // System is booting up.
mavlink10.MAV_STATE_CALIBRATING = 2 // System is calibrating and not flight-ready.
mavlink10.MAV_STATE_STANDBY = 3 // System is grounded and on standby. It can be launched any time.
mavlink10.MAV_STATE_ACTIVE = 4 // System is active and might be already airborne. Motors are engaged.
mavlink10.MAV_STATE_CRITICAL = 5 // System is in a non-normal flight mode. It can however still navigate.
mavlink10.MAV_STATE_EMERGENCY = 6 // System is in a non-normal flight mode. It lost control over parts or
                        // over the whole airframe. It is in mayday
                        // and going down.
mavlink10.MAV_STATE_POWEROFF = 7 // System just initialized its power-down sequence, will shut down now.
mavlink10.MAV_STATE_FLIGHT_TERMINATION = 8 // System is terminating itself.
mavlink10.MAV_STATE_ENUM_END = 9 // 

// MAV_COMPONENT
mavlink10.MAV_COMP_ID_ALL = 0 // Target id (target_component) used to broadcast messages to all
                        // components of the receiving system.
                        // Components should attempt to process
                        // messages with this component ID and forward
                        // to components on any other interfaces.
                        // Note: This is not a valid *source*
                        // component id for a message.
mavlink10.MAV_COMP_ID_AUTOPILOT1 = 1 // System flight controller component ("autopilot"). Only one autopilot
                        // is expected in a particular system.
mavlink10.MAV_COMP_ID_USER1 = 25 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER2 = 26 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER3 = 27 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER4 = 28 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER5 = 29 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER6 = 30 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER7 = 31 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER8 = 32 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER9 = 33 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER10 = 34 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER11 = 35 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER12 = 36 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER13 = 37 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER14 = 38 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER15 = 39 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER16 = 40 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER17 = 41 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER18 = 42 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER19 = 43 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER20 = 44 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER21 = 45 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER22 = 46 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER23 = 47 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER24 = 48 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER25 = 49 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER26 = 50 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER27 = 51 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER28 = 52 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER29 = 53 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER30 = 54 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER31 = 55 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER32 = 56 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER33 = 57 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER34 = 58 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER35 = 59 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER36 = 60 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER37 = 61 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER38 = 62 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER39 = 63 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER40 = 64 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER41 = 65 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER42 = 66 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER43 = 67 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_TELEMETRY_RADIO = 68 // Telemetry radio (e.g. SiK radio, or other component that emits
                        // RADIO_STATUS messages).
mavlink10.MAV_COMP_ID_USER45 = 69 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER46 = 70 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER47 = 71 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER48 = 72 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER49 = 73 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER50 = 74 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER51 = 75 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER52 = 76 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER53 = 77 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER54 = 78 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER55 = 79 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER56 = 80 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER57 = 81 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER58 = 82 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER59 = 83 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER60 = 84 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER61 = 85 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER62 = 86 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER63 = 87 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER64 = 88 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER65 = 89 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER66 = 90 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER67 = 91 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER68 = 92 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER69 = 93 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER70 = 94 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER71 = 95 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER72 = 96 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER73 = 97 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER74 = 98 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_USER75 = 99 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink10.MAV_COMP_ID_CAMERA = 100 // Camera #1.
mavlink10.MAV_COMP_ID_CAMERA2 = 101 // Camera #2.
mavlink10.MAV_COMP_ID_CAMERA3 = 102 // Camera #3.
mavlink10.MAV_COMP_ID_CAMERA4 = 103 // Camera #4.
mavlink10.MAV_COMP_ID_CAMERA5 = 104 // Camera #5.
mavlink10.MAV_COMP_ID_CAMERA6 = 105 // Camera #6.
mavlink10.MAV_COMP_ID_SERVO1 = 140 // Servo #1.
mavlink10.MAV_COMP_ID_SERVO2 = 141 // Servo #2.
mavlink10.MAV_COMP_ID_SERVO3 = 142 // Servo #3.
mavlink10.MAV_COMP_ID_SERVO4 = 143 // Servo #4.
mavlink10.MAV_COMP_ID_SERVO5 = 144 // Servo #5.
mavlink10.MAV_COMP_ID_SERVO6 = 145 // Servo #6.
mavlink10.MAV_COMP_ID_SERVO7 = 146 // Servo #7.
mavlink10.MAV_COMP_ID_SERVO8 = 147 // Servo #8.
mavlink10.MAV_COMP_ID_SERVO9 = 148 // Servo #9.
mavlink10.MAV_COMP_ID_SERVO10 = 149 // Servo #10.
mavlink10.MAV_COMP_ID_SERVO11 = 150 // Servo #11.
mavlink10.MAV_COMP_ID_SERVO12 = 151 // Servo #12.
mavlink10.MAV_COMP_ID_SERVO13 = 152 // Servo #13.
mavlink10.MAV_COMP_ID_SERVO14 = 153 // Servo #14.
mavlink10.MAV_COMP_ID_GIMBAL = 154 // Gimbal #1.
mavlink10.MAV_COMP_ID_LOG = 155 // Logging component.
mavlink10.MAV_COMP_ID_ADSB = 156 // Automatic Dependent Surveillance-Broadcast (ADS-B) component.
mavlink10.MAV_COMP_ID_OSD = 157 // On Screen Display (OSD) devices for video links.
mavlink10.MAV_COMP_ID_PERIPHERAL = 158 // Generic autopilot peripheral component ID. Meant for devices that do
                        // not implement the parameter microservice.
mavlink10.MAV_COMP_ID_QX1_GIMBAL = 159 // Gimbal ID for QX1.
mavlink10.MAV_COMP_ID_FLARM = 160 // FLARM collision alert component.
mavlink10.MAV_COMP_ID_GIMBAL2 = 171 // Gimbal #2.
mavlink10.MAV_COMP_ID_GIMBAL3 = 172 // Gimbal #3.
mavlink10.MAV_COMP_ID_GIMBAL4 = 173 // Gimbal #4
mavlink10.MAV_COMP_ID_GIMBAL5 = 174 // Gimbal #5.
mavlink10.MAV_COMP_ID_GIMBAL6 = 175 // Gimbal #6.
mavlink10.MAV_COMP_ID_MISSIONPLANNER = 190 // Component that can generate/supply a mission flight plan (e.g. GCS or
                        // developer API).
mavlink10.MAV_COMP_ID_PATHPLANNER = 195 // Component that finds an optimal path between points based on a certain
                        // constraint (e.g. minimum snap, shortest
                        // path, cost, etc.).
mavlink10.MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196 // Component that plans a collision free path between two points.
mavlink10.MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197 // Component that provides position estimates using VIO techniques.
mavlink10.MAV_COMP_ID_PAIRING_MANAGER = 198 // Component that manages pairing of vehicle and GCS.
mavlink10.MAV_COMP_ID_IMU = 200 // Inertial Measurement Unit (IMU) #1.
mavlink10.MAV_COMP_ID_IMU_2 = 201 // Inertial Measurement Unit (IMU) #2.
mavlink10.MAV_COMP_ID_IMU_3 = 202 // Inertial Measurement Unit (IMU) #3.
mavlink10.MAV_COMP_ID_GPS = 220 // GPS #1.
mavlink10.MAV_COMP_ID_GPS2 = 221 // GPS #2.
mavlink10.MAV_COMP_ID_UDP_BRIDGE = 240 // Component to bridge MAVLink to UDP (i.e. from a UART).
mavlink10.MAV_COMP_ID_UART_BRIDGE = 241 // Component to bridge to UART (i.e. from UDP).
mavlink10.MAV_COMP_ID_SYSTEM_CONTROL = 250 // Component for handling system messages (e.g. to ARM, takeoff, etc.).
mavlink10.MAV_COMPONENT_ENUM_END = 251 // 

// MAV_SYS_STATUS_SENSOR
mavlink10.MAV_SYS_STATUS_SENSOR_3D_GYRO = 1 // 0x01 3D gyro
mavlink10.MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2 // 0x02 3D accelerometer
mavlink10.MAV_SYS_STATUS_SENSOR_3D_MAG = 4 // 0x04 3D magnetometer
mavlink10.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8 // 0x08 absolute pressure
mavlink10.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16 // 0x10 differential pressure
mavlink10.MAV_SYS_STATUS_SENSOR_GPS = 32 // 0x20 GPS
mavlink10.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64 // 0x40 optical flow
mavlink10.MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128 // 0x80 computer vision position
mavlink10.MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256 // 0x100 laser based position
mavlink10.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512 // 0x200 external ground truth (Vicon or Leica)
mavlink10.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024 // 0x400 3D angular rate control
mavlink10.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048 // 0x800 attitude stabilization
mavlink10.MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096 // 0x1000 yaw position
mavlink10.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192 // 0x2000 z/altitude control
mavlink10.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384 // 0x4000 x/y position control
mavlink10.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768 // 0x8000 motor outputs / control
mavlink10.MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536 // 0x10000 rc receiver
mavlink10.MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072 // 0x20000 2nd 3D gyro
mavlink10.MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144 // 0x40000 2nd 3D accelerometer
mavlink10.MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288 // 0x80000 2nd 3D magnetometer
mavlink10.MAV_SYS_STATUS_GEOFENCE = 1048576 // 0x100000 geofence
mavlink10.MAV_SYS_STATUS_AHRS = 2097152 // 0x200000 AHRS subsystem health
mavlink10.MAV_SYS_STATUS_TERRAIN = 4194304 // 0x400000 Terrain subsystem health
mavlink10.MAV_SYS_STATUS_REVERSE_MOTOR = 8388608 // 0x800000 Motors are reversed
mavlink10.MAV_SYS_STATUS_LOGGING = 16777216 // 0x1000000 Logging
mavlink10.MAV_SYS_STATUS_SENSOR_BATTERY = 33554432 // 0x2000000 Battery
mavlink10.MAV_SYS_STATUS_SENSOR_PROXIMITY = 67108864 // 0x4000000 Proximity
mavlink10.MAV_SYS_STATUS_SENSOR_SATCOM = 134217728 // 0x8000000 Satellite Communication
mavlink10.MAV_SYS_STATUS_PREARM_CHECK = 268435456 // 0x10000000 pre-arm check status. Always healthy when armed
mavlink10.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE = 536870912 // 0x20000000 Avoidance/collision prevention
mavlink10.MAV_SYS_STATUS_SENSOR_ENUM_END = 536870913 // 

// MAV_FRAME
mavlink10.MAV_FRAME_GLOBAL = 0 // Global (WGS84) coordinate frame + MSL altitude. First value / x:
                        // latitude, second value / y: longitude,
                        // third value / z: positive altitude over
                        // mean sea level (MSL).
mavlink10.MAV_FRAME_LOCAL_NED = 1 // Local coordinate frame, Z-down (x: north, y: east, z: down).
mavlink10.MAV_FRAME_MISSION = 2 // NOT a coordinate frame, indicates a mission command.
mavlink10.MAV_FRAME_GLOBAL_RELATIVE_ALT = 3 // Global (WGS84) coordinate frame + altitude relative to the home
                        // position. First value / x: latitude, second
                        // value / y: longitude, third value / z:
                        // positive altitude with 0 being at the
                        // altitude of the home location.
mavlink10.MAV_FRAME_LOCAL_ENU = 4 // Local coordinate frame, Z-up (x: east, y: north, z: up).
mavlink10.MAV_FRAME_GLOBAL_INT = 5 // Global (WGS84) coordinate frame (scaled) + MSL altitude. First value /
                        // x: latitude in degrees*1.0e-7, second value
                        // / y: longitude in degrees*1.0e-7, third
                        // value / z: positive altitude over mean sea
                        // level (MSL).
mavlink10.MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6 // Global (WGS84) coordinate frame (scaled) + altitude relative to the
                        // home position. First value / x: latitude in
                        // degrees*10e-7, second value / y: longitude
                        // in degrees*10e-7, third value / z: positive
                        // altitude with 0 being at the altitude of
                        // the home location.
mavlink10.MAV_FRAME_LOCAL_OFFSET_NED = 7 // Offset to the current local frame. Anything expressed in this frame
                        // should be added to the current local frame
                        // position.
mavlink10.MAV_FRAME_BODY_NED = 8 // Setpoint in body NED frame. This makes sense if all position control
                        // is externalized - e.g. useful to command 2
                        // m/s^2 acceleration to the right.
mavlink10.MAV_FRAME_BODY_OFFSET_NED = 9 // Offset in body NED frame. This makes sense if adding setpoints to the
                        // current flight path, to avoid an obstacle -
                        // e.g. useful to command 2 m/s^2 acceleration
                        // to the east.
mavlink10.MAV_FRAME_GLOBAL_TERRAIN_ALT = 10 // Global (WGS84) coordinate frame with AGL altitude (at the waypoint
                        // coordinate). First value / x: latitude in
                        // degrees, second value / y: longitude in
                        // degrees, third value / z: positive altitude
                        // in meters with 0 being at ground level in
                        // terrain model.
mavlink10.MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 // Global (WGS84) coordinate frame (scaled) with AGL altitude (at the
                        // waypoint coordinate). First value / x:
                        // latitude in degrees*10e-7, second value /
                        // y: longitude in degrees*10e-7, third value
                        // / z: positive altitude in meters with 0
                        // being at ground level in terrain model.
mavlink10.MAV_FRAME_BODY_FRD = 12 // Body fixed frame of reference, Z-down (x: forward, y: right, z: down).
mavlink10.MAV_FRAME_RESERVED_13 = 13 // MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward,
                        // y: Left, z: Up).
mavlink10.MAV_FRAME_RESERVED_14 = 14 // MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by
                        // a motion capture system, Z-down (x: North,
                        // y: East, z: Down).
mavlink10.MAV_FRAME_RESERVED_15 = 15 // MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by
                        // a motion capture system, Z-up (x: East, y:
                        // North, z: Up).
mavlink10.MAV_FRAME_RESERVED_16 = 16 // MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given
                        // by a vision estimation system, Z-down (x:
                        // North, y: East, z: Down).
mavlink10.MAV_FRAME_RESERVED_17 = 17 // MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given
                        // by a vision estimation system, Z-up (x:
                        // East, y: North, z: Up).
mavlink10.MAV_FRAME_RESERVED_18 = 18 // MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by
                        // an estimator running onboard the vehicle,
                        // Z-down (x: North, y: East, z: Down).
mavlink10.MAV_FRAME_RESERVED_19 = 19 // MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by
                        // an estimator running onboard the vehicle,
                        // Z-up (x: East, y: North, z: Up).
mavlink10.MAV_FRAME_LOCAL_FRD = 20 // Forward, Right, Down coordinate frame. This is a local frame with
                        // Z-down and arbitrary F/R alignment (i.e.
                        // not aligned with NED/earth frame).
mavlink10.MAV_FRAME_LOCAL_FLU = 21 // Forward, Left, Up coordinate frame. This is a local frame with Z-up
                        // and arbitrary F/L alignment (i.e. not
                        // aligned with ENU/earth frame).
mavlink10.MAV_FRAME_ENUM_END = 22 // 

// MAVLINK_DATA_STREAM_TYPE
mavlink10.MAVLINK_DATA_STREAM_IMG_JPEG = 1 // 
mavlink10.MAVLINK_DATA_STREAM_IMG_BMP = 2 // 
mavlink10.MAVLINK_DATA_STREAM_IMG_RAW8U = 3 // 
mavlink10.MAVLINK_DATA_STREAM_IMG_RAW32U = 4 // 
mavlink10.MAVLINK_DATA_STREAM_IMG_PGM = 5 // 
mavlink10.MAVLINK_DATA_STREAM_IMG_PNG = 6 // 
mavlink10.MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7 // 

// FENCE_ACTION
mavlink10.FENCE_ACTION_NONE = 0 // Disable fenced mode
mavlink10.FENCE_ACTION_GUIDED = 1 // Switched to guided mode to return point (fence point 0)
mavlink10.FENCE_ACTION_REPORT = 2 // Report fence breach, but don't take action
mavlink10.FENCE_ACTION_GUIDED_THR_PASS = 3 // Switched to guided mode to return point (fence point 0) with manual
                        // throttle control
mavlink10.FENCE_ACTION_RTL = 4 // Switch to RTL (return to launch) mode and head for the return point.
mavlink10.FENCE_ACTION_ENUM_END = 5 // 

// FENCE_BREACH
mavlink10.FENCE_BREACH_NONE = 0 // No last fence breach
mavlink10.FENCE_BREACH_MINALT = 1 // Breached minimum altitude
mavlink10.FENCE_BREACH_MAXALT = 2 // Breached maximum altitude
mavlink10.FENCE_BREACH_BOUNDARY = 3 // Breached fence boundary
mavlink10.FENCE_BREACH_ENUM_END = 4 // 

// FENCE_MITIGATE
mavlink10.FENCE_MITIGATE_UNKNOWN = 0 // Unknown
mavlink10.FENCE_MITIGATE_NONE = 1 // No actions being taken
mavlink10.FENCE_MITIGATE_VEL_LIMIT = 2 // Velocity limiting active to prevent breach
mavlink10.FENCE_MITIGATE_ENUM_END = 3 // 

// MAV_MOUNT_MODE
mavlink10.MAV_MOUNT_MODE_RETRACT = 0 // Load and keep safe position (Roll,Pitch,Yaw) from permant memory and
                        // stop stabilization
mavlink10.MAV_MOUNT_MODE_NEUTRAL = 1 // Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
mavlink10.MAV_MOUNT_MODE_MAVLINK_TARGETING = 2 // Load neutral position and start MAVLink Roll,Pitch,Yaw control with
                        // stabilization
mavlink10.MAV_MOUNT_MODE_RC_TARGETING = 3 // Load neutral position and start RC Roll,Pitch,Yaw control with
                        // stabilization
mavlink10.MAV_MOUNT_MODE_GPS_POINT = 4 // Load neutral position and start to point to Lat,Lon,Alt
mavlink10.MAV_MOUNT_MODE_SYSID_TARGET = 5 // Gimbal tracks system with specified system ID
mavlink10.MAV_MOUNT_MODE_ENUM_END = 6 // 

// UAVCAN_NODE_HEALTH
mavlink10.UAVCAN_NODE_HEALTH_OK = 0 // The node is functioning properly.
mavlink10.UAVCAN_NODE_HEALTH_WARNING = 1 // A critical parameter went out of range or the node has encountered a
                        // minor failure.
mavlink10.UAVCAN_NODE_HEALTH_ERROR = 2 // The node has encountered a major failure.
mavlink10.UAVCAN_NODE_HEALTH_CRITICAL = 3 // The node has suffered a fatal malfunction.
mavlink10.UAVCAN_NODE_HEALTH_ENUM_END = 4 // 

// UAVCAN_NODE_MODE
mavlink10.UAVCAN_NODE_MODE_OPERATIONAL = 0 // The node is performing its primary functions.
mavlink10.UAVCAN_NODE_MODE_INITIALIZATION = 1 // The node is initializing; this mode is entered immediately after
                        // startup.
mavlink10.UAVCAN_NODE_MODE_MAINTENANCE = 2 // The node is under maintenance.
mavlink10.UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3 // The node is in the process of updating its software.
mavlink10.UAVCAN_NODE_MODE_OFFLINE = 7 // The node is no longer available online.
mavlink10.UAVCAN_NODE_MODE_ENUM_END = 8 // 

// STORAGE_STATUS
mavlink10.STORAGE_STATUS_EMPTY = 0 // Storage is missing (no microSD card loaded for example.)
mavlink10.STORAGE_STATUS_UNFORMATTED = 1 // Storage present but unformatted.
mavlink10.STORAGE_STATUS_READY = 2 // Storage present and ready.
mavlink10.STORAGE_STATUS_NOT_SUPPORTED = 3 // Camera does not supply storage status information. Capacity
                        // information in STORAGE_INFORMATION fields
                        // will be ignored.
mavlink10.STORAGE_STATUS_ENUM_END = 4 // 

// MAV_CMD
mavlink10.MAV_CMD_NAV_WAYPOINT = 16 // Navigate to waypoint.
mavlink10.MAV_CMD_NAV_LOITER_UNLIM = 17 // Loiter around this waypoint an unlimited amount of time
mavlink10.MAV_CMD_NAV_LOITER_TURNS = 18 // Loiter around this waypoint for X turns
mavlink10.MAV_CMD_NAV_LOITER_TIME = 19 // Loiter around this waypoint for X seconds
mavlink10.MAV_CMD_NAV_RETURN_TO_LAUNCH = 20 // Return to launch location
mavlink10.MAV_CMD_NAV_LAND = 21 // Land at location.
mavlink10.MAV_CMD_NAV_TAKEOFF = 22 // Takeoff from ground / hand
mavlink10.MAV_CMD_NAV_LAND_LOCAL = 23 // Land at local position (local frame only)
mavlink10.MAV_CMD_NAV_TAKEOFF_LOCAL = 24 // Takeoff from local position (local frame only)
mavlink10.MAV_CMD_NAV_FOLLOW = 25 // Vehicle following, i.e. this waypoint represents the position of a
                        // moving vehicle
mavlink10.MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30 // Continue on the current course and climb/descend to specified
                        // altitude.  When the altitude is reached
                        // continue to the next command (i.e., don't
                        // proceed to the next command until the
                        // desired altitude is reached.
mavlink10.MAV_CMD_NAV_LOITER_TO_ALT = 31 // Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0,
                        // then loiter at the current position.  Don't
                        // consider the navigation command complete
                        // (don't leave loiter) until the altitude has
                        // been reached.  Additionally, if the Heading
                        // Required parameter is non-zero the
                        // aircraft will not leave the loiter until
                        // heading toward the next waypoint.
mavlink10.MAV_CMD_DO_FOLLOW = 32 // Begin following a target
mavlink10.MAV_CMD_DO_FOLLOW_REPOSITION = 33 // Reposition the MAV after a follow target command has been sent
mavlink10.MAV_CMD_NAV_ROI = 80 // Sets the region of interest (ROI) for a sensor set or the vehicle
                        // itself. This can then be used by the
                        // vehicles control system to control the
                        // vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink10.MAV_CMD_NAV_PATHPLANNING = 81 // Control autonomous path planning on the MAV.
mavlink10.MAV_CMD_NAV_SPLINE_WAYPOINT = 82 // Navigate to waypoint using a spline path.
mavlink10.MAV_CMD_NAV_VTOL_TAKEOFF = 84 // Takeoff from ground using VTOL mode, and transition to forward flight
                        // with specified heading.
mavlink10.MAV_CMD_NAV_VTOL_LAND = 85 // Land using VTOL mode
mavlink10.MAV_CMD_NAV_GUIDED_ENABLE = 92 // hand control over to an external controller
mavlink10.MAV_CMD_NAV_DELAY = 93 // Delay the next navigation command a number of seconds or until a
                        // specified time
mavlink10.MAV_CMD_NAV_PAYLOAD_PLACE = 94 // Descend and place payload. Vehicle moves to specified location,
                        // descends until it detects a hanging payload
                        // has reached the ground, and then releases
                        // the payload. If ground is not detected
                        // before the reaching the maximum descent
                        // value (param1), the command will complete
                        // without releasing the payload.
mavlink10.MAV_CMD_NAV_LAST = 95 // NOP - This command is only used to mark the upper limit of the
                        // NAV/ACTION commands in the enumeration
mavlink10.MAV_CMD_CONDITION_DELAY = 112 // Delay mission state machine.
mavlink10.MAV_CMD_CONDITION_CHANGE_ALT = 113 // Ascend/descend at rate.  Delay mission state machine until desired
                        // altitude reached.
mavlink10.MAV_CMD_CONDITION_DISTANCE = 114 // Delay mission state machine until within desired distance of next NAV
                        // point.
mavlink10.MAV_CMD_CONDITION_YAW = 115 // Reach a certain target angle.
mavlink10.MAV_CMD_CONDITION_LAST = 159 // NOP - This command is only used to mark the upper limit of the
                        // CONDITION commands in the enumeration
mavlink10.MAV_CMD_DO_SET_MODE = 176 // Set system mode.
mavlink10.MAV_CMD_DO_JUMP = 177 // Jump to the desired command in the mission list.  Repeat this action
                        // only the specified number of times
mavlink10.MAV_CMD_DO_CHANGE_SPEED = 178 // Change speed and/or throttle set points.
mavlink10.MAV_CMD_DO_SET_HOME = 179 // Changes the home location either to the current location or a
                        // specified location.
mavlink10.MAV_CMD_DO_SET_PARAMETER = 180 // Set a system parameter.  Caution!  Use of this command requires
                        // knowledge of the numeric enumeration value
                        // of the parameter.
mavlink10.MAV_CMD_DO_SET_RELAY = 181 // Set a relay to a condition.
mavlink10.MAV_CMD_DO_REPEAT_RELAY = 182 // Cycle a relay on and off for a desired number of cycles with a desired
                        // period.
mavlink10.MAV_CMD_DO_SET_SERVO = 183 // Set a servo to a desired PWM value.
mavlink10.MAV_CMD_DO_REPEAT_SERVO = 184 // Cycle a between its nominal setting and a desired PWM for a desired
                        // number of cycles with a desired period.
mavlink10.MAV_CMD_DO_FLIGHTTERMINATION = 185 // Terminate flight immediately
mavlink10.MAV_CMD_DO_CHANGE_ALTITUDE = 186 // Change altitude set point.
mavlink10.MAV_CMD_DO_LAND_START = 189 // Mission command to perform a landing. This is used as a marker in a
                        // mission to tell the autopilot where a
                        // sequence of mission items that represents a
                        // landing starts. It may also be sent via a
                        // COMMAND_LONG to trigger a landing, in which
                        // case the nearest (geographically) landing
                        // sequence in the mission will be used. The
                        // Latitude/Longitude is optional, and may be
                        // set to 0 if not needed. If specified then
                        // it will be used to help find the closest
                        // landing sequence.
mavlink10.MAV_CMD_DO_RALLY_LAND = 190 // Mission command to perform a landing from a rally point.
mavlink10.MAV_CMD_DO_GO_AROUND = 191 // Mission command to safely abort an autonomous landing.
mavlink10.MAV_CMD_DO_REPOSITION = 192 // Reposition the vehicle to a specific WGS84 global position.
mavlink10.MAV_CMD_DO_PAUSE_CONTINUE = 193 // If in a GPS controlled position mode, hold the current position or
                        // continue.
mavlink10.MAV_CMD_DO_SET_REVERSE = 194 // Set moving direction to forward or reverse.
mavlink10.MAV_CMD_DO_SET_ROI_LOCATION = 195 // Sets the region of interest (ROI) to a location. This can then be used
                        // by the vehicles control system to control
                        // the vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink10.MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196 // Sets the region of interest (ROI) to be toward next waypoint, with
                        // optional pitch/roll/yaw offset. This can
                        // then be used by the vehicles control system
                        // to control the vehicle attitude and the
                        // attitude of various sensors such as
                        // cameras.
mavlink10.MAV_CMD_DO_SET_ROI_NONE = 197 // Cancels any previous ROI command returning the vehicle/sensors to
                        // default flight characteristics. This can
                        // then be used by the vehicles control system
                        // to control the vehicle attitude and the
                        // attitude of various sensors such as
                        // cameras.
mavlink10.MAV_CMD_DO_SET_ROI_SYSID = 198 // Mount tracks system with specified system ID. Determination of target
                        // vehicle position may be done with
                        // GLOBAL_POSITION_INT or any other means.
mavlink10.MAV_CMD_DO_CONTROL_VIDEO = 200 // Control onboard camera system.
mavlink10.MAV_CMD_DO_SET_ROI = 201 // Sets the region of interest (ROI) for a sensor set or the vehicle
                        // itself. This can then be used by the
                        // vehicles control system to control the
                        // vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink10.MAV_CMD_DO_DIGICAM_CONFIGURE = 202 // Configure digital camera. This is a fallback message for systems that
                        // have not yet implemented PARAM_EXT_XXX
                        // messages and camera definition files (see h
                        // ttps://mavlink.io/en/services/camera_def.ht
                        // ml ).
mavlink10.MAV_CMD_DO_DIGICAM_CONTROL = 203 // Control digital camera. This is a fallback message for systems that
                        // have not yet implemented PARAM_EXT_XXX
                        // messages and camera definition files (see h
                        // ttps://mavlink.io/en/services/camera_def.ht
                        // ml ).
mavlink10.MAV_CMD_DO_MOUNT_CONFIGURE = 204 // Mission command to configure a camera or antenna mount
mavlink10.MAV_CMD_DO_MOUNT_CONTROL = 205 // Mission command to control a camera or antenna mount
mavlink10.MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206 // Mission command to set camera trigger distance for this flight. The
                        // camera is triggered each time this distance
                        // is exceeded. This command can also be used
                        // to set the shutter integration time for the
                        // camera.
mavlink10.MAV_CMD_DO_FENCE_ENABLE = 207 // Mission command to enable the geofence
mavlink10.MAV_CMD_DO_PARACHUTE = 208 // Mission command to trigger a parachute
mavlink10.MAV_CMD_DO_MOTOR_TEST = 209 // Mission command to perform motor test.
mavlink10.MAV_CMD_DO_INVERTED_FLIGHT = 210 // Change to/from inverted flight.
mavlink10.MAV_CMD_NAV_SET_YAW_SPEED = 213 // Sets a desired vehicle turn angle and speed change.
mavlink10.MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214 // Mission command to set camera trigger interval for this flight. If
                        // triggering is enabled, the camera is
                        // triggered each time this interval expires.
                        // This command can also be used to set the
                        // shutter integration time for the camera.
mavlink10.MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220 // Mission command to control a camera or antenna mount, using a
                        // quaternion as reference.
mavlink10.MAV_CMD_DO_GUIDED_MASTER = 221 // set id of master controller
mavlink10.MAV_CMD_DO_GUIDED_LIMITS = 222 // Set limits for external control
mavlink10.MAV_CMD_DO_ENGINE_CONTROL = 223 // Control vehicle engine. This is interpreted by the vehicles engine
                        // controller to change the target engine
                        // state. It is intended for vehicles with
                        // internal combustion engines
mavlink10.MAV_CMD_DO_SET_MISSION_CURRENT = 224 // Set the mission item with sequence number seq as current item. This
                        // means that the MAV will continue to this
                        // mission item on the shortest path (not
                        // following the mission items in-between).
mavlink10.MAV_CMD_DO_LAST = 240 // NOP - This command is only used to mark the upper limit of the DO
                        // commands in the enumeration
mavlink10.MAV_CMD_PREFLIGHT_CALIBRATION = 241 // Trigger calibration. This command will be only accepted if in pre-
                        // flight mode. Except for Temperature
                        // Calibration, only one sensor should be set
                        // in a single message and all others should
                        // be zero.
mavlink10.MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242 // Set sensor offsets. This command will be only accepted if in pre-
                        // flight mode.
mavlink10.MAV_CMD_PREFLIGHT_UAVCAN = 243 // Trigger UAVCAN configuration (actuator ID assignment and direction
                        // mapping). Note that this maps to the legacy
                        // UAVCAN v0 function UAVCAN_ENUMERATE, which
                        // is intended to be executed just once during
                        // initial vehicle configuration (it is not a
                        // normal pre-flight command and has been
                        // poorly named).
mavlink10.MAV_CMD_PREFLIGHT_STORAGE = 245 // Request storage of different parameter values and logs. This command
                        // will be only accepted if in pre-flight
                        // mode.
mavlink10.MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246 // Request the reboot or shutdown of system components.
mavlink10.MAV_CMD_OVERRIDE_GOTO = 252 // Override current mission with command to pause mission, pause mission
                        // and move to position, continue/resume
                        // mission. When param 1 indicates that the
                        // mission is paused (MAV_GOTO_DO_HOLD), param
                        // 2 defines whether it holds in place or
                        // moves to another position.
mavlink10.MAV_CMD_OBLIQUE_SURVEY = 260 // Mission command to set a Camera Auto Mount Pivoting Oblique Survey
                        // (Replaces CAM_TRIGG_DIST for this purpose).
                        // The camera is triggered each time this
                        // distance is exceeded, then the mount moves
                        // to the next position. Params 4~6 set-up the
                        // angle limits and number of positions for
                        // oblique survey, where mount-enabled
                        // vehicles automatically roll the camera
                        // between shots to emulate an oblique camera
                        // setup (providing an increased HFOV). This
                        // command can also be used to set the shutter
                        // integration time for the camera.
mavlink10.MAV_CMD_MISSION_START = 300 // start running a mission
mavlink10.MAV_CMD_COMPONENT_ARM_DISARM = 400 // Arms / Disarms a component
mavlink10.MAV_CMD_GET_HOME_POSITION = 410 // Request the home position from the vehicle.
mavlink10.MAV_CMD_START_RX_PAIR = 500 // Starts receiver pairing.
mavlink10.MAV_CMD_GET_MESSAGE_INTERVAL = 510 // Request the interval between messages for a particular MAVLink message
                        // ID. The receiver should ACK the command and
                        // then emit its response in a
                        // MESSAGE_INTERVAL message.
mavlink10.MAV_CMD_SET_MESSAGE_INTERVAL = 511 // Set the interval between messages for a particular MAVLink message ID.
                        // This interface replaces
                        // REQUEST_DATA_STREAM.
mavlink10.MAV_CMD_REQUEST_MESSAGE = 512 // Request the target system(s) emit a single instance of a specified
                        // message (i.e. a "one-shot" version of
                        // MAV_CMD_SET_MESSAGE_INTERVAL).
mavlink10.MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520 // Request autopilot capabilities. The receiver should ACK the command
                        // and then emit its capabilities in an
                        // AUTOPILOT_VERSION message
mavlink10.MAV_CMD_REQUEST_CAMERA_INFORMATION = 521 // Request camera information (CAMERA_INFORMATION).
mavlink10.MAV_CMD_REQUEST_CAMERA_SETTINGS = 522 // Request camera settings (CAMERA_SETTINGS).
mavlink10.MAV_CMD_REQUEST_STORAGE_INFORMATION = 525 // Request storage information (STORAGE_INFORMATION). Use the command's
                        // target_component to target a specific
                        // component's storage.
mavlink10.MAV_CMD_STORAGE_FORMAT = 526 // Format a storage medium. Once format is complete, a
                        // STORAGE_INFORMATION message is sent. Use
                        // the command's target_component to target a
                        // specific component's storage.
mavlink10.MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527 // Request camera capture status (CAMERA_CAPTURE_STATUS)
mavlink10.MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528 // Request flight information (FLIGHT_INFORMATION)
mavlink10.MAV_CMD_RESET_CAMERA_SETTINGS = 529 // Reset all camera settings to Factory Default
mavlink10.MAV_CMD_SET_CAMERA_MODE = 530 // Set camera running mode. Use NaN for reserved values. GCS will send a
                        // MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command
                        // after a mode change if the camera supports
                        // video streaming.
mavlink10.MAV_CMD_JUMP_TAG = 600 // Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
mavlink10.MAV_CMD_DO_JUMP_TAG = 601 // Jump to the matching tag in the mission list. Repeat this action for
                        // the specified number of times. A mission
                        // should contain a single matching tag for
                        // each jump. If this is not the case then a
                        // jump to a missing tag should complete the
                        // mission, and a jump where there are
                        // multiple matching tags should always select
                        // the one with the lowest mission sequence
                        // number.
mavlink10.MAV_CMD_IMAGE_START_CAPTURE = 2000 // Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each
                        // capture. Use NaN for reserved values.
mavlink10.MAV_CMD_IMAGE_STOP_CAPTURE = 2001 // Stop image capture sequence Use NaN for reserved values.
mavlink10.MAV_CMD_DO_TRIGGER_CONTROL = 2003 // Enable or disable on-board camera triggering system.
mavlink10.MAV_CMD_VIDEO_START_CAPTURE = 2500 // Starts video capture (recording). Use NaN for reserved values.
mavlink10.MAV_CMD_VIDEO_STOP_CAPTURE = 2501 // Stop the current video capture (recording). Use NaN for reserved
                        // values.
mavlink10.MAV_CMD_LOGGING_START = 2510 // Request to start streaming logging data over MAVLink (see also
                        // LOGGING_DATA message)
mavlink10.MAV_CMD_LOGGING_STOP = 2511 // Request to stop streaming log data over MAVLink
mavlink10.MAV_CMD_AIRFRAME_CONFIGURATION = 2520 // 
mavlink10.MAV_CMD_CONTROL_HIGH_LATENCY = 2600 // Request to start/stop transmitting over the high latency telemetry
mavlink10.MAV_CMD_PANORAMA_CREATE = 2800 // Create a panorama at the current position
mavlink10.MAV_CMD_DO_VTOL_TRANSITION = 3000 // Request VTOL transition
mavlink10.MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001 // Request authorization to arm the vehicle to a external entity, the arm
                        // authorizer is responsible to request all
                        // data that is needs from the vehicle before
                        // authorize or deny the request. If approved
                        // the progress of command_ack message should
                        // be set with period of time that this
                        // authorization is valid in seconds or in
                        // case it was denied it should be set with
                        // one of the reasons in
                        // ARM_AUTH_DENIED_REASON.
mavlink10.MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000 // This command sets the submode to standard guided when vehicle is in
                        // guided mode. The vehicle holds position and
                        // altitude and the user can input the desired
                        // velocities along all three axes.
mavlink10.MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001 // This command sets submode circle when vehicle is in guided mode.
                        // Vehicle flies along a circle facing the
                        // center of the circle. The user can input
                        // the velocity along the circle and change
                        // the radius. If no input is given the
                        // vehicle will hold position.
mavlink10.MAV_CMD_NAV_FENCE_RETURN_POINT = 5000 // Fence return point. There can only be one fence return point.
mavlink10.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001 // Fence vertex for an inclusion polygon (the polygon must not be self-
                        // intersecting). The vehicle must stay within
                        // this area. Minimum of 3 vertices required.
mavlink10.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002 // Fence vertex for an exclusion polygon (the polygon must not be self-
                        // intersecting). The vehicle must stay
                        // outside this area. Minimum of 3 vertices
                        // required.
mavlink10.MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003 // Circular fence area. The vehicle must stay inside this area.
mavlink10.MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004 // Circular fence area. The vehicle must stay outside this area.
mavlink10.MAV_CMD_NAV_RALLY_POINT = 5100 // Rally point. You can have multiple rally points defined.
mavlink10.MAV_CMD_UAVCAN_GET_NODE_INFO = 5200 // Commands the vehicle to respond with a sequence of messages
                        // UAVCAN_NODE_INFO, one message per every
                        // UAVCAN node that is online. Note that some
                        // of the response messages can be lost, which
                        // the receiver can detect easily by checking
                        // whether every received UAVCAN_NODE_STATUS
                        // has a matching message UAVCAN_NODE_INFO
                        // received earlier; if not, this command
                        // should be sent again in order to request
                        // re-transmission of the node information
                        // messages.
mavlink10.MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001 // Deploy payload on a Lat / Lon / Alt position. This includes the
                        // navigation to reach the required release
                        // position and velocity.
mavlink10.MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002 // Control the payload deployment.
mavlink10.MAV_CMD_WAYPOINT_USER_1 = 31000 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink10.MAV_CMD_WAYPOINT_USER_2 = 31001 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink10.MAV_CMD_WAYPOINT_USER_3 = 31002 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink10.MAV_CMD_WAYPOINT_USER_4 = 31003 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink10.MAV_CMD_WAYPOINT_USER_5 = 31004 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink10.MAV_CMD_SPATIAL_USER_1 = 31005 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink10.MAV_CMD_SPATIAL_USER_2 = 31006 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink10.MAV_CMD_SPATIAL_USER_3 = 31007 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink10.MAV_CMD_SPATIAL_USER_4 = 31008 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink10.MAV_CMD_SPATIAL_USER_5 = 31009 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink10.MAV_CMD_USER_1 = 31010 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink10.MAV_CMD_USER_2 = 31011 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink10.MAV_CMD_USER_3 = 31012 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink10.MAV_CMD_USER_4 = 31013 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink10.MAV_CMD_USER_5 = 31014 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink10.MAV_CMD_ENUM_END = 31015 // 

// MAV_DATA_STREAM
mavlink10.MAV_DATA_STREAM_ALL = 0 // Enable all data streams
mavlink10.MAV_DATA_STREAM_RAW_SENSORS = 1 // Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
mavlink10.MAV_DATA_STREAM_EXTENDED_STATUS = 2 // Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
mavlink10.MAV_DATA_STREAM_RC_CHANNELS = 3 // Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
mavlink10.MAV_DATA_STREAM_RAW_CONTROLLER = 4 // Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT,
                        // NAV_CONTROLLER_OUTPUT.
mavlink10.MAV_DATA_STREAM_POSITION = 6 // Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
mavlink10.MAV_DATA_STREAM_EXTRA1 = 10 // Dependent on the autopilot
mavlink10.MAV_DATA_STREAM_EXTRA2 = 11 // Dependent on the autopilot
mavlink10.MAV_DATA_STREAM_EXTRA3 = 12 // Dependent on the autopilot
mavlink10.MAV_DATA_STREAM_ENUM_END = 13 // 

// MAV_ROI
mavlink10.MAV_ROI_NONE = 0 // No region of interest.
mavlink10.MAV_ROI_WPNEXT = 1 // Point toward next waypoint, with optional pitch/roll/yaw offset.
mavlink10.MAV_ROI_WPINDEX = 2 // Point toward given waypoint.
mavlink10.MAV_ROI_LOCATION = 3 // Point toward fixed location.
mavlink10.MAV_ROI_TARGET = 4 // Point toward of given id.
mavlink10.MAV_ROI_ENUM_END = 5 // 

// MAV_CMD_ACK
mavlink10.MAV_CMD_ACK_OK = 1 // Command / mission item is ok.
mavlink10.MAV_CMD_ACK_ERR_FAIL = 2 // Generic error message if none of the other reasons fails or if no
                        // detailed error reporting is implemented.
mavlink10.MAV_CMD_ACK_ERR_ACCESS_DENIED = 3 // The system is refusing to accept this command from this source /
                        // communication partner.
mavlink10.MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4 // Command or mission item is not supported, other commands would be
                        // accepted.
mavlink10.MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5 // The coordinate frame of this command / mission item is not supported.
mavlink10.MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6 // The coordinate frame of this command is ok, but he coordinate values
                        // exceed the safety limits of this system.
                        // This is a generic error, please use the
                        // more specific error messages below if
                        // possible.
mavlink10.MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7 // The X or latitude value is out of range.
mavlink10.MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8 // The Y or longitude value is out of range.
mavlink10.MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9 // The Z or altitude value is out of range.
mavlink10.MAV_CMD_ACK_ENUM_END = 10 // 

// MAV_PARAM_TYPE
mavlink10.MAV_PARAM_TYPE_UINT8 = 1 // 8-bit unsigned integer
mavlink10.MAV_PARAM_TYPE_INT8 = 2 // 8-bit signed integer
mavlink10.MAV_PARAM_TYPE_UINT16 = 3 // 16-bit unsigned integer
mavlink10.MAV_PARAM_TYPE_INT16 = 4 // 16-bit signed integer
mavlink10.MAV_PARAM_TYPE_UINT32 = 5 // 32-bit unsigned integer
mavlink10.MAV_PARAM_TYPE_INT32 = 6 // 32-bit signed integer
mavlink10.MAV_PARAM_TYPE_UINT64 = 7 // 64-bit unsigned integer
mavlink10.MAV_PARAM_TYPE_INT64 = 8 // 64-bit signed integer
mavlink10.MAV_PARAM_TYPE_REAL32 = 9 // 32-bit floating-point
mavlink10.MAV_PARAM_TYPE_REAL64 = 10 // 64-bit floating-point
mavlink10.MAV_PARAM_TYPE_ENUM_END = 11 // 

// MAV_RESULT
mavlink10.MAV_RESULT_ACCEPTED = 0 // Command is valid (is supported and has valid parameters), and was
                        // executed.
mavlink10.MAV_RESULT_TEMPORARILY_REJECTED = 1 // Command is valid, but cannot be executed at this time. This is used to
                        // indicate a problem that should be fixed
                        // just by waiting (e.g. a state machine is
                        // busy, can't arm because have not got GPS
                        // lock, etc.). Retrying later should work.
mavlink10.MAV_RESULT_DENIED = 2 // Command is invalid (is supported but has invalid parameters). Retrying
                        // same command and parameters will not work.
mavlink10.MAV_RESULT_UNSUPPORTED = 3 // Command is not supported (unknown).
mavlink10.MAV_RESULT_FAILED = 4 // Command is valid, but execution has failed. This is used to indicate
                        // any non-temporary or unexpected problem,
                        // i.e. any problem that must be fixed before
                        // the command can succeed/be retried. For
                        // example, attempting to write a file when
                        // out of memory, attempting to arm when
                        // sensors are not calibrated, etc.
mavlink10.MAV_RESULT_IN_PROGRESS = 5 // Command is valid and is being executed. This will be followed by
                        // further progress updates, i.e. the
                        // component may send further COMMAND_ACK
                        // messages with result MAV_RESULT_IN_PROGRESS
                        // (at a rate decided by the implementation),
                        // and must terminate by sending a COMMAND_ACK
                        // message with final result of the operation.
                        // The COMMAND_ACK.progress field can be used
                        // to indicate the progress of the operation.
                        // There is no need for the sender to retry
                        // the command, but if done during execution,
                        // the component will return
                        // MAV_RESULT_IN_PROGRESS with an updated
                        // progress.
mavlink10.MAV_RESULT_ENUM_END = 6 // 

// MAV_MISSION_RESULT
mavlink10.MAV_MISSION_ACCEPTED = 0 // mission accepted OK
mavlink10.MAV_MISSION_ERROR = 1 // Generic error / not accepting mission commands at all right now.
mavlink10.MAV_MISSION_UNSUPPORTED_FRAME = 2 // Coordinate frame is not supported.
mavlink10.MAV_MISSION_UNSUPPORTED = 3 // Command is not supported.
mavlink10.MAV_MISSION_NO_SPACE = 4 // Mission items exceed storage space.
mavlink10.MAV_MISSION_INVALID = 5 // One of the parameters has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM1 = 6 // param1 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM2 = 7 // param2 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM3 = 8 // param3 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM4 = 9 // param4 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM5_X = 10 // x / param5 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM6_Y = 11 // y / param6 has an invalid value.
mavlink10.MAV_MISSION_INVALID_PARAM7 = 12 // z / param7 has an invalid value.
mavlink10.MAV_MISSION_INVALID_SEQUENCE = 13 // Mission item received out of sequence
mavlink10.MAV_MISSION_DENIED = 14 // Not accepting any mission commands from this communication partner.
mavlink10.MAV_MISSION_OPERATION_CANCELLED = 15 // Current mission operation cancelled (e.g. mission upload, mission
                        // download).
mavlink10.MAV_MISSION_RESULT_ENUM_END = 16 // 

// MAV_SEVERITY
mavlink10.MAV_SEVERITY_EMERGENCY = 0 // System is unusable. This is a "panic" condition.
mavlink10.MAV_SEVERITY_ALERT = 1 // Action should be taken immediately. Indicates error in non-critical
                        // systems.
mavlink10.MAV_SEVERITY_CRITICAL = 2 // Action must be taken immediately. Indicates failure in a primary
                        // system.
mavlink10.MAV_SEVERITY_ERROR = 3 // Indicates an error in secondary/redundant systems.
mavlink10.MAV_SEVERITY_WARNING = 4 // Indicates about a possible future error if this is not resolved within
                        // a given timeframe. Example would be a low
                        // battery warning.
mavlink10.MAV_SEVERITY_NOTICE = 5 // An unusual event has occurred, though not an error condition. This
                        // should be investigated for the root cause.
mavlink10.MAV_SEVERITY_INFO = 6 // Normal operational messages. Useful for logging. No action is required
                        // for these messages.
mavlink10.MAV_SEVERITY_DEBUG = 7 // Useful non-operational messages that can assist in debugging. These
                        // should not occur during normal operation.
mavlink10.MAV_SEVERITY_ENUM_END = 8 // 

// MAV_POWER_STATUS
mavlink10.MAV_POWER_STATUS_BRICK_VALID = 1 // main brick power supply valid
mavlink10.MAV_POWER_STATUS_SERVO_VALID = 2 // main servo power supply valid for FMU
mavlink10.MAV_POWER_STATUS_USB_CONNECTED = 4 // USB power is connected
mavlink10.MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8 // peripheral supply is in over-current state
mavlink10.MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16 // hi-power peripheral supply is in over-current state
mavlink10.MAV_POWER_STATUS_CHANGED = 32 // Power status has changed since boot
mavlink10.MAV_POWER_STATUS_ENUM_END = 33 // 

// SERIAL_CONTROL_DEV
mavlink10.SERIAL_CONTROL_DEV_TELEM1 = 0 // First telemetry port
mavlink10.SERIAL_CONTROL_DEV_TELEM2 = 1 // Second telemetry port
mavlink10.SERIAL_CONTROL_DEV_GPS1 = 2 // First GPS port
mavlink10.SERIAL_CONTROL_DEV_GPS2 = 3 // Second GPS port
mavlink10.SERIAL_CONTROL_DEV_SHELL = 10 // system shell
mavlink10.SERIAL_CONTROL_SERIAL0 = 100 // SERIAL0
mavlink10.SERIAL_CONTROL_SERIAL1 = 101 // SERIAL1
mavlink10.SERIAL_CONTROL_SERIAL2 = 102 // SERIAL2
mavlink10.SERIAL_CONTROL_SERIAL3 = 103 // SERIAL3
mavlink10.SERIAL_CONTROL_SERIAL4 = 104 // SERIAL4
mavlink10.SERIAL_CONTROL_SERIAL5 = 105 // SERIAL5
mavlink10.SERIAL_CONTROL_SERIAL6 = 106 // SERIAL6
mavlink10.SERIAL_CONTROL_SERIAL7 = 107 // SERIAL7
mavlink10.SERIAL_CONTROL_SERIAL8 = 108 // SERIAL8
mavlink10.SERIAL_CONTROL_SERIAL9 = 109 // SERIAL9
mavlink10.SERIAL_CONTROL_DEV_ENUM_END = 110 // 

// SERIAL_CONTROL_FLAG
mavlink10.SERIAL_CONTROL_FLAG_REPLY = 1 // Set if this is a reply
mavlink10.SERIAL_CONTROL_FLAG_RESPOND = 2 // Set if the sender wants the receiver to send a response as another
                        // SERIAL_CONTROL message
mavlink10.SERIAL_CONTROL_FLAG_EXCLUSIVE = 4 // Set if access to the serial port should be removed from whatever
                        // driver is currently using it, giving
                        // exclusive access to the SERIAL_CONTROL
                        // protocol. The port can be handed back by
                        // sending a request without this flag set
mavlink10.SERIAL_CONTROL_FLAG_BLOCKING = 8 // Block on writes to the serial port
mavlink10.SERIAL_CONTROL_FLAG_MULTI = 16 // Send multiple replies until port is drained
mavlink10.SERIAL_CONTROL_FLAG_ENUM_END = 17 // 

// MAV_DISTANCE_SENSOR
mavlink10.MAV_DISTANCE_SENSOR_LASER = 0 // Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
mavlink10.MAV_DISTANCE_SENSOR_ULTRASOUND = 1 // Ultrasound rangefinder, e.g. MaxBotix units
mavlink10.MAV_DISTANCE_SENSOR_INFRARED = 2 // Infrared rangefinder, e.g. Sharp units
mavlink10.MAV_DISTANCE_SENSOR_RADAR = 3 // Radar type, e.g. uLanding units
mavlink10.MAV_DISTANCE_SENSOR_UNKNOWN = 4 // Broken or unknown type, e.g. analog units
mavlink10.MAV_DISTANCE_SENSOR_ENUM_END = 5 // 

// MAV_SENSOR_ORIENTATION
mavlink10.MAV_SENSOR_ROTATION_NONE = 0 // Roll: 0, Pitch: 0, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_YAW_45 = 1 // Roll: 0, Pitch: 0, Yaw: 45
mavlink10.MAV_SENSOR_ROTATION_YAW_90 = 2 // Roll: 0, Pitch: 0, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_YAW_135 = 3 // Roll: 0, Pitch: 0, Yaw: 135
mavlink10.MAV_SENSOR_ROTATION_YAW_180 = 4 // Roll: 0, Pitch: 0, Yaw: 180
mavlink10.MAV_SENSOR_ROTATION_YAW_225 = 5 // Roll: 0, Pitch: 0, Yaw: 225
mavlink10.MAV_SENSOR_ROTATION_YAW_270 = 6 // Roll: 0, Pitch: 0, Yaw: 270
mavlink10.MAV_SENSOR_ROTATION_YAW_315 = 7 // Roll: 0, Pitch: 0, Yaw: 315
mavlink10.MAV_SENSOR_ROTATION_ROLL_180 = 8 // Roll: 180, Pitch: 0, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9 // Roll: 180, Pitch: 0, Yaw: 45
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10 // Roll: 180, Pitch: 0, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11 // Roll: 180, Pitch: 0, Yaw: 135
mavlink10.MAV_SENSOR_ROTATION_PITCH_180 = 12 // Roll: 0, Pitch: 180, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13 // Roll: 180, Pitch: 0, Yaw: 225
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14 // Roll: 180, Pitch: 0, Yaw: 270
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15 // Roll: 180, Pitch: 0, Yaw: 315
mavlink10.MAV_SENSOR_ROTATION_ROLL_90 = 16 // Roll: 90, Pitch: 0, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17 // Roll: 90, Pitch: 0, Yaw: 45
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18 // Roll: 90, Pitch: 0, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19 // Roll: 90, Pitch: 0, Yaw: 135
mavlink10.MAV_SENSOR_ROTATION_ROLL_270 = 20 // Roll: 270, Pitch: 0, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21 // Roll: 270, Pitch: 0, Yaw: 45
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22 // Roll: 270, Pitch: 0, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23 // Roll: 270, Pitch: 0, Yaw: 135
mavlink10.MAV_SENSOR_ROTATION_PITCH_90 = 24 // Roll: 0, Pitch: 90, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_PITCH_270 = 25 // Roll: 0, Pitch: 270, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26 // Roll: 0, Pitch: 180, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27 // Roll: 0, Pitch: 180, Yaw: 270
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28 // Roll: 90, Pitch: 90, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29 // Roll: 180, Pitch: 90, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30 // Roll: 270, Pitch: 90, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31 // Roll: 90, Pitch: 180, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32 // Roll: 270, Pitch: 180, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33 // Roll: 90, Pitch: 270, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34 // Roll: 180, Pitch: 270, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35 // Roll: 270, Pitch: 270, Yaw: 0
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36 // Roll: 90, Pitch: 180, Yaw: 90
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37 // Roll: 90, Pitch: 0, Yaw: 270
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38 // Roll: 90, Pitch: 68, Yaw: 293
mavlink10.MAV_SENSOR_ROTATION_PITCH_315 = 39 // Pitch: 315
mavlink10.MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40 // Roll: 90, Pitch: 315
mavlink10.MAV_SENSOR_ROTATION_CUSTOM = 100 // Custom orientation
mavlink10.MAV_SENSOR_ORIENTATION_ENUM_END = 101 // 

// MAV_PROTOCOL_CAPABILITY
mavlink10.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1 // Autopilot supports MISSION float message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2 // Autopilot supports the new param float message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4 // Autopilot supports MISSION_ITEM_INT scaled integer message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8 // Autopilot supports COMMAND_INT scaled integer message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16 // Autopilot supports the new param union message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_FTP = 32 // Autopilot supports the new FILE_TRANSFER_PROTOCOL message type.
mavlink10.MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64 // Autopilot supports commanding attitude offboard.
mavlink10.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128 // Autopilot supports commanding position and velocity targets in local
                        // NED frame.
mavlink10.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256 // Autopilot supports commanding position and velocity targets in global
                        // scaled integers.
mavlink10.MAV_PROTOCOL_CAPABILITY_TERRAIN = 512 // Autopilot supports terrain protocol / data handling.
mavlink10.MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024 // Autopilot supports direct actuator control.
mavlink10.MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048 // Autopilot supports the flight termination command.
mavlink10.MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096 // Autopilot supports onboard compass calibration.
mavlink10.MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192 // Autopilot supports MAVLink version 2.
mavlink10.MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 16384 // Autopilot supports mission fence protocol.
mavlink10.MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 32768 // Autopilot supports mission rally point protocol.
mavlink10.MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 65536 // Autopilot supports the flight information protocol.
mavlink10.MAV_PROTOCOL_CAPABILITY_ENUM_END = 65537 // 

// MAV_MISSION_TYPE
mavlink10.MAV_MISSION_TYPE_MISSION = 0 // Items are mission commands for main mission.
mavlink10.MAV_MISSION_TYPE_FENCE = 1 // Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence
                        // items.
mavlink10.MAV_MISSION_TYPE_RALLY = 2 // Specifies the rally points for the vehicle. Rally points are
                        // alternative RTL points. Items are
                        // MAV_CMD_NAV_RALLY_POINT rally point items.
mavlink10.MAV_MISSION_TYPE_ALL = 255 // Only used in MISSION_CLEAR_ALL to clear all mission types.
mavlink10.MAV_MISSION_TYPE_ENUM_END = 256 // 

// MAV_ESTIMATOR_TYPE
mavlink10.MAV_ESTIMATOR_TYPE_UNKNOWN = 0 // Unknown type of the estimator.
mavlink10.MAV_ESTIMATOR_TYPE_NAIVE = 1 // This is a naive estimator without any real covariance feedback.
mavlink10.MAV_ESTIMATOR_TYPE_VISION = 2 // Computer vision based estimate. Might be up to scale.
mavlink10.MAV_ESTIMATOR_TYPE_VIO = 3 // Visual-inertial estimate.
mavlink10.MAV_ESTIMATOR_TYPE_GPS = 4 // Plain GPS estimate.
mavlink10.MAV_ESTIMATOR_TYPE_GPS_INS = 5 // Estimator integrating GPS and inertial sensing.
mavlink10.MAV_ESTIMATOR_TYPE_MOCAP = 6 // Estimate from external motion capturing system.
mavlink10.MAV_ESTIMATOR_TYPE_LIDAR = 7 // Estimator based on lidar sensor input.
mavlink10.MAV_ESTIMATOR_TYPE_AUTOPILOT = 8 // Estimator on autopilot.
mavlink10.MAV_ESTIMATOR_TYPE_ENUM_END = 9 // 

// MAV_BATTERY_TYPE
mavlink10.MAV_BATTERY_TYPE_UNKNOWN = 0 // Not specified.
mavlink10.MAV_BATTERY_TYPE_LIPO = 1 // Lithium polymer battery
mavlink10.MAV_BATTERY_TYPE_LIFE = 2 // Lithium-iron-phosphate battery
mavlink10.MAV_BATTERY_TYPE_LION = 3 // Lithium-ION battery
mavlink10.MAV_BATTERY_TYPE_NIMH = 4 // Nickel metal hydride battery
mavlink10.MAV_BATTERY_TYPE_ENUM_END = 5 // 

// MAV_BATTERY_FUNCTION
mavlink10.MAV_BATTERY_FUNCTION_UNKNOWN = 0 // Battery function is unknown
mavlink10.MAV_BATTERY_FUNCTION_ALL = 1 // Battery supports all flight systems
mavlink10.MAV_BATTERY_FUNCTION_PROPULSION = 2 // Battery for the propulsion system
mavlink10.MAV_BATTERY_FUNCTION_AVIONICS = 3 // Avionics battery
mavlink10.MAV_BATTERY_TYPE_PAYLOAD = 4 // Payload battery
mavlink10.MAV_BATTERY_FUNCTION_ENUM_END = 5 // 

// MAV_BATTERY_CHARGE_STATE
mavlink10.MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0 // Low battery state is not provided
mavlink10.MAV_BATTERY_CHARGE_STATE_OK = 1 // Battery is not in low state. Normal operation.
mavlink10.MAV_BATTERY_CHARGE_STATE_LOW = 2 // Battery state is low, warn and monitor close.
mavlink10.MAV_BATTERY_CHARGE_STATE_CRITICAL = 3 // Battery state is critical, return or abort immediately.
mavlink10.MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4 // Battery state is too low for ordinary abort sequence. Perform fastest
                        // possible emergency stop to prevent damage.
mavlink10.MAV_BATTERY_CHARGE_STATE_FAILED = 5 // Battery failed, damage unavoidable.
mavlink10.MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6 // Battery is diagnosed to be defective or an error occurred, usage is
                        // discouraged / prohibited.
mavlink10.MAV_BATTERY_CHARGE_STATE_CHARGING = 7 // Battery is charging.
mavlink10.MAV_BATTERY_CHARGE_STATE_ENUM_END = 8 // 

// MAV_GENERATOR_STATUS_FLAG
mavlink10.MAV_GENERATOR_STATUS_FLAG_OFF = 1 // Generator is off.
mavlink10.MAV_GENERATOR_STATUS_FLAG_READY = 2 // Generator is ready to start generating power.
mavlink10.MAV_GENERATOR_STATUS_FLAG_GENERATING = 4 // Generator is generating power.
mavlink10.MAV_GENERATOR_STATUS_FLAG_CHARGING = 8 // Generator is charging the batteries (generating enough power to charge
                        // and provide the load).
mavlink10.MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER = 16 // Generator is operating at a reduced maximum power.
mavlink10.MAV_GENERATOR_STATUS_FLAG_MAXPOWER = 32 // Generator is providing the maximum output.
mavlink10.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING = 64 // Generator is near the maximum operating temperature, cooling is
                        // insufficient.
mavlink10.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT = 128 // Generator hit the maximum operating temperature and shutdown.
mavlink10.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING = 256 // Power electronics are near the maximum operating temperature, cooling
                        // is insufficient.
mavlink10.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT = 512 // Power electronics hit the maximum operating temperature and shutdown.
mavlink10.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT = 1024 // Power electronics experienced a fault and shutdown.
mavlink10.MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT = 2048 // The power source supplying the generator failed e.g. mechanical
                        // generator stopped, tether is no longer
                        // providing power, solar cell is in shade,
                        // hydrogen reaction no longer happening.
mavlink10.MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING = 4096 // Generator controller having communication problems.
mavlink10.MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING = 8192 // Power electronic or generator cooling system error.
mavlink10.MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT = 16384 // Generator controller power rail experienced a fault.
mavlink10.MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT = 32768 // Generator controller exceeded the overcurrent threshold and shutdown
                        // to prevent damage.
mavlink10.MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT = 65536 // Generator controller detected a high current going into the batteries
                        // and shutdown to prevent battery damage.
mavlink10.MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT = 131072 // Generator controller exceeded it's overvoltage threshold and shutdown
                        // to prevent it exceeding the voltage rating.
mavlink10.MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT = 262144 // Batteries are under voltage.
mavlink10.MAV_GENERATOR_STATUS_FLAG_START_INHIBITED = 524288 // Generator start is inhibited by e.g. a safety switch.
mavlink10.MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED = 1048576 // Generator requires maintenance.
mavlink10.MAV_GENERATOR_STATUS_FLAG_WARMING_UP = 2097152 // Generator is not ready to generate yet.
mavlink10.MAV_GENERATOR_STATUS_FLAG_IDLE = 4194304 // Generator is idle.
mavlink10.MAV_GENERATOR_STATUS_FLAG_ENUM_END = 4194305 // 

// MAV_VTOL_STATE
mavlink10.MAV_VTOL_STATE_UNDEFINED = 0 // MAV is not configured as VTOL
mavlink10.MAV_VTOL_STATE_TRANSITION_TO_FW = 1 // VTOL is in transition from multicopter to fixed-wing
mavlink10.MAV_VTOL_STATE_TRANSITION_TO_MC = 2 // VTOL is in transition from fixed-wing to multicopter
mavlink10.MAV_VTOL_STATE_MC = 3 // VTOL is in multicopter state
mavlink10.MAV_VTOL_STATE_FW = 4 // VTOL is in fixed-wing state
mavlink10.MAV_VTOL_STATE_ENUM_END = 5 // 

// MAV_LANDED_STATE
mavlink10.MAV_LANDED_STATE_UNDEFINED = 0 // MAV landed state is unknown
mavlink10.MAV_LANDED_STATE_ON_GROUND = 1 // MAV is landed (on ground)
mavlink10.MAV_LANDED_STATE_IN_AIR = 2 // MAV is in air
mavlink10.MAV_LANDED_STATE_TAKEOFF = 3 // MAV currently taking off
mavlink10.MAV_LANDED_STATE_LANDING = 4 // MAV currently landing
mavlink10.MAV_LANDED_STATE_ENUM_END = 5 // 

// ADSB_ALTITUDE_TYPE
mavlink10.ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0 // Altitude reported from a Baro source using QNH reference
mavlink10.ADSB_ALTITUDE_TYPE_GEOMETRIC = 1 // Altitude reported from a GNSS source
mavlink10.ADSB_ALTITUDE_TYPE_ENUM_END = 2 // 

// ADSB_EMITTER_TYPE
mavlink10.ADSB_EMITTER_TYPE_NO_INFO = 0 // 
mavlink10.ADSB_EMITTER_TYPE_LIGHT = 1 // 
mavlink10.ADSB_EMITTER_TYPE_SMALL = 2 // 
mavlink10.ADSB_EMITTER_TYPE_LARGE = 3 // 
mavlink10.ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4 // 
mavlink10.ADSB_EMITTER_TYPE_HEAVY = 5 // 
mavlink10.ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6 // 
mavlink10.ADSB_EMITTER_TYPE_ROTOCRAFT = 7 // 
mavlink10.ADSB_EMITTER_TYPE_UNASSIGNED = 8 // 
mavlink10.ADSB_EMITTER_TYPE_GLIDER = 9 // 
mavlink10.ADSB_EMITTER_TYPE_LIGHTER_AIR = 10 // 
mavlink10.ADSB_EMITTER_TYPE_PARACHUTE = 11 // 
mavlink10.ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12 // 
mavlink10.ADSB_EMITTER_TYPE_UNASSIGNED2 = 13 // 
mavlink10.ADSB_EMITTER_TYPE_UAV = 14 // 
mavlink10.ADSB_EMITTER_TYPE_SPACE = 15 // 
mavlink10.ADSB_EMITTER_TYPE_UNASSGINED3 = 16 // 
mavlink10.ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17 // 
mavlink10.ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18 // 
mavlink10.ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19 // 
mavlink10.ADSB_EMITTER_TYPE_ENUM_END = 20 // 

// ADSB_FLAGS
mavlink10.ADSB_FLAGS_VALID_COORDS = 1 // 
mavlink10.ADSB_FLAGS_VALID_ALTITUDE = 2 // 
mavlink10.ADSB_FLAGS_VALID_HEADING = 4 // 
mavlink10.ADSB_FLAGS_VALID_VELOCITY = 8 // 
mavlink10.ADSB_FLAGS_VALID_CALLSIGN = 16 // 
mavlink10.ADSB_FLAGS_VALID_SQUAWK = 32 // 
mavlink10.ADSB_FLAGS_SIMULATED = 64 // 
mavlink10.ADSB_FLAGS_VERTICAL_VELOCITY_VALID = 128 // 
mavlink10.ADSB_FLAGS_BARO_VALID = 256 // 
mavlink10.ADSB_FLAGS_SOURCE_UAT = 32768 // 
mavlink10.ADSB_FLAGS_ENUM_END = 32769 // 

// MAV_DO_REPOSITION_FLAGS
mavlink10.MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1 // The aircraft should immediately transition into guided. This should
                        // not be set for follow me applications
mavlink10.MAV_DO_REPOSITION_FLAGS_ENUM_END = 2 // 

// ESTIMATOR_STATUS_FLAGS
mavlink10.ESTIMATOR_ATTITUDE = 1 // True if the attitude estimate is good
mavlink10.ESTIMATOR_VELOCITY_HORIZ = 2 // True if the horizontal velocity estimate is good
mavlink10.ESTIMATOR_VELOCITY_VERT = 4 // True if the  vertical velocity estimate is good
mavlink10.ESTIMATOR_POS_HORIZ_REL = 8 // True if the horizontal position (relative) estimate is good
mavlink10.ESTIMATOR_POS_HORIZ_ABS = 16 // True if the horizontal position (absolute) estimate is good
mavlink10.ESTIMATOR_POS_VERT_ABS = 32 // True if the vertical position (absolute) estimate is good
mavlink10.ESTIMATOR_POS_VERT_AGL = 64 // True if the vertical position (above ground) estimate is good
mavlink10.ESTIMATOR_CONST_POS_MODE = 128 // True if the EKF is in a constant position mode and is not using
                        // external measurements (eg GPS or optical
                        // flow)
mavlink10.ESTIMATOR_PRED_POS_HORIZ_REL = 256 // True if the EKF has sufficient data to enter a mode that will provide
                        // a (relative) position estimate
mavlink10.ESTIMATOR_PRED_POS_HORIZ_ABS = 512 // True if the EKF has sufficient data to enter a mode that will provide
                        // a (absolute) position estimate
mavlink10.ESTIMATOR_GPS_GLITCH = 1024 // True if the EKF has detected a GPS glitch
mavlink10.ESTIMATOR_ACCEL_ERROR = 2048 // True if the EKF has detected bad accelerometer data
mavlink10.ESTIMATOR_STATUS_FLAGS_ENUM_END = 2049 // 

// MOTOR_TEST_ORDER
mavlink10.MOTOR_TEST_ORDER_DEFAULT = 0 // default autopilot motor test method
mavlink10.MOTOR_TEST_ORDER_SEQUENCE = 1 // motor numbers are specified as their index in a predefined vehicle-
                        // specific sequence
mavlink10.MOTOR_TEST_ORDER_BOARD = 2 // motor numbers are specified as the output as labeled on the board
mavlink10.MOTOR_TEST_ORDER_ENUM_END = 3 // 

// MOTOR_TEST_THROTTLE_TYPE
mavlink10.MOTOR_TEST_THROTTLE_PERCENT = 0 // throttle as a percentage from 0 ~ 100
mavlink10.MOTOR_TEST_THROTTLE_PWM = 1 // throttle as an absolute PWM value (normally in range of 1000~2000)
mavlink10.MOTOR_TEST_THROTTLE_PILOT = 2 // throttle pass-through from pilot's transmitter
mavlink10.MOTOR_TEST_COMPASS_CAL = 3 // per-motor compass calibration test
mavlink10.MOTOR_TEST_THROTTLE_TYPE_ENUM_END = 4 // 

// GPS_INPUT_IGNORE_FLAGS
mavlink10.GPS_INPUT_IGNORE_FLAG_ALT = 1 // ignore altitude field
mavlink10.GPS_INPUT_IGNORE_FLAG_HDOP = 2 // ignore hdop field
mavlink10.GPS_INPUT_IGNORE_FLAG_VDOP = 4 // ignore vdop field
mavlink10.GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8 // ignore horizontal velocity field (vn and ve)
mavlink10.GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16 // ignore vertical velocity field (vd)
mavlink10.GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32 // ignore speed accuracy field
mavlink10.GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64 // ignore horizontal accuracy field
mavlink10.GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128 // ignore vertical accuracy field
mavlink10.GPS_INPUT_IGNORE_FLAGS_ENUM_END = 129 // 

// MAV_COLLISION_ACTION
mavlink10.MAV_COLLISION_ACTION_NONE = 0 // Ignore any potential collisions
mavlink10.MAV_COLLISION_ACTION_REPORT = 1 // Report potential collision
mavlink10.MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2 // Ascend or Descend to avoid threat
mavlink10.MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3 // Move horizontally to avoid threat
mavlink10.MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4 // Aircraft to move perpendicular to the collision's velocity vector
mavlink10.MAV_COLLISION_ACTION_RTL = 5 // Aircraft to fly directly back to its launch point
mavlink10.MAV_COLLISION_ACTION_HOVER = 6 // Aircraft to stop in place
mavlink10.MAV_COLLISION_ACTION_ENUM_END = 7 // 

// MAV_COLLISION_THREAT_LEVEL
mavlink10.MAV_COLLISION_THREAT_LEVEL_NONE = 0 // Not a threat
mavlink10.MAV_COLLISION_THREAT_LEVEL_LOW = 1 // Craft is mildly concerned about this threat
mavlink10.MAV_COLLISION_THREAT_LEVEL_HIGH = 2 // Craft is panicking, and may take actions to avoid threat
mavlink10.MAV_COLLISION_THREAT_LEVEL_ENUM_END = 3 // 

// MAV_COLLISION_SRC
mavlink10.MAV_COLLISION_SRC_ADSB = 0 // ID field references ADSB_VEHICLE packets
mavlink10.MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1 // ID field references MAVLink SRC ID
mavlink10.MAV_COLLISION_SRC_ENUM_END = 2 // 

// GPS_FIX_TYPE
mavlink10.GPS_FIX_TYPE_NO_GPS = 0 // No GPS connected
mavlink10.GPS_FIX_TYPE_NO_FIX = 1 // No position information, GPS is connected
mavlink10.GPS_FIX_TYPE_2D_FIX = 2 // 2D position
mavlink10.GPS_FIX_TYPE_3D_FIX = 3 // 3D position
mavlink10.GPS_FIX_TYPE_DGPS = 4 // DGPS/SBAS aided 3D position
mavlink10.GPS_FIX_TYPE_RTK_FLOAT = 5 // RTK float, 3D position
mavlink10.GPS_FIX_TYPE_RTK_FIXED = 6 // RTK Fixed, 3D position
mavlink10.GPS_FIX_TYPE_STATIC = 7 // Static fixed, typically used for base stations
mavlink10.GPS_FIX_TYPE_PPP = 8 // PPP, 3D position.
mavlink10.GPS_FIX_TYPE_ENUM_END = 9 // 

// RTK_BASELINE_COORDINATE_SYSTEM
mavlink10.RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0 // Earth-centered, Earth-fixed
mavlink10.RTK_BASELINE_COORDINATE_SYSTEM_NED = 1 // RTK basestation centered, north, east, down
mavlink10.RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END = 2 // 

// LANDING_TARGET_TYPE
mavlink10.LANDING_TARGET_TYPE_LIGHT_BEACON = 0 // Landing target signaled by light beacon (ex: IR-LOCK)
mavlink10.LANDING_TARGET_TYPE_RADIO_BEACON = 1 // Landing target signaled by radio beacon (ex: ILS, NDB)
mavlink10.LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2 // Landing target represented by a fiducial marker (ex: ARTag)
mavlink10.LANDING_TARGET_TYPE_VISION_OTHER = 3 // Landing target represented by a pre-defined visual shape/feature (ex:
                        // X-marker, H-marker, square)
mavlink10.LANDING_TARGET_TYPE_ENUM_END = 4 // 

// VTOL_TRANSITION_HEADING
mavlink10.VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0 // Respect the heading configuration of the vehicle.
mavlink10.VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1 // Use the heading pointing towards the next waypoint.
mavlink10.VTOL_TRANSITION_HEADING_TAKEOFF = 2 // Use the heading on takeoff (while sitting on the ground).
mavlink10.VTOL_TRANSITION_HEADING_SPECIFIED = 3 // Use the specified heading in parameter 4.
mavlink10.VTOL_TRANSITION_HEADING_ANY = 4 // Use the current heading when reaching takeoff altitude (potentially
                        // facing the wind when weather-vaning is
                        // active).
mavlink10.VTOL_TRANSITION_HEADING_ENUM_END = 5 // 

// CAMERA_CAP_FLAGS
mavlink10.CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 1 // Camera is able to record video
mavlink10.CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 2 // Camera is able to capture images
mavlink10.CAMERA_CAP_FLAGS_HAS_MODES = 4 // Camera has separate Video and Image/Photo modes
                        // (MAV_CMD_SET_CAMERA_MODE)
mavlink10.CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 8 // Camera can capture images while in video mode
mavlink10.CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 16 // Camera can capture videos while in Photo/Image mode
mavlink10.CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 32 // Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
mavlink10.CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 64 // Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
mavlink10.CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 128 // Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
mavlink10.CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 256 // Camera has video streaming capabilities (use
                        // MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
                        // for video streaming info)
mavlink10.CAMERA_CAP_FLAGS_ENUM_END = 257 // 

// CAMERA_MODE
mavlink10.CAMERA_MODE_IMAGE = 0 // Camera is in image/photo capture mode.
mavlink10.CAMERA_MODE_VIDEO = 1 // Camera is in video capture mode.
mavlink10.CAMERA_MODE_IMAGE_SURVEY = 2 // Camera is in image survey capture mode. It allows for camera
                        // controller to do specific settings for
                        // surveys.
mavlink10.CAMERA_MODE_ENUM_END = 3 // 

// MAV_ARM_AUTH_DENIED_REASON
mavlink10.MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0 // Not a specific reason
mavlink10.MAV_ARM_AUTH_DENIED_REASON_NONE = 1 // Authorizer will send the error as string to GCS
mavlink10.MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2 // At least one waypoint have a invalid value
mavlink10.MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3 // Timeout in the authorizer process(in case it depends on network)
mavlink10.MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4 // Airspace of the mission in use by another vehicle, second result
                        // parameter can have the waypoint id that
                        // caused it to be denied.
mavlink10.MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5 // Weather is not good to fly
mavlink10.MAV_ARM_AUTH_DENIED_REASON_ENUM_END = 6 // 

// RC_TYPE
mavlink10.RC_TYPE_SPEKTRUM_DSM2 = 0 // Spektrum DSM2
mavlink10.RC_TYPE_SPEKTRUM_DSMX = 1 // Spektrum DSMX
mavlink10.RC_TYPE_ENUM_END = 2 // 

// POSITION_TARGET_TYPEMASK
mavlink10.POSITION_TARGET_TYPEMASK_X_IGNORE = 1 // Ignore position x
mavlink10.POSITION_TARGET_TYPEMASK_Y_IGNORE = 2 // Ignore position y
mavlink10.POSITION_TARGET_TYPEMASK_Z_IGNORE = 4 // Ignore position z
mavlink10.POSITION_TARGET_TYPEMASK_VX_IGNORE = 8 // Ignore velocity x
mavlink10.POSITION_TARGET_TYPEMASK_VY_IGNORE = 16 // Ignore velocity y
mavlink10.POSITION_TARGET_TYPEMASK_VZ_IGNORE = 32 // Ignore velocity z
mavlink10.POSITION_TARGET_TYPEMASK_AX_IGNORE = 64 // Ignore acceleration x
mavlink10.POSITION_TARGET_TYPEMASK_AY_IGNORE = 128 // Ignore acceleration y
mavlink10.POSITION_TARGET_TYPEMASK_AZ_IGNORE = 256 // Ignore acceleration z
mavlink10.POSITION_TARGET_TYPEMASK_FORCE_SET = 512 // Use force instead of acceleration
mavlink10.POSITION_TARGET_TYPEMASK_YAW_IGNORE = 1024 // Ignore yaw
mavlink10.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 2048 // Ignore yaw rate
mavlink10.POSITION_TARGET_TYPEMASK_ENUM_END = 2049 // 

// PRECISION_LAND_MODE
mavlink10.PRECISION_LAND_MODE_DISABLED = 0 // Normal (non-precision) landing.
mavlink10.PRECISION_LAND_MODE_OPPORTUNISTIC = 1 // Use precision landing if beacon detected when land command accepted,
                        // otherwise land normally.
mavlink10.PRECISION_LAND_MODE_REQUIRED = 2 // Use precision landing, searching for beacon if not found when land
                        // command accepted (land normally if beacon
                        // cannot be found).
mavlink10.PRECISION_LAND_MODE_ENUM_END = 3 // 

// PARACHUTE_ACTION
mavlink10.PARACHUTE_DISABLE = 0 // Disable parachute release.
mavlink10.PARACHUTE_ENABLE = 1 // Enable parachute release.
mavlink10.PARACHUTE_RELEASE = 2 // Release parachute.
mavlink10.PARACHUTE_ACTION_ENUM_END = 3 // 

// AIS_TYPE
mavlink10.AIS_TYPE_UNKNOWN = 0 // Not available (default).
mavlink10.AIS_TYPE_RESERVED_1 = 1 // 
mavlink10.AIS_TYPE_RESERVED_2 = 2 // 
mavlink10.AIS_TYPE_RESERVED_3 = 3 // 
mavlink10.AIS_TYPE_RESERVED_4 = 4 // 
mavlink10.AIS_TYPE_RESERVED_5 = 5 // 
mavlink10.AIS_TYPE_RESERVED_6 = 6 // 
mavlink10.AIS_TYPE_RESERVED_7 = 7 // 
mavlink10.AIS_TYPE_RESERVED_8 = 8 // 
mavlink10.AIS_TYPE_RESERVED_9 = 9 // 
mavlink10.AIS_TYPE_RESERVED_10 = 10 // 
mavlink10.AIS_TYPE_RESERVED_11 = 11 // 
mavlink10.AIS_TYPE_RESERVED_12 = 12 // 
mavlink10.AIS_TYPE_RESERVED_13 = 13 // 
mavlink10.AIS_TYPE_RESERVED_14 = 14 // 
mavlink10.AIS_TYPE_RESERVED_15 = 15 // 
mavlink10.AIS_TYPE_RESERVED_16 = 16 // 
mavlink10.AIS_TYPE_RESERVED_17 = 17 // 
mavlink10.AIS_TYPE_RESERVED_18 = 18 // 
mavlink10.AIS_TYPE_RESERVED_19 = 19 // 
mavlink10.AIS_TYPE_WIG = 20 // Wing In Ground effect.
mavlink10.AIS_TYPE_WIG_HAZARDOUS_A = 21 // 
mavlink10.AIS_TYPE_WIG_HAZARDOUS_B = 22 // 
mavlink10.AIS_TYPE_WIG_HAZARDOUS_C = 23 // 
mavlink10.AIS_TYPE_WIG_HAZARDOUS_D = 24 // 
mavlink10.AIS_TYPE_WIG_RESERVED_1 = 25 // 
mavlink10.AIS_TYPE_WIG_RESERVED_2 = 26 // 
mavlink10.AIS_TYPE_WIG_RESERVED_3 = 27 // 
mavlink10.AIS_TYPE_WIG_RESERVED_4 = 28 // 
mavlink10.AIS_TYPE_WIG_RESERVED_5 = 29 // 
mavlink10.AIS_TYPE_FISHING = 30 // 
mavlink10.AIS_TYPE_TOWING = 31 // 
mavlink10.AIS_TYPE_TOWING_LARGE = 32 // Towing: length exceeds 200m or breadth exceeds 25m.
mavlink10.AIS_TYPE_DREDGING = 33 // Dredging or other underwater ops.
mavlink10.AIS_TYPE_DIVING = 34 // 
mavlink10.AIS_TYPE_MILITARY = 35 // 
mavlink10.AIS_TYPE_SAILING = 36 // 
mavlink10.AIS_TYPE_PLEASURE = 37 // 
mavlink10.AIS_TYPE_RESERVED_20 = 38 // 
mavlink10.AIS_TYPE_RESERVED_21 = 39 // 
mavlink10.AIS_TYPE_HSC = 40 // High Speed Craft.
mavlink10.AIS_TYPE_HSC_HAZARDOUS_A = 41 // 
mavlink10.AIS_TYPE_HSC_HAZARDOUS_B = 42 // 
mavlink10.AIS_TYPE_HSC_HAZARDOUS_C = 43 // 
mavlink10.AIS_TYPE_HSC_HAZARDOUS_D = 44 // 
mavlink10.AIS_TYPE_HSC_RESERVED_1 = 45 // 
mavlink10.AIS_TYPE_HSC_RESERVED_2 = 46 // 
mavlink10.AIS_TYPE_HSC_RESERVED_3 = 47 // 
mavlink10.AIS_TYPE_HSC_RESERVED_4 = 48 // 
mavlink10.AIS_TYPE_HSC_UNKNOWN = 49 // 
mavlink10.AIS_TYPE_PILOT = 50 // 
mavlink10.AIS_TYPE_SAR = 51 // Search And Rescue vessel.
mavlink10.AIS_TYPE_TUG = 52 // 
mavlink10.AIS_TYPE_PORT_TENDER = 53 // 
mavlink10.AIS_TYPE_ANTI_POLLUTION = 54 // Anti-pollution equipment.
mavlink10.AIS_TYPE_LAW_ENFORCEMENT = 55 // 
mavlink10.AIS_TYPE_SPARE_LOCAL_1 = 56 // 
mavlink10.AIS_TYPE_SPARE_LOCAL_2 = 57 // 
mavlink10.AIS_TYPE_MEDICAL_TRANSPORT = 58 // 
mavlink10.AIS_TYPE_NONECOMBATANT = 59 // Noncombatant ship according to RR Resolution No. 18.
mavlink10.AIS_TYPE_PASSENGER = 60 // 
mavlink10.AIS_TYPE_PASSENGER_HAZARDOUS_A = 61 // 
mavlink10.AIS_TYPE_PASSENGER_HAZARDOUS_B = 62 // 
mavlink10.AIS_TYPE_AIS_TYPE_PASSENGER_HAZARDOUS_C = 63 // 
mavlink10.AIS_TYPE_PASSENGER_HAZARDOUS_D = 64 // 
mavlink10.AIS_TYPE_PASSENGER_RESERVED_1 = 65 // 
mavlink10.AIS_TYPE_PASSENGER_RESERVED_2 = 66 // 
mavlink10.AIS_TYPE_PASSENGER_RESERVED_3 = 67 // 
mavlink10.AIS_TYPE_AIS_TYPE_PASSENGER_RESERVED_4 = 68 // 
mavlink10.AIS_TYPE_PASSENGER_UNKNOWN = 69 // 
mavlink10.AIS_TYPE_CARGO = 70 // 
mavlink10.AIS_TYPE_CARGO_HAZARDOUS_A = 71 // 
mavlink10.AIS_TYPE_CARGO_HAZARDOUS_B = 72 // 
mavlink10.AIS_TYPE_CARGO_HAZARDOUS_C = 73 // 
mavlink10.AIS_TYPE_CARGO_HAZARDOUS_D = 74 // 
mavlink10.AIS_TYPE_CARGO_RESERVED_1 = 75 // 
mavlink10.AIS_TYPE_CARGO_RESERVED_2 = 76 // 
mavlink10.AIS_TYPE_CARGO_RESERVED_3 = 77 // 
mavlink10.AIS_TYPE_CARGO_RESERVED_4 = 78 // 
mavlink10.AIS_TYPE_CARGO_UNKNOWN = 79 // 
mavlink10.AIS_TYPE_TANKER = 80 // 
mavlink10.AIS_TYPE_TANKER_HAZARDOUS_A = 81 // 
mavlink10.AIS_TYPE_TANKER_HAZARDOUS_B = 82 // 
mavlink10.AIS_TYPE_TANKER_HAZARDOUS_C = 83 // 
mavlink10.AIS_TYPE_TANKER_HAZARDOUS_D = 84 // 
mavlink10.AIS_TYPE_TANKER_RESERVED_1 = 85 // 
mavlink10.AIS_TYPE_TANKER_RESERVED_2 = 86 // 
mavlink10.AIS_TYPE_TANKER_RESERVED_3 = 87 // 
mavlink10.AIS_TYPE_TANKER_RESERVED_4 = 88 // 
mavlink10.AIS_TYPE_TANKER_UNKNOWN = 89 // 
mavlink10.AIS_TYPE_OTHER = 90 // 
mavlink10.AIS_TYPE_OTHER_HAZARDOUS_A = 91 // 
mavlink10.AIS_TYPE_OTHER_HAZARDOUS_B = 92 // 
mavlink10.AIS_TYPE_OTHER_HAZARDOUS_C = 93 // 
mavlink10.AIS_TYPE_OTHER_HAZARDOUS_D = 94 // 
mavlink10.AIS_TYPE_OTHER_RESERVED_1 = 95 // 
mavlink10.AIS_TYPE_OTHER_RESERVED_2 = 96 // 
mavlink10.AIS_TYPE_OTHER_RESERVED_3 = 97 // 
mavlink10.AIS_TYPE_OTHER_RESERVED_4 = 98 // 
mavlink10.AIS_TYPE_OTHER_UNKNOWN = 99 // 
mavlink10.AIS_TYPE_ENUM_END = 100 // 

// AIS_NAV_STATUS
mavlink10.UNDER_WAY = 0 // Under way using engine.
mavlink10.AIS_NAV_ANCHORED = 1 // 
mavlink10.AIS_NAV_UN_COMMANDED = 2 // 
mavlink10.AIS_NAV_RESTRICTED_MANOEUVERABILITY = 3 // 
mavlink10.AIS_NAV_DRAUGHT_CONSTRAINED = 4 // 
mavlink10.AIS_NAV_MOORED = 5 // 
mavlink10.AIS_NAV_AGROUND = 6 // 
mavlink10.AIS_NAV_FISHING = 7 // 
mavlink10.AIS_NAV_SAILING = 8 // 
mavlink10.AIS_NAV_RESERVED_HSC = 9 // 
mavlink10.AIS_NAV_RESERVED_WIG = 10 // 
mavlink10.AIS_NAV_RESERVED_1 = 11 // 
mavlink10.AIS_NAV_RESERVED_2 = 12 // 
mavlink10.AIS_NAV_RESERVED_3 = 13 // 
mavlink10.AIS_NAV_AIS_SART = 14 // Search And Rescue Transponder.
mavlink10.AIS_NAV_UNKNOWN = 15 // Not available (default).
mavlink10.AIS_NAV_STATUS_ENUM_END = 16 // 

// AIS_FLAGS
mavlink10.AIS_FLAGS_POSITION_ACCURACY = 1 // 1 = Position accuracy less than 10m, 0 = position accuracy greater
                        // than 10m.
mavlink10.AIS_FLAGS_VALID_COG = 2 // 
mavlink10.AIS_FLAGS_VALID_VELOCITY = 4 // 
mavlink10.AIS_FLAGS_HIGH_VELOCITY = 8 // 1 = Velocity over 52.5765m/s (102.2 knots)
mavlink10.AIS_FLAGS_VALID_TURN_RATE = 16 // 
mavlink10.AIS_FLAGS_TURN_RATE_SIGN_ONLY = 32 // Only the sign of the returned turn rate value is valid, either greater
                        // than 5deg/30s or less than -5deg/30s
mavlink10.AIS_FLAGS_VALID_DIMENSIONS = 64 // 
mavlink10.AIS_FLAGS_LARGE_BOW_DIMENSION = 128 // Distance to bow is larger than 511m
mavlink10.AIS_FLAGS_LARGE_STERN_DIMENSION = 256 // Distance to stern is larger than 511m
mavlink10.AIS_FLAGS_LARGE_PORT_DIMENSION = 512 // Distance to port side is larger than 63m
mavlink10.AIS_FLAGS_LARGE_STARBOARD_DIMENSION = 1024 // Distance to starboard side is larger than 63m
mavlink10.AIS_FLAGS_VALID_CALLSIGN = 2048 // 
mavlink10.AIS_FLAGS_VALID_NAME = 4096 // 
mavlink10.AIS_FLAGS_ENUM_END = 4097 // 

// MAV_WINCH_STATUS_FLAG
mavlink10.MAV_WINCH_STATUS_HEALTHY = 1 // Winch is healthy
mavlink10.MAV_WINCH_STATUS_FULLY_RETRACTED = 2 // Winch thread is fully retracted
mavlink10.MAV_WINCH_STATUS_MOVING = 4 // Winch motor is moving
mavlink10.MAV_WINCH_STATUS_CLUTCH_ENGAGED = 8 // Winch clutch is engaged allowing motor to move freely
mavlink10.MAV_WINCH_STATUS_FLAG_ENUM_END = 9 // 

// MAG_CAL_STATUS
mavlink10.MAG_CAL_NOT_STARTED = 0 // 
mavlink10.MAG_CAL_WAITING_TO_START = 1 // 
mavlink10.MAG_CAL_RUNNING_STEP_ONE = 2 // 
mavlink10.MAG_CAL_RUNNING_STEP_TWO = 3 // 
mavlink10.MAG_CAL_SUCCESS = 4 // 
mavlink10.MAG_CAL_FAILED = 5 // 
mavlink10.MAG_CAL_BAD_ORIENTATION = 6 // 
mavlink10.MAG_CAL_BAD_RADIUS = 7 // 
mavlink10.MAG_CAL_STATUS_ENUM_END = 8 // 

// message IDs
mavlink10.MAVLINK_MSG_ID_BAD_DATA = -1
mavlink10.MAVLINK_MSG_ID_HEARTBEAT = 0
mavlink10.MAVLINK_MSG_ID_SYS_STATUS = 1
mavlink10.MAVLINK_MSG_ID_SYSTEM_TIME = 2
mavlink10.MAVLINK_MSG_ID_PING = 4
mavlink10.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL = 5
mavlink10.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6
mavlink10.MAVLINK_MSG_ID_AUTH_KEY = 7
mavlink10.MAVLINK_MSG_ID_SET_MODE = 11
mavlink10.MAVLINK_MSG_ID_PARAM_REQUEST_READ = 20
mavlink10.MAVLINK_MSG_ID_PARAM_REQUEST_LIST = 21
mavlink10.MAVLINK_MSG_ID_PARAM_VALUE = 22
mavlink10.MAVLINK_MSG_ID_PARAM_SET = 23
mavlink10.MAVLINK_MSG_ID_GPS_RAW_INT = 24
mavlink10.MAVLINK_MSG_ID_GPS_STATUS = 25
mavlink10.MAVLINK_MSG_ID_SCALED_IMU = 26
mavlink10.MAVLINK_MSG_ID_RAW_IMU = 27
mavlink10.MAVLINK_MSG_ID_RAW_PRESSURE = 28
mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE = 29
mavlink10.MAVLINK_MSG_ID_ATTITUDE = 30
mavlink10.MAVLINK_MSG_ID_ATTITUDE_QUATERNION = 31
mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED = 32
mavlink10.MAVLINK_MSG_ID_GLOBAL_POSITION_INT = 33
mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_SCALED = 34
mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_RAW = 35
mavlink10.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW = 36
mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST = 37
mavlink10.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST = 38
mavlink10.MAVLINK_MSG_ID_MISSION_ITEM = 39
mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST = 40
mavlink10.MAVLINK_MSG_ID_MISSION_SET_CURRENT = 41
mavlink10.MAVLINK_MSG_ID_MISSION_CURRENT = 42
mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_LIST = 43
mavlink10.MAVLINK_MSG_ID_MISSION_COUNT = 44
mavlink10.MAVLINK_MSG_ID_MISSION_CLEAR_ALL = 45
mavlink10.MAVLINK_MSG_ID_MISSION_ITEM_REACHED = 46
mavlink10.MAVLINK_MSG_ID_MISSION_ACK = 47
mavlink10.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN = 48
mavlink10.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN = 49
mavlink10.MAVLINK_MSG_ID_PARAM_MAP_RC = 50
mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_INT = 51
mavlink10.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA = 54
mavlink10.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA = 55
mavlink10.MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV = 61
mavlink10.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62
mavlink10.MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV = 63
mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV = 64
mavlink10.MAVLINK_MSG_ID_RC_CHANNELS = 65
mavlink10.MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66
mavlink10.MAVLINK_MSG_ID_DATA_STREAM = 67
mavlink10.MAVLINK_MSG_ID_MANUAL_CONTROL = 69
mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE = 70
mavlink10.MAVLINK_MSG_ID_MISSION_ITEM_INT = 73
mavlink10.MAVLINK_MSG_ID_VFR_HUD = 74
mavlink10.MAVLINK_MSG_ID_COMMAND_INT = 75
mavlink10.MAVLINK_MSG_ID_COMMAND_LONG = 76
mavlink10.MAVLINK_MSG_ID_COMMAND_ACK = 77
mavlink10.MAVLINK_MSG_ID_MANUAL_SETPOINT = 81
mavlink10.MAVLINK_MSG_ID_SET_ATTITUDE_TARGET = 82
mavlink10.MAVLINK_MSG_ID_ATTITUDE_TARGET = 83
mavlink10.MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED = 84
mavlink10.MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED = 85
mavlink10.MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT = 86
mavlink10.MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT = 87
mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89
mavlink10.MAVLINK_MSG_ID_HIL_STATE = 90
mavlink10.MAVLINK_MSG_ID_HIL_CONTROLS = 91
mavlink10.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW = 92
mavlink10.MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS = 93
mavlink10.MAVLINK_MSG_ID_OPTICAL_FLOW = 100
mavlink10.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE = 101
mavlink10.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE = 102
mavlink10.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE = 103
mavlink10.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE = 104
mavlink10.MAVLINK_MSG_ID_HIGHRES_IMU = 105
mavlink10.MAVLINK_MSG_ID_OPTICAL_FLOW_RAD = 106
mavlink10.MAVLINK_MSG_ID_HIL_SENSOR = 107
mavlink10.MAVLINK_MSG_ID_SIM_STATE = 108
mavlink10.MAVLINK_MSG_ID_RADIO_STATUS = 109
mavlink10.MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL = 110
mavlink10.MAVLINK_MSG_ID_TIMESYNC = 111
mavlink10.MAVLINK_MSG_ID_CAMERA_TRIGGER = 112
mavlink10.MAVLINK_MSG_ID_HIL_GPS = 113
mavlink10.MAVLINK_MSG_ID_HIL_OPTICAL_FLOW = 114
mavlink10.MAVLINK_MSG_ID_HIL_STATE_QUATERNION = 115
mavlink10.MAVLINK_MSG_ID_SCALED_IMU2 = 116
mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_LIST = 117
mavlink10.MAVLINK_MSG_ID_LOG_ENTRY = 118
mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_DATA = 119
mavlink10.MAVLINK_MSG_ID_LOG_DATA = 120
mavlink10.MAVLINK_MSG_ID_LOG_ERASE = 121
mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_END = 122
mavlink10.MAVLINK_MSG_ID_GPS_INJECT_DATA = 123
mavlink10.MAVLINK_MSG_ID_GPS2_RAW = 124
mavlink10.MAVLINK_MSG_ID_POWER_STATUS = 125
mavlink10.MAVLINK_MSG_ID_SERIAL_CONTROL = 126
mavlink10.MAVLINK_MSG_ID_GPS_RTK = 127
mavlink10.MAVLINK_MSG_ID_GPS2_RTK = 128
mavlink10.MAVLINK_MSG_ID_SCALED_IMU3 = 129
mavlink10.MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE = 130
mavlink10.MAVLINK_MSG_ID_ENCAPSULATED_DATA = 131
mavlink10.MAVLINK_MSG_ID_DISTANCE_SENSOR = 132
mavlink10.MAVLINK_MSG_ID_TERRAIN_REQUEST = 133
mavlink10.MAVLINK_MSG_ID_TERRAIN_DATA = 134
mavlink10.MAVLINK_MSG_ID_TERRAIN_CHECK = 135
mavlink10.MAVLINK_MSG_ID_TERRAIN_REPORT = 136
mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE2 = 137
mavlink10.MAVLINK_MSG_ID_ATT_POS_MOCAP = 138
mavlink10.MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET = 139
mavlink10.MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET = 140
mavlink10.MAVLINK_MSG_ID_ALTITUDE = 141
mavlink10.MAVLINK_MSG_ID_RESOURCE_REQUEST = 142
mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE3 = 143
mavlink10.MAVLINK_MSG_ID_FOLLOW_TARGET = 144
mavlink10.MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE = 146
mavlink10.MAVLINK_MSG_ID_BATTERY_STATUS = 147
mavlink10.MAVLINK_MSG_ID_AUTOPILOT_VERSION = 148
mavlink10.MAVLINK_MSG_ID_LANDING_TARGET = 149
mavlink10.MAVLINK_MSG_ID_FENCE_STATUS = 162
mavlink10.MAVLINK_MSG_ID_MAG_CAL_REPORT = 192
mavlink10.MAVLINK_MSG_ID_EFI_STATUS = 225
mavlink10.MAVLINK_MSG_ID_ESTIMATOR_STATUS = 230
mavlink10.MAVLINK_MSG_ID_WIND_COV = 231
mavlink10.MAVLINK_MSG_ID_GPS_INPUT = 232
mavlink10.MAVLINK_MSG_ID_GPS_RTCM_DATA = 233
mavlink10.MAVLINK_MSG_ID_HIGH_LATENCY = 234
mavlink10.MAVLINK_MSG_ID_HIGH_LATENCY2 = 235
mavlink10.MAVLINK_MSG_ID_VIBRATION = 241
mavlink10.MAVLINK_MSG_ID_HOME_POSITION = 242
mavlink10.MAVLINK_MSG_ID_SET_HOME_POSITION = 243
mavlink10.MAVLINK_MSG_ID_MESSAGE_INTERVAL = 244
mavlink10.MAVLINK_MSG_ID_EXTENDED_SYS_STATE = 245
mavlink10.MAVLINK_MSG_ID_ADSB_VEHICLE = 246
mavlink10.MAVLINK_MSG_ID_COLLISION = 247
mavlink10.MAVLINK_MSG_ID_V2_EXTENSION = 248
mavlink10.MAVLINK_MSG_ID_MEMORY_VECT = 249
mavlink10.MAVLINK_MSG_ID_DEBUG_VECT = 250
mavlink10.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT = 251
mavlink10.MAVLINK_MSG_ID_NAMED_VALUE_INT = 252
mavlink10.MAVLINK_MSG_ID_STATUSTEXT = 253
mavlink10.MAVLINK_MSG_ID_DEBUG = 254
mavlink10.messages = {};


/* 
The heartbeat message shows that a system or component is present and
responding. The type and autopilot fields (along with the message
component id), allow the receiving system to treat further messages
from this system appropriately (e.g. by laying out the user interface
based on the autopilot). This microservice is documented at
https://mavlink.io/en/services/heartbeat.html

                type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (uint8_t)
                autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (uint8_t)
                base_mode                 : System mode bitmap. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags (uint32_t)
                system_status             : System status flag. (uint8_t)
                mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (uint8_t)

*/
    mavlink10.messages.heartbeat = function(type, autopilot, base_mode, custom_mode, system_status, mavlink_version) {

    this._format = '<IBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_HEARTBEAT;
    this.order_map = [1, 2, 3, 0, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 50;
    this._name = 'HEARTBEAT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'autopilot', 'base_mode', 'custom_mode', 'system_status', 'mavlink_version'];


    this.set(arguments,true);

}

mavlink10.messages.heartbeat.prototype = new mavlink10.message;
mavlink10.messages.heartbeat.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.type, this.autopilot, this.base_mode, this.system_status, this.mavlink_version];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The general system state. If the system is following the MAVLink
standard, the system state is mainly defined by three orthogonal
states/modes: The system mode, which is either LOCKED (motors shut
down and locked), MANUAL (system under RC control), GUIDED (system
with autonomous position control, position setpoint controlled
manually) or AUTO (system guided by path/waypoint planner). The
NAV_MODE defined the current flight state: LIFTOFF (often an open-loop
maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal
navigation state machine. The system status shows whether the system
is currently active or not and if an emergency occurred. During the
CRITICAL and EMERGENCY states the MAV is still considered to be
active, but should start emergency procedures autonomously. After a
failure occurred it should first move from active to critical to allow
manual intervention and then move to emergency after a certain
timeout.

                onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (uint32_t)
                onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (uint32_t)
                onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (uint32_t)
                load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 (uint16_t)
                voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot (uint16_t)
                current_battery           : Battery current, -1: Current not sent by autopilot (int16_t)
                battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot (int8_t)
                drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_count1             : Autopilot-specific errors (uint16_t)
                errors_count2             : Autopilot-specific errors (uint16_t)
                errors_count3             : Autopilot-specific errors (uint16_t)
                errors_count4             : Autopilot-specific errors (uint16_t)

*/
    mavlink10.messages.sys_status = function(onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4) {

    this._format = '<IIIHHhHHHHHHb';
    this._id = mavlink10.MAVLINK_MSG_ID_SYS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'SYS_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['onboard_control_sensors_present', 'onboard_control_sensors_enabled', 'onboard_control_sensors_health', 'load', 'voltage_battery', 'current_battery', 'battery_remaining', 'drop_rate_comm', 'errors_comm', 'errors_count1', 'errors_count2', 'errors_count3', 'errors_count4'];


    this.set(arguments,true);

}

mavlink10.messages.sys_status.prototype = new mavlink10.message;
mavlink10.messages.sys_status.prototype.pack = function(mav) {
    var orderedfields = [ this.onboard_control_sensors_present, this.onboard_control_sensors_enabled, this.onboard_control_sensors_health, this.load, this.voltage_battery, this.current_battery, this.drop_rate_comm, this.errors_comm, this.errors_count1, this.errors_count2, this.errors_count3, this.errors_count4, this.battery_remaining];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The system time is the time of the master clock, typically the
computer clock of the main onboard computer.

                time_unix_usec            : Timestamp (UNIX epoch time). (uint64_t)
                time_boot_ms              : Timestamp (time since system boot). (uint32_t)

*/
    mavlink10.messages.system_time = function(time_unix_usec, time_boot_ms) {

    this._format = '<QI';
    this._id = mavlink10.MAVLINK_MSG_ID_SYSTEM_TIME;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 137;
    this._name = 'SYSTEM_TIME';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_unix_usec', 'time_boot_ms'];


    this.set(arguments,true);

}

mavlink10.messages.system_time.prototype = new mavlink10.message;
mavlink10.messages.system_time.prototype.pack = function(mav) {
    var orderedfields = [ this.time_unix_usec, this.time_boot_ms];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A ping message either requesting or responding to a ping. This allows
to measure the system latencies, including serial port, radio modem
and UDP connections. The ping microservice is documented at
https://mavlink.io/en/services/ping.html

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                seq                       : PING sequence (uint32_t)
                target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (uint8_t)

*/
    mavlink10.messages.ping = function(time_usec, seq, target_system, target_component) {

    this._format = '<QIBB';
    this._id = mavlink10.MAVLINK_MSG_ID_PING;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'PING';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'seq', 'target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.ping.prototype = new mavlink10.message;
mavlink10.messages.ping.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to control this MAV

                target_system             : System the GCS requests control for (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. (uint8_t)
                passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (char)

*/
    mavlink10.messages.change_operator_control = function(target_system, control_request, version, passkey) {

    this._format = '<BBB25s';
    this._id = mavlink10.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 25];
    this.crc_extra = 217;
    this._name = 'CHANGE_OPERATOR_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'control_request', 'version', 'passkey'];


    this.set(arguments,true);

}

mavlink10.messages.change_operator_control.prototype = new mavlink10.message;
mavlink10.messages.change_operator_control.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.control_request, this.version, this.passkey];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Accept / deny control of this MAV

                gcs_system_id             : ID of the GCS this message (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (uint8_t)

*/
    mavlink10.messages.change_operator_control_ack = function(gcs_system_id, control_request, ack) {

    this._format = '<BBB';
    this._id = mavlink10.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 104;
    this._name = 'CHANGE_OPERATOR_CONTROL_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['gcs_system_id', 'control_request', 'ack'];


    this.set(arguments,true);

}

mavlink10.messages.change_operator_control_ack.prototype = new mavlink10.message;
mavlink10.messages.change_operator_control_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.gcs_system_id, this.control_request, this.ack];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Emit an encrypted signature / key identifying this system. PLEASE
NOTE: This protocol has been kept simple, so transmitting the key
requires an encrypted channel for true safety.

                key                       : key (char)

*/
    mavlink10.messages.auth_key = function(key) {

    this._format = '<32s';
    this._id = mavlink10.MAVLINK_MSG_ID_AUTH_KEY;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [32];
    this.crc_extra = 119;
    this._name = 'AUTH_KEY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['key'];


    this.set(arguments,true);

}

mavlink10.messages.auth_key.prototype = new mavlink10.message;
mavlink10.messages.auth_key.prototype.pack = function(mav) {
    var orderedfields = [ this.key];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the system mode, as defined by enum MAV_MODE. There is no target
component id as the mode is by definition for the overall aircraft,
not only for one component.

                target_system             : The system setting the mode (uint8_t)
                base_mode                 : The new base mode. (uint8_t)
                custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (uint32_t)

*/
    mavlink10.messages.set_mode = function(target_system, base_mode, custom_mode) {

    this._format = '<IBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_MODE;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 89;
    this._name = 'SET_MODE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'base_mode', 'custom_mode'];


    this.set(arguments,true);

}

mavlink10.messages.set_mode.prototype = new mavlink10.message;
mavlink10.messages.set_mode.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.target_system, this.base_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to read the onboard parameter with the param_id string id.
Onboard parameters are stored as key[const char*] -> value[float].
This allows to send a parameter to any other component (such as the
GCS) without the need of previous knowledge of possible parameter
names. Thus the same GCS can store different parameters for different
autopilots. See also https://mavlink.io/en/services/parameter.html for
a full documentation of QGroundControl and IMU code.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (int16_t)

*/
    mavlink10.messages.param_request_read = function(target_system, target_component, param_id, param_index) {

    this._format = '<hBB16s';
    this._id = mavlink10.MAVLINK_MSG_ID_PARAM_REQUEST_READ;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16];
    this.crc_extra = 214;
    this._name = 'PARAM_REQUEST_READ';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index'];


    this.set(arguments,true);

}

mavlink10.messages.param_request_read.prototype = new mavlink10.message;
mavlink10.messages.param_request_read.prototype.pack = function(mav) {
    var orderedfields = [ this.param_index, this.target_system, this.target_component, this.param_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request all parameters of this component. After this request, all
parameters are emitted. The parameter microservice is documented at
https://mavlink.io/en/services/parameter.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink10.messages.param_request_list = function(target_system, target_component) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_PARAM_REQUEST_LIST;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 159;
    this._name = 'PARAM_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.param_request_list.prototype = new mavlink10.message;
mavlink10.messages.param_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Emit the value of a onboard parameter. The inclusion of param_count
and param_index in the message allows the recipient to keep track of
received parameters and allows him to re-request missing parameters
after a loss or timeout. The parameter microservice is documented at
https://mavlink.io/en/services/parameter.html

                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type. (uint8_t)
                param_count               : Total number of onboard parameters (uint16_t)
                param_index               : Index of this onboard parameter (uint16_t)

*/
    mavlink10.messages.param_value = function(param_id, param_value, param_type, param_count, param_index) {

    this._format = '<fHH16sB';
    this._id = mavlink10.MAVLINK_MSG_ID_PARAM_VALUE;
    this.order_map = [3, 0, 4, 1, 2];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 220;
    this._name = 'PARAM_VALUE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['param_id', 'param_value', 'param_type', 'param_count', 'param_index'];


    this.set(arguments,true);

}

mavlink10.messages.param_value.prototype = new mavlink10.message;
mavlink10.messages.param_value.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value, this.param_count, this.param_index, this.param_id, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set a parameter value (write new value to permanent storage).
IMPORTANT: The receiving component should acknowledge the new
parameter value by sending a PARAM_VALUE message to all communication
partners. This will also ensure that multiple GCS all have an up-to-
date list of all parameters. If the sending GCS did not receive a
PARAM_VALUE message within its timeout time, it should re-send the
PARAM_SET message. The parameter microservice is documented at
https://mavlink.io/en/services/parameter.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type. (uint8_t)

*/
    mavlink10.messages.param_set = function(target_system, target_component, param_id, param_value, param_type) {

    this._format = '<fBB16sB';
    this._id = mavlink10.MAVLINK_MSG_ID_PARAM_SET;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 168;
    this._name = 'PARAM_SET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_value', 'param_type'];


    this.set(arguments,true);

}

mavlink10.messages.param_set.prototype = new mavlink10.message;
mavlink10.messages.param_set.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value, this.target_system, this.target_component, this.param_id, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The global position, as returned by the Global Positioning System
(GPS). This is                 NOT the global position estimate of the
system, but rather a RAW sensor value. See message GLOBAL_POSITION for
the global position estimate.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : GPS fix type. (uint8_t)
                lat                       : Latitude (WGS84, EGM96 ellipsoid) (int32_t)
                lon                       : Longitude (WGS84, EGM96 ellipsoid) (int32_t)
                alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: UINT16_MAX (uint16_t)
                cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)

*/
    mavlink10.messages.gps_raw_int = function(time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible) {

    this._format = '<QiiiHHHHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_RAW_INT;
    this.order_map = [0, 8, 1, 2, 3, 4, 5, 6, 7, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 24;
    this._name = 'GPS_RAW_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'cog', 'satellites_visible'];


    this.set(arguments,true);

}

mavlink10.messages.gps_raw_int.prototype = new mavlink10.message;
mavlink10.messages.gps_raw_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.eph, this.epv, this.vel, this.cog, this.fix_type, this.satellites_visible];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The positioning status, as reported by GPS. This message is intended
to display status information about each satellite visible to the
receiver. See message GLOBAL_POSITION for the global position
estimate. This message can contain information for up to 20
satellites.

                satellites_visible        : Number of satellites visible (uint8_t)
                satellite_prn             : Global satellite ID (uint8_t)
                satellite_used            : 0: Satellite not used, 1: used for localization (uint8_t)
                satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite (uint8_t)
                satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. (uint8_t)
                satellite_snr             : Signal to noise ratio of satellite (uint8_t)

*/
    mavlink10.messages.gps_status = function(satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr) {

    this._format = '<B20s20s20s20s20s';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 20, 20, 20, 20, 20];
    this.array_len_map = [0, 20, 20, 20, 20, 20];
    this.crc_extra = 23;
    this._name = 'GPS_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['satellites_visible', 'satellite_prn', 'satellite_used', 'satellite_elevation', 'satellite_azimuth', 'satellite_snr'];


    this.set(arguments,true);

}

mavlink10.messages.gps_status.prototype = new mavlink10.message;
mavlink10.messages.gps_status.prototype.pack = function(mav) {
    var orderedfields = [ this.satellites_visible, this.satellite_prn, this.satellite_used, this.satellite_elevation, this.satellite_azimuth, this.satellite_snr];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for the usual 9DOF sensor setup. This message
should contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)

*/
    mavlink10.messages.scaled_imu = function(time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this._format = '<Ihhhhhhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 170;
    this._name = 'SCALED_IMU';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_imu.prototype = new mavlink10.message;
mavlink10.messages.scaled_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for a 9DOF sensor, which is identified by the id
(default IMU1). This message should always contain the true raw values
without any scaling to allow data capture and system debugging.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (raw) (int16_t)
                yacc                      : Y acceleration (raw) (int16_t)
                zacc                      : Z acceleration (raw) (int16_t)
                xgyro                     : Angular speed around X axis (raw) (int16_t)
                ygyro                     : Angular speed around Y axis (raw) (int16_t)
                zgyro                     : Angular speed around Z axis (raw) (int16_t)
                xmag                      : X Magnetic field (raw) (int16_t)
                ymag                      : Y Magnetic field (raw) (int16_t)
                zmag                      : Z Magnetic field (raw) (int16_t)

*/
    mavlink10.messages.raw_imu = function(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this._format = '<Qhhhhhhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_RAW_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 144;
    this._name = 'RAW_IMU';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments,true);

}

mavlink10.messages.raw_imu.prototype = new mavlink10.message;
mavlink10.messages.raw_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW pressure readings for the typical setup of one absolute
pressure and one differential pressure sensor. The sensor values
should be the raw, UNSCALED ADC values.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                press_abs                 : Absolute pressure (raw) (int16_t)
                press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (int16_t)
                press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (int16_t)
                temperature               : Raw Temperature measurement (raw) (int16_t)

*/
    mavlink10.messages.raw_pressure = function(time_usec, press_abs, press_diff1, press_diff2, temperature) {

    this._format = '<Qhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_RAW_PRESSURE;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 67;
    this._name = 'RAW_PRESSURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'press_abs', 'press_diff1', 'press_diff2', 'temperature'];


    this.set(arguments,true);

}

mavlink10.messages.raw_pressure.prototype = new mavlink10.message;
mavlink10.messages.raw_pressure.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.press_abs, this.press_diff1, this.press_diff2, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The pressure readings for the typical setup of one absolute and
differential pressure sensor. The units are as specified in each
field.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure 1 (float)
                temperature               : Absolute pressure temperature (int16_t)

*/
    mavlink10.messages.scaled_pressure = function(time_boot_ms, press_abs, press_diff, temperature) {

    this._format = '<Iffh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 115;
    this._name = 'SCALED_PRESSURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_pressure.prototype = new mavlink10.message;
mavlink10.messages.scaled_pressure.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                roll                      : Roll angle (-pi..+pi) (float)
                pitch                     : Pitch angle (-pi..+pi) (float)
                yaw                       : Yaw angle (-pi..+pi) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)

*/
    mavlink10.messages.attitude = function(time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed) {

    this._format = '<Iffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_ATTITUDE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 39;
    this._name = 'ATTITUDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed'];


    this.set(arguments,true);

}

mavlink10.messages.attitude.prototype = new mavlink10.message;
mavlink10.messages.attitude.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right), expressed as quaternion. Quaternion order is w, x, y, z and
a zero rotation would be expressed as (1 0 0 0).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                q1                        : Quaternion component 1, w (1 in null-rotation) (float)
                q2                        : Quaternion component 2, x (0 in null-rotation) (float)
                q3                        : Quaternion component 3, y (0 in null-rotation) (float)
                q4                        : Quaternion component 4, z (0 in null-rotation) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)

*/
    mavlink10.messages.attitude_quaternion = function(time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed) {

    this._format = '<Ifffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 246;
    this._name = 'ATTITUDE_QUATERNION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'q1', 'q2', 'q3', 'q4', 'rollspeed', 'pitchspeed', 'yawspeed'];


    this.set(arguments,true);

}

mavlink10.messages.attitude_quaternion.prototype = new mavlink10.message;
mavlink10.messages.attitude_quaternion.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q1, this.q2, this.q3, this.q4, this.rollspeed, this.pitchspeed, this.yawspeed];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered local position (e.g. fused computer vision and
accelerometers). Coordinate frame is right-handed, Z-axis down
(aeronautical frame, NED / north-east-down convention)

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)

*/
    mavlink10.messages.local_position_ned = function(time_boot_ms, x, y, z, vx, vy, vz) {

    this._format = '<Iffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 185;
    this._name = 'LOCAL_POSITION_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz'];


    this.set(arguments,true);

}

mavlink10.messages.local_position_ned.prototype = new mavlink10.message;
mavlink10.messages.local_position_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered global position (e.g. fused GPS and accelerometers). The
position is in GPS-frame (right-handed, Z-up). It                is
designed as scaled integer message since the resolution of float is
not sufficient.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                lat                       : Latitude, expressed (int32_t)
                lon                       : Longitude, expressed (int32_t)
                alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                vx                        : Ground X Speed (Latitude, positive north) (int16_t)
                vy                        : Ground Y Speed (Longitude, positive east) (int16_t)
                vz                        : Ground Z Speed (Altitude, positive down) (int16_t)
                hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)

*/
    mavlink10.messages.global_position_int = function(time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg) {

    this._format = '<IiiiihhhH';
    this._id = mavlink10.MAVLINK_MSG_ID_GLOBAL_POSITION_INT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 104;
    this._name = 'GLOBAL_POSITION_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'hdg'];


    this.set(arguments,true);

}

mavlink10.messages.global_position_int.prototype = new mavlink10.message;
mavlink10.messages.global_position_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat, this.lon, this.alt, this.relative_alt, this.vx, this.vy, this.vz, this.hdg];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
(100%) 10000. Channels that are inactive should be set to UINT16_MAX.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                chan1_scaled              : RC channel 1 value scaled. (int16_t)
                chan2_scaled              : RC channel 2 value scaled. (int16_t)
                chan3_scaled              : RC channel 3 value scaled. (int16_t)
                chan4_scaled              : RC channel 4 value scaled. (int16_t)
                chan5_scaled              : RC channel 5 value scaled. (int16_t)
                chan6_scaled              : RC channel 6 value scaled. (int16_t)
                chan7_scaled              : RC channel 7 value scaled. (int16_t)
                chan8_scaled              : RC channel 8 value scaled. (int16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink10.messages.rc_channels_scaled = function(time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi) {

    this._format = '<IhhhhhhhhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_SCALED;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'RC_CHANNELS_SCALED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_scaled', 'chan2_scaled', 'chan3_scaled', 'chan4_scaled', 'chan5_scaled', 'chan6_scaled', 'chan7_scaled', 'chan8_scaled', 'rssi'];


    this.set(arguments,true);

}

mavlink10.messages.rc_channels_scaled.prototype = new mavlink10.message;
mavlink10.messages.rc_channels_scaled.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_scaled, this.chan2_scaled, this.chan3_scaled, this.chan4_scaled, this.chan5_scaled, this.chan6_scaled, this.chan7_scaled, this.chan8_scaled, this.port, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW values of the RC channels received. The standard PPM
modulation is as follows: 1000 microseconds: 0%, 2000 microseconds:
100%. A value of UINT16_MAX implies the channel is unused. Individual
receivers/transmitters might violate this specification.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                chan1_raw                 : RC channel 1 value. (uint16_t)
                chan2_raw                 : RC channel 2 value. (uint16_t)
                chan3_raw                 : RC channel 3 value. (uint16_t)
                chan4_raw                 : RC channel 4 value. (uint16_t)
                chan5_raw                 : RC channel 5 value. (uint16_t)
                chan6_raw                 : RC channel 6 value. (uint16_t)
                chan7_raw                 : RC channel 7 value. (uint16_t)
                chan8_raw                 : RC channel 8 value. (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink10.messages.rc_channels_raw = function(time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi) {

    this._format = '<IHHHHHHHHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 244;
    this._name = 'RC_CHANNELS_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'rssi'];


    this.set(arguments,true);

}

mavlink10.messages.rc_channels_raw.prototype = new mavlink10.message;
mavlink10.messages.rc_channels_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.port, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
outputs (for RC input from the remote, use the RC_CHANNELS messages).
The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000
microseconds: 100%.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                servo1_raw                : Servo output 1 value (uint16_t)
                servo2_raw                : Servo output 2 value (uint16_t)
                servo3_raw                : Servo output 3 value (uint16_t)
                servo4_raw                : Servo output 4 value (uint16_t)
                servo5_raw                : Servo output 5 value (uint16_t)
                servo6_raw                : Servo output 6 value (uint16_t)
                servo7_raw                : Servo output 7 value (uint16_t)
                servo8_raw                : Servo output 8 value (uint16_t)

*/
    mavlink10.messages.servo_output_raw = function(time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw) {

    this._format = '<IHHHHHHHHB';
    this._id = mavlink10.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 222;
    this._name = 'SERVO_OUTPUT_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'port', 'servo1_raw', 'servo2_raw', 'servo3_raw', 'servo4_raw', 'servo5_raw', 'servo6_raw', 'servo7_raw', 'servo8_raw'];


    this.set(arguments,true);

}

mavlink10.messages.servo_output_raw.prototype = new mavlink10.message;
mavlink10.messages.servo_output_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.servo1_raw, this.servo2_raw, this.servo3_raw, this.servo4_raw, this.servo5_raw, this.servo6_raw, this.servo7_raw, this.servo8_raw, this.port];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a partial list of mission items from the system/component.
https://mavlink.io/en/services/mission.html. If start and end index
are the same, just send one waypoint.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index (int16_t)
                end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (int16_t)

*/
    mavlink10.messages.mission_request_partial_list = function(target_system, target_component, start_index, end_index) {

    this._format = '<hhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 212;
    this._name = 'MISSION_REQUEST_PARTIAL_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index'];


    this.set(arguments,true);

}

mavlink10.messages.mission_request_partial_list.prototype = new mavlink10.message;
mavlink10.messages.mission_request_partial_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start_index, this.end_index, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message is sent to the MAV to write a partial list. If start
index == end index, only one item will be transmitted / updated. If
the start index is NOT 0 and above the current list size, this request
should be REJECTED!

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (int16_t)
                end_index                 : End index, equal or greater than start index. (int16_t)

*/
    mavlink10.messages.mission_write_partial_list = function(target_system, target_component, start_index, end_index) {

    this._format = '<hhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 9;
    this._name = 'MISSION_WRITE_PARTIAL_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index'];


    this.set(arguments,true);

}

mavlink10.messages.mission_write_partial_list.prototype = new mavlink10.message;
mavlink10.messages.mission_write_partial_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start_index, this.end_index, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a mission item. This message is emitted to announce
the presence of a mission item and to set a mission item on the
system. The mission item can be either in x, y, z meters (type: LOCAL)
or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed
(NED), global frame is Z-up, right handed (ENU). NaN may be used to
indicate an optional/default value (e.g. to use the system's current
latitude or yaw rather than a specific value). See also
https://mavlink.io/en/services/mission.html.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                frame                     : The coordinate system of the waypoint. (uint8_t)
                command                   : The scheduled action for the waypoint. (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : Autocontinue to next waypoint (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: X coordinate, global: latitude (float)
                y                         : PARAM6 / local: Y coordinate, global: longitude (float)
                z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (float)

*/
    mavlink10.messages.mission_item = function(target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z) {

    this._format = '<fffffffHHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_ITEM;
    this.order_map = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 254;
    this._name = 'MISSION_ITEM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.mission_item.prototype = new mavlink10.message;
mavlink10.messages.mission_item.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.seq, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the information of the mission item with the sequence number
seq. The response of the system to this message should be a
MISSION_ITEM message. https://mavlink.io/en/services/mission.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
    mavlink10.messages.mission_request = function(target_system, target_component, seq) {

    this._format = '<HBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 230;
    this._name = 'MISSION_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq'];


    this.set(arguments,true);

}

mavlink10.messages.mission_request.prototype = new mavlink10.message;
mavlink10.messages.mission_request.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the mission item with sequence number seq as current item. This
means that the MAV will continue to this mission item on the shortest
path (not following the mission items in-between).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
    mavlink10.messages.mission_set_current = function(target_system, target_component, seq) {

    this._format = '<HBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_SET_CURRENT;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 28;
    this._name = 'MISSION_SET_CURRENT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq'];


    this.set(arguments,true);

}

mavlink10.messages.mission_set_current.prototype = new mavlink10.message;
mavlink10.messages.mission_set_current.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message that announces the sequence number of the current active
mission item. The MAV will fly towards this mission item.

                seq                       : Sequence (uint16_t)

*/
    mavlink10.messages.mission_current = function(seq) {

    this._format = '<H';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_CURRENT;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 28;
    this._name = 'MISSION_CURRENT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seq'];


    this.set(arguments,true);

}

mavlink10.messages.mission_current.prototype = new mavlink10.message;
mavlink10.messages.mission_current.prototype.pack = function(mav) {
    var orderedfields = [ this.seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the overall list of mission items from the system/component.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink10.messages.mission_request_list = function(target_system, target_component) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_LIST;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 132;
    this._name = 'MISSION_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.mission_request_list.prototype = new mavlink10.message;
mavlink10.messages.mission_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message is emitted as response to MISSION_REQUEST_LIST by the MAV
and to initiate a write transaction. The GCS can then request the
individual mission item based on the knowledge of the total number of
waypoints.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                count                     : Number of mission items in the sequence (uint16_t)

*/
    mavlink10.messages.mission_count = function(target_system, target_component, count) {

    this._format = '<HBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_COUNT;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 221;
    this._name = 'MISSION_COUNT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'count'];


    this.set(arguments,true);

}

mavlink10.messages.mission_count.prototype = new mavlink10.message;
mavlink10.messages.mission_count.prototype.pack = function(mav) {
    var orderedfields = [ this.count, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Delete all mission items at once.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink10.messages.mission_clear_all = function(target_system, target_component) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_CLEAR_ALL;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 232;
    this._name = 'MISSION_CLEAR_ALL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.mission_clear_all.prototype = new mavlink10.message;
mavlink10.messages.mission_clear_all.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A certain mission item has been reached. The system will either hold
this position (or circle on the orbit) or (if the autocontinue on the
WP was set) continue to the next waypoint.

                seq                       : Sequence (uint16_t)

*/
    mavlink10.messages.mission_item_reached = function(seq) {

    this._format = '<H';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_ITEM_REACHED;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 11;
    this._name = 'MISSION_ITEM_REACHED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seq'];


    this.set(arguments,true);

}

mavlink10.messages.mission_item_reached.prototype = new mavlink10.message;
mavlink10.messages.mission_item_reached.prototype.pack = function(mav) {
    var orderedfields = [ this.seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Acknowledgment message during waypoint handling. The type field states
if this message is a positive ack (type=0) or if an error happened
(type=non-zero).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type                      : Mission result. (uint8_t)

*/
    mavlink10.messages.mission_ack = function(target_system, target_component, type) {

    this._format = '<BBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_ACK;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 153;
    this._name = 'MISSION_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'type'];


    this.set(arguments,true);

}

mavlink10.messages.mission_ack.prototype = new mavlink10.message;
mavlink10.messages.mission_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of
whether the origin is changed. This enables transform between the
local coordinate frame and the global (GPS) coordinate frame, which
may be necessary when (for example) indoor and outdoor settings are
connected and the MAV should move from in- to outdoor.

                target_system             : System ID (uint8_t)
                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)

*/
    mavlink10.messages.set_gps_global_origin = function(target_system, latitude, longitude, altitude) {

    this._format = '<iiiB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN;
    this.order_map = [3, 0, 1, 2];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 41;
    this._name = 'SET_GPS_GLOBAL_ORIGIN';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'latitude', 'longitude', 'altitude'];


    this.set(arguments,true);

}

mavlink10.messages.set_gps_global_origin.prototype = new mavlink10.message;
mavlink10.messages.set_gps_global_origin.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.target_system];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
position. Emitted whenever a new GPS-Local position mapping is
requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.

                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)

*/
    mavlink10.messages.gps_global_origin = function(latitude, longitude, altitude) {

    this._format = '<iii';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 39;
    this._name = 'GPS_GLOBAL_ORIGIN';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['latitude', 'longitude', 'altitude'];


    this.set(arguments,true);

}

mavlink10.messages.gps_global_origin.prototype = new mavlink10.message;
mavlink10.messages.gps_global_origin.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Bind a RC channel to a parameter. The parameter should change
according to the RC channel value.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (int16_t)
                parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (uint8_t)
                param_value0              : Initial parameter value (float)
                scale                     : Scale, maps the RC range [-1, 1] to a parameter value (float)
                param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (float)
                param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (float)

*/
    mavlink10.messages.param_map_rc = function(target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max) {

    this._format = '<ffffhBB16sB';
    this._id = mavlink10.MAVLINK_MSG_ID_PARAM_MAP_RC;
    this.order_map = [5, 6, 7, 4, 8, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 16, 0];
    this.crc_extra = 78;
    this._name = 'PARAM_MAP_RC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index', 'parameter_rc_channel_index', 'param_value0', 'scale', 'param_value_min', 'param_value_max'];


    this.set(arguments,true);

}

mavlink10.messages.param_map_rc.prototype = new mavlink10.message;
mavlink10.messages.param_map_rc.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value0, this.scale, this.param_value_min, this.param_value_max, this.param_index, this.target_system, this.target_component, this.param_id, this.parameter_rc_channel_index];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the information of the mission item with the sequence number
seq. The response of the system to this message should be a
MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
    mavlink10.messages.mission_request_int = function(target_system, target_component, seq) {

    this._format = '<HBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_REQUEST_INT;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 196;
    this._name = 'MISSION_REQUEST_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq'];


    this.set(arguments,true);

}

mavlink10.messages.mission_request_int.prototype = new mavlink10.message;
mavlink10.messages.mission_request_int.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set a safety zone (volume), which is defined by two corners of a cube.
This message can be used to tell the MAV which setpoints/waypoints to
accept and which to reject. Safety areas are often enforced by
national or competition regulations.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
    mavlink10.messages.safety_set_allowed_area = function(target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z) {

    this._format = '<ffffffBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA;
    this.order_map = [6, 7, 8, 0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 15;
    this._name = 'SAFETY_SET_ALLOWED_AREA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];


    this.set(arguments,true);

}

mavlink10.messages.safety_set_allowed_area.prototype = new mavlink10.message;
mavlink10.messages.safety_set_allowed_area.prototype.pack = function(mav) {
    var orderedfields = [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.target_system, this.target_component, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read out the safety zone the MAV currently assumes.

                frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
    mavlink10.messages.safety_allowed_area = function(frame, p1x, p1y, p1z, p2x, p2y, p2z) {

    this._format = '<ffffffB';
    this._id = mavlink10.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA;
    this.order_map = [6, 0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 3;
    this._name = 'SAFETY_ALLOWED_AREA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];


    this.set(arguments,true);

}

mavlink10.messages.safety_allowed_area.prototype = new mavlink10.message;
mavlink10.messages.safety_allowed_area.prototype.pack = function(mav) {
    var orderedfields = [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right), expressed as quaternion. Quaternion order is w, x, y, z and
a zero rotation would be expressed as (1 0 0 0).

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)
                covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink10.messages.attitude_quaternion_cov = function(time_usec, q, rollspeed, pitchspeed, yawspeed, covariance) {

    this._format = '<Q4ffff9f';
    this._id = mavlink10.MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 9];
    this.array_len_map = [0, 4, 0, 0, 0, 9];
    this.crc_extra = 167;
    this._name = 'ATTITUDE_QUATERNION_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'q', 'rollspeed', 'pitchspeed', 'yawspeed', 'covariance'];


    this.set(arguments,true);

}

mavlink10.messages.attitude_quaternion_cov.prototype = new mavlink10.message;
mavlink10.messages.attitude_quaternion_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.q, this.rollspeed, this.pitchspeed, this.yawspeed, this.covariance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The state of the fixed wing navigation and position controller.

                nav_roll                  : Current desired roll (float)
                nav_pitch                 : Current desired pitch (float)
                nav_bearing               : Current desired heading (int16_t)
                target_bearing            : Bearing to current waypoint/target (int16_t)
                wp_dist                   : Distance to active waypoint (uint16_t)
                alt_error                 : Current altitude error (float)
                aspd_error                : Current airspeed error (float)
                xtrack_error              : Current crosstrack error on x-y plane (float)

*/
    mavlink10.messages.nav_controller_output = function(nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error) {

    this._format = '<fffffhhH';
    this._id = mavlink10.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
    this.order_map = [0, 1, 5, 6, 7, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 183;
    this._name = 'NAV_CONTROLLER_OUTPUT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing', 'wp_dist', 'alt_error', 'aspd_error', 'xtrack_error'];


    this.set(arguments,true);

}

mavlink10.messages.nav_controller_output.prototype = new mavlink10.message;
mavlink10.messages.nav_controller_output.prototype.pack = function(mav) {
    var orderedfields = [ this.nav_roll, this.nav_pitch, this.alt_error, this.aspd_error, this.xtrack_error, this.nav_bearing, this.target_bearing, this.wp_dist];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered global position (e.g. fused GPS and accelerometers). The
position is in GPS-frame (right-handed, Z-up). It  is designed as
scaled integer message since the resolution of float is not
sufficient. NOTE: This message is intended for onboard networks /
companion computers and higher-bandwidth links and optimized for
accuracy and completeness. Please use the GLOBAL_POSITION_INT message
for a minimal subset.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                estimator_type            : Class id of the estimator this estimate originated from. (uint8_t)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude in meters above MSL (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                vx                        : Ground X Speed (Latitude) (float)
                vy                        : Ground Y Speed (Longitude) (float)
                vz                        : Ground Z Speed (Altitude) (float)
                covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink10.messages.global_position_int_cov = function(time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance) {

    this._format = '<Qiiiifff36fB';
    this._id = mavlink10.MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 36, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 36, 0];
    this.crc_extra = 119;
    this._name = 'GLOBAL_POSITION_INT_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'estimator_type', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'covariance'];


    this.set(arguments,true);

}

mavlink10.messages.global_position_int_cov.prototype = new mavlink10.message;
mavlink10.messages.global_position_int_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.relative_alt, this.vx, this.vy, this.vz, this.covariance, this.estimator_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered local position (e.g. fused computer vision and
accelerometers). Coordinate frame is right-handed, Z-axis down
(aeronautical frame, NED / north-east-down convention)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                estimator_type            : Class id of the estimator this estimate originated from. (uint8_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)
                ax                        : X Acceleration (float)
                ay                        : Y Acceleration (float)
                az                        : Z Acceleration (float)
                covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink10.messages.local_position_ned_cov = function(time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance) {

    this._format = '<Qfffffffff45fB';
    this._id = mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
    this.order_map = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0];
    this.crc_extra = 191;
    this._name = 'LOCAL_POSITION_NED_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'estimator_type', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'ax', 'ay', 'az', 'covariance'];


    this.set(arguments,true);

}

mavlink10.messages.local_position_ned_cov.prototype = new mavlink10.message;
mavlink10.messages.local_position_ned_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.ax, this.ay, this.az, this.covariance, this.estimator_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The PPM values of the RC channels received. The standard PPM
modulation is as follows: 1000 microseconds: 0%, 2000 microseconds:
100%.  A value of UINT16_MAX implies the channel is unused. Individual
receivers/transmitters might violate this specification.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (uint8_t)
                chan1_raw                 : RC channel 1 value. (uint16_t)
                chan2_raw                 : RC channel 2 value. (uint16_t)
                chan3_raw                 : RC channel 3 value. (uint16_t)
                chan4_raw                 : RC channel 4 value. (uint16_t)
                chan5_raw                 : RC channel 5 value. (uint16_t)
                chan6_raw                 : RC channel 6 value. (uint16_t)
                chan7_raw                 : RC channel 7 value. (uint16_t)
                chan8_raw                 : RC channel 8 value. (uint16_t)
                chan9_raw                 : RC channel 9 value. (uint16_t)
                chan10_raw                : RC channel 10 value. (uint16_t)
                chan11_raw                : RC channel 11 value. (uint16_t)
                chan12_raw                : RC channel 12 value. (uint16_t)
                chan13_raw                : RC channel 13 value. (uint16_t)
                chan14_raw                : RC channel 14 value. (uint16_t)
                chan15_raw                : RC channel 15 value. (uint16_t)
                chan16_raw                : RC channel 16 value. (uint16_t)
                chan17_raw                : RC channel 17 value. (uint16_t)
                chan18_raw                : RC channel 18 value. (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink10.messages.rc_channels = function(time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi) {

    this._format = '<IHHHHHHHHHHHHHHHHHHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_RC_CHANNELS;
    this.order_map = [0, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 118;
    this._name = 'RC_CHANNELS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'chancount', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'chan13_raw', 'chan14_raw', 'chan15_raw', 'chan16_raw', 'chan17_raw', 'chan18_raw', 'rssi'];


    this.set(arguments,true);

}

mavlink10.messages.rc_channels.prototype = new mavlink10.message;
mavlink10.messages.rc_channels.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.chan13_raw, this.chan14_raw, this.chan15_raw, this.chan16_raw, this.chan17_raw, this.chan18_raw, this.chancount, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a data stream.

                target_system             : The target requested to send the message stream. (uint8_t)
                target_component          : The target requested to send the message stream. (uint8_t)
                req_stream_id             : The ID of the requested data stream (uint8_t)
                req_message_rate          : The requested message rate (uint16_t)
                start_stop                : 1 to start sending, 0 to stop sending. (uint8_t)

*/
    mavlink10.messages.request_data_stream = function(target_system, target_component, req_stream_id, req_message_rate, start_stop) {

    this._format = '<HBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 148;
    this._name = 'REQUEST_DATA_STREAM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'req_stream_id', 'req_message_rate', 'start_stop'];


    this.set(arguments,true);

}

mavlink10.messages.request_data_stream.prototype = new mavlink10.message;
mavlink10.messages.request_data_stream.prototype.pack = function(mav) {
    var orderedfields = [ this.req_message_rate, this.target_system, this.target_component, this.req_stream_id, this.start_stop];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data stream status information.

                stream_id                 : The ID of the requested data stream (uint8_t)
                message_rate              : The message rate (uint16_t)
                on_off                    : 1 stream is enabled, 0 stream is stopped. (uint8_t)

*/
    mavlink10.messages.data_stream = function(stream_id, message_rate, on_off) {

    this._format = '<HBB';
    this._id = mavlink10.MAVLINK_MSG_ID_DATA_STREAM;
    this.order_map = [1, 0, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 21;
    this._name = 'DATA_STREAM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['stream_id', 'message_rate', 'on_off'];


    this.set(arguments,true);

}

mavlink10.messages.data_stream.prototype = new mavlink10.message;
mavlink10.messages.data_stream.prototype.pack = function(mav) {
    var orderedfields = [ this.message_rate, this.stream_id, this.on_off];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message provides an API for manually controlling the vehicle
using standard joystick axes nomenclature, along with a joystick-like
input device. Unused axes can be disabled an buttons are also transmit
as boolean values of their

                target                    : The system to be controlled. (uint8_t)
                x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (int16_t)
                y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (int16_t)
                z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (int16_t)
                r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (int16_t)
                buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (uint16_t)

*/
    mavlink10.messages.manual_control = function(target, x, y, z, r, buttons) {

    this._format = '<hhhhHB';
    this._id = mavlink10.MAVLINK_MSG_ID_MANUAL_CONTROL;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 243;
    this._name = 'MANUAL_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target', 'x', 'y', 'z', 'r', 'buttons'];


    this.set(arguments,true);

}

mavlink10.messages.manual_control.prototype = new mavlink10.message;
mavlink10.messages.manual_control.prototype.pack = function(mav) {
    var orderedfields = [ this.x, this.y, this.z, this.r, this.buttons, this.target];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW values of the RC channels sent to the MAV to override info
received from the RC radio. A value of UINT16_MAX means no change to
that channel. A value of 0 means control of that channel should be
released back to the RC radio. The standard PPM modulation is as
follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. (uint16_t)
                chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. (uint16_t)

*/
    mavlink10.messages.rc_channels_override = function(target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw) {

    this._format = '<HHHHHHHHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE;
    this.order_map = [8, 9, 0, 1, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'RC_CHANNELS_OVERRIDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw'];


    this.set(arguments,true);

}

mavlink10.messages.rc_channels_override.prototype = new mavlink10.message;
mavlink10.messages.rc_channels_override.prototype.pack = function(mav) {
    var orderedfields = [ this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a mission item. This message is emitted to announce
the presence of a mission item and to set a mission item on the
system. The mission item can be either in x, y, z meters (type: LOCAL)
or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed
(NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may
be used in float/integer params (respectively) to indicate
optional/default values (e.g. to use the component's current latitude,
yaw rather than a specific value). See also
https://mavlink.io/en/services/mission.html.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (uint16_t)
                frame                     : The coordinate system of the waypoint. (uint8_t)
                command                   : The scheduled action for the waypoint. (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : Autocontinue to next waypoint (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (int32_t)
                y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (int32_t)
                z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (float)

*/
    mavlink10.messages.mission_item_int = function(target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z) {

    this._format = '<ffffiifHHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MISSION_ITEM_INT;
    this.order_map = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 38;
    this._name = 'MISSION_ITEM_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.mission_item_int.prototype = new mavlink10.message;
mavlink10.messages.mission_item_int.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.seq, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Metrics typically displayed on a HUD for fixed wing aircraft.

                airspeed                  : Current indicated airspeed (IAS). (float)
                groundspeed               : Current ground speed. (float)
                heading                   : Current heading in compass units (0-360, 0=north). (int16_t)
                throttle                  : Current throttle setting (0 to 100). (uint16_t)
                alt                       : Current altitude (MSL). (float)
                climb                     : Current climb rate. (float)

*/
    mavlink10.messages.vfr_hud = function(airspeed, groundspeed, heading, throttle, alt, climb) {

    this._format = '<ffffhH';
    this._id = mavlink10.MAVLINK_MSG_ID_VFR_HUD;
    this.order_map = [0, 1, 4, 5, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 20;
    this._name = 'VFR_HUD';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['airspeed', 'groundspeed', 'heading', 'throttle', 'alt', 'climb'];


    this.set(arguments,true);

}

mavlink10.messages.vfr_hud.prototype = new mavlink10.message;
mavlink10.messages.vfr_hud.prototype.pack = function(mav) {
    var orderedfields = [ this.airspeed, this.groundspeed, this.alt, this.climb, this.heading, this.throttle];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a command with parameters as scaled integers. Scaling
depends on the actual command value. The command microservice is
documented at https://mavlink.io/en/services/command.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : The coordinate system of the COMMAND. (uint8_t)
                command                   : The scheduled action for the mission item. (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : autocontinue to next wp (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (int32_t)
                y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (int32_t)
                z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (float)

*/
    mavlink10.messages.command_int = function(target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z) {

    this._format = '<ffffiifHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_COMMAND_INT;
    this.order_map = [8, 9, 10, 7, 11, 12, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 158;
    this._name = 'COMMAND_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.command_int.prototype = new mavlink10.message;
mavlink10.messages.command_int.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a command with up to seven parameters to the MAV. The command
microservice is documented at
https://mavlink.io/en/services/command.html

                target_system             : System which should execute the command (uint8_t)
                target_component          : Component which should execute the command, 0 for all components (uint8_t)
                command                   : Command ID (of command to send). (uint16_t)
                confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (uint8_t)
                param1                    : Parameter 1 (for the specific command). (float)
                param2                    : Parameter 2 (for the specific command). (float)
                param3                    : Parameter 3 (for the specific command). (float)
                param4                    : Parameter 4 (for the specific command). (float)
                param5                    : Parameter 5 (for the specific command). (float)
                param6                    : Parameter 6 (for the specific command). (float)
                param7                    : Parameter 7 (for the specific command). (float)

*/
    mavlink10.messages.command_long = function(target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7) {

    this._format = '<fffffffHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_COMMAND_LONG;
    this.order_map = [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 152;
    this._name = 'COMMAND_LONG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'command', 'confirmation', 'param1', 'param2', 'param3', 'param4', 'param5', 'param6', 'param7'];


    this.set(arguments,true);

}

mavlink10.messages.command_long.prototype = new mavlink10.message;
mavlink10.messages.command_long.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.param5, this.param6, this.param7, this.command, this.target_system, this.target_component, this.confirmation];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Report status of a command. Includes feedback whether the command was
executed. The command microservice is documented at
https://mavlink.io/en/services/command.html

                command                   : Command ID (of acknowledged command). (uint16_t)
                result                    : Result of command. (uint8_t)

*/
    mavlink10.messages.command_ack = function(command, result) {

    this._format = '<HB';
    this._id = mavlink10.MAVLINK_MSG_ID_COMMAND_ACK;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 143;
    this._name = 'COMMAND_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['command', 'result'];


    this.set(arguments,true);

}

mavlink10.messages.command_ack.prototype = new mavlink10.message;
mavlink10.messages.command_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.command, this.result];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Setpoint in roll, pitch, yaw and thrust from the operator

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                roll                      : Desired roll rate (float)
                pitch                     : Desired pitch rate (float)
                yaw                       : Desired yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)
                mode_switch               : Flight mode switch position, 0.. 255 (uint8_t)
                manual_override_switch        : Override mode switch position, 0.. 255 (uint8_t)

*/
    mavlink10.messages.manual_setpoint = function(time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch) {

    this._format = '<IffffBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MANUAL_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 106;
    this._name = 'MANUAL_SETPOINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust', 'mode_switch', 'manual_override_switch'];


    this.set(arguments,true);

}

mavlink10.messages.manual_setpoint.prototype = new mavlink10.message;
mavlink10.messages.manual_setpoint.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.thrust, this.mode_switch, this.manual_override_switch];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle attitude. Used by an external controller to
command the vehicle (manual controller or other system).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude (uint8_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                body_roll_rate            : Body roll rate (float)
                body_pitch_rate           : Body pitch rate (float)
                body_yaw_rate             : Body yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (float)

*/
    mavlink10.messages.set_attitude_target = function(time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust) {

    this._format = '<I4fffffBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_ATTITUDE_TARGET;
    this.order_map = [0, 6, 7, 8, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 49;
    this._name = 'SET_ATTITUDE_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'type_mask', 'q', 'body_roll_rate', 'body_pitch_rate', 'body_yaw_rate', 'thrust'];


    this.set(arguments,true);

}

mavlink10.messages.set_attitude_target.prototype = new mavlink10.message;
mavlink10.messages.set_attitude_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q, this.body_roll_rate, this.body_pitch_rate, this.body_yaw_rate, this.thrust, this.target_system, this.target_component, this.type_mask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded attitude of the vehicle as specified by
the autopilot. This should match the commands sent in a
SET_ATTITUDE_TARGET message if the vehicle is being controlled this
way.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude (uint8_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                body_roll_rate            : Body roll rate (float)
                body_pitch_rate           : Body pitch rate (float)
                body_yaw_rate             : Body yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (float)

*/
    mavlink10.messages.attitude_target = function(time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust) {

    this._format = '<I4fffffB';
    this._id = mavlink10.MAVLINK_MSG_ID_ATTITUDE_TARGET;
    this.order_map = [0, 6, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0];
    this.crc_extra = 22;
    this._name = 'ATTITUDE_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'type_mask', 'q', 'body_roll_rate', 'body_pitch_rate', 'body_yaw_rate', 'thrust'];


    this.set(arguments,true);

}

mavlink10.messages.attitude_target.prototype = new mavlink10.message;
mavlink10.messages.attitude_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q, this.body_roll_rate, this.body_pitch_rate, this.body_yaw_rate, this.thrust, this.type_mask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle position in a local north-east-down coordinate
frame. Used by an external controller to command the vehicle (manual
controller or other system).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                x                         : X Position in NED frame (float)
                y                         : Y Position in NED frame (float)
                z                         : Z Position in NED frame (note, altitude is negative in NED) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink10.messages.set_position_target_local_ned = function(time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate) {

    this._format = '<IfffffffffffHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED;
    this.order_map = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 143;
    this._name = 'SET_POSITION_TARGET_LOCAL_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'coordinate_frame', 'type_mask', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];


    this.set(arguments,true);

}

mavlink10.messages.set_position_target_local_ned.prototype = new mavlink10.message;
mavlink10.messages.set_position_target_local_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.target_system, this.target_component, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded vehicle position, velocity, and
acceleration as specified by the autopilot. This should match the
commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
controlled this way.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                x                         : X Position in NED frame (float)
                y                         : Y Position in NED frame (float)
                z                         : Z Position in NED frame (note, altitude is negative in NED) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink10.messages.position_target_local_ned = function(time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate) {

    this._format = '<IfffffffffffHB';
    this._id = mavlink10.MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED;
    this.order_map = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 140;
    this._name = 'POSITION_TARGET_LOCAL_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];


    this.set(arguments,true);

}

mavlink10.messages.position_target_local_ned.prototype = new mavlink10.message;
mavlink10.messages.position_target_local_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle position, velocity, and/or acceleration in a
global coordinate system (WGS84). Used by an external controller to
command the vehicle (manual controller or other system).

                time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                lat_int                   : X Position in WGS84 frame (int32_t)
                lon_int                   : Y Position in WGS84 frame (int32_t)
                alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink10.messages.set_position_target_global_int = function(time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate) {

    this._format = '<IiifffffffffHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT;
    this.order_map = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 5;
    this._name = 'SET_POSITION_TARGET_GLOBAL_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'coordinate_frame', 'type_mask', 'lat_int', 'lon_int', 'alt', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];


    this.set(arguments,true);

}

mavlink10.messages.set_position_target_global_int.prototype = new mavlink10.message;
mavlink10.messages.set_position_target_global_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat_int, this.lon_int, this.alt, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.target_system, this.target_component, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded vehicle position, velocity, and
acceleration as specified by the autopilot. This should match the
commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is
being controlled this way.

                time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. (uint32_t)
                coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                lat_int                   : X Position in WGS84 frame (int32_t)
                lon_int                   : Y Position in WGS84 frame (int32_t)
                alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink10.messages.position_target_global_int = function(time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate) {

    this._format = '<IiifffffffffHB';
    this._id = mavlink10.MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT;
    this.order_map = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 150;
    this._name = 'POSITION_TARGET_GLOBAL_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'lat_int', 'lon_int', 'alt', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];


    this.set(arguments,true);

}

mavlink10.messages.position_target_global_int.prototype = new mavlink10.message;
mavlink10.messages.position_target_global_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat_int, this.lon_int, this.alt, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
of MAV X and the global coordinate frame in NED coordinates.
Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED
/ north-east-down convention)

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                roll                      : Roll (float)
                pitch                     : Pitch (float)
                yaw                       : Yaw (float)

*/
    mavlink10.messages.local_position_ned_system_global_offset = function(time_boot_ms, x, y, z, roll, pitch, yaw) {

    this._format = '<Iffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 231;
    this._name = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments,true);

}

mavlink10.messages.local_position_ned_system_global_offset.prototype = new mavlink10.message;
mavlink10.messages.local_position_ned_system_global_offset.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.roll, this.pitch, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot. This packet is useful for high
throughput applications such as hardware in the loop simulations.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                rollspeed                 : Body frame roll / phi angular speed (float)
                pitchspeed                : Body frame pitch / theta angular speed (float)
                yawspeed                  : Body frame yaw / psi angular speed (float)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude (int32_t)
                vx                        : Ground X Speed (Latitude) (int16_t)
                vy                        : Ground Y Speed (Longitude) (int16_t)
                vz                        : Ground Z Speed (Altitude) (int16_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)

*/
    mavlink10.messages.hil_state = function(time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc) {

    this._format = '<Qffffffiiihhhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 183;
    this._name = 'HIL_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'xacc', 'yacc', 'zacc'];


    this.set(arguments,true);

}

mavlink10.messages.hil_state.prototype = new mavlink10.message;
mavlink10.messages.hil_state.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed, this.lat, this.lon, this.alt, this.vx, this.vy, this.vz, this.xacc, this.yacc, this.zacc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from autopilot to simulation. Hardware in the loop control
outputs

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                roll_ailerons             : Control output -1 .. 1 (float)
                pitch_elevator            : Control output -1 .. 1 (float)
                yaw_rudder                : Control output -1 .. 1 (float)
                throttle                  : Throttle 0 .. 1 (float)
                aux1                      : Aux 1, -1 .. 1 (float)
                aux2                      : Aux 2, -1 .. 1 (float)
                aux3                      : Aux 3, -1 .. 1 (float)
                aux4                      : Aux 4, -1 .. 1 (float)
                mode                      : System mode. (uint8_t)
                nav_mode                  : Navigation mode (MAV_NAV_MODE) (uint8_t)

*/
    mavlink10.messages.hil_controls = function(time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode) {

    this._format = '<QffffffffBB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_CONTROLS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 63;
    this._name = 'HIL_CONTROLS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle', 'aux1', 'aux2', 'aux3', 'aux4', 'mode', 'nav_mode'];


    this.set(arguments,true);

}

mavlink10.messages.hil_controls.prototype = new mavlink10.message;
mavlink10.messages.hil_controls.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.roll_ailerons, this.pitch_elevator, this.yaw_rudder, this.throttle, this.aux1, this.aux2, this.aux3, this.aux4, this.mode, this.nav_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot. The RAW values of the RC channels
received. The standard PPM modulation is as follows: 1000
microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                chan1_raw                 : RC channel 1 value (uint16_t)
                chan2_raw                 : RC channel 2 value (uint16_t)
                chan3_raw                 : RC channel 3 value (uint16_t)
                chan4_raw                 : RC channel 4 value (uint16_t)
                chan5_raw                 : RC channel 5 value (uint16_t)
                chan6_raw                 : RC channel 6 value (uint16_t)
                chan7_raw                 : RC channel 7 value (uint16_t)
                chan8_raw                 : RC channel 8 value (uint16_t)
                chan9_raw                 : RC channel 9 value (uint16_t)
                chan10_raw                : RC channel 10 value (uint16_t)
                chan11_raw                : RC channel 11 value (uint16_t)
                chan12_raw                : RC channel 12 value (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink10.messages.hil_rc_inputs_raw = function(time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi) {

    this._format = '<QHHHHHHHHHHHHB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 54;
    this._name = 'HIL_RC_INPUTS_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'rssi'];


    this.set(arguments,true);

}

mavlink10.messages.hil_rc_inputs_raw.prototype = new mavlink10.message;
mavlink10.messages.hil_rc_inputs_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from autopilot to simulation. Hardware in the loop control
outputs (replacement for HIL_CONTROLS)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (float)
                mode                      : System mode. Includes arming state. (uint8_t)
                flags                     : Flags as bitfield, 1: indicate simulation using lockstep. (uint64_t)

*/
    mavlink10.messages.hil_actuator_controls = function(time_usec, controls, mode, flags) {

    this._format = '<QQ16fB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS;
    this.order_map = [0, 2, 3, 1];
    this.len_map = [1, 1, 16, 1];
    this.array_len_map = [0, 0, 16, 0];
    this.crc_extra = 47;
    this._name = 'HIL_ACTUATOR_CONTROLS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'controls', 'mode', 'flags'];


    this.set(arguments,true);

}

mavlink10.messages.hil_actuator_controls.prototype = new mavlink10.message;
mavlink10.messages.hil_actuator_controls.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.flags, this.controls, this.mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Optical flow from a flow sensor (e.g. optical mouse sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                flow_x                    : Flow in x-sensor direction (int16_t)
                flow_y                    : Flow in y-sensor direction (int16_t)
                flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated (float)
                flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated (float)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance (float)

*/
    mavlink10.messages.optical_flow = function(time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance) {

    this._format = '<QfffhhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_OPTICAL_FLOW;
    this.order_map = [0, 6, 4, 5, 1, 2, 7, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 175;
    this._name = 'OPTICAL_FLOW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_id', 'flow_x', 'flow_y', 'flow_comp_m_x', 'flow_comp_m_y', 'quality', 'ground_distance'];


    this.set(arguments,true);

}

mavlink10.messages.optical_flow.prototype = new mavlink10.message;
mavlink10.messages.optical_flow.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.flow_comp_m_x, this.flow_comp_m_y, this.ground_distance, this.flow_x, this.flow_y, this.sensor_id, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Global position/attitude estimate from a vision source.

                usec                      : Timestamp (UNIX time or since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)

*/
    mavlink10.messages.global_vision_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this._format = '<Qffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 102;
    this._name = 'GLOBAL_VISION_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments,true);

}

mavlink10.messages.global_vision_position_estimate.prototype = new mavlink10.message;
mavlink10.messages.global_vision_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Local position/attitude estimate from a vision source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Local X position (float)
                y                         : Local Y position (float)
                z                         : Local Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)

*/
    mavlink10.messages.vision_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this._format = '<Qffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 158;
    this._name = 'VISION_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments,true);

}

mavlink10.messages.vision_position_estimate.prototype = new mavlink10.message;
mavlink10.messages.vision_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Speed estimate from a vision source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Global X speed (float)
                y                         : Global Y speed (float)
                z                         : Global Z speed (float)

*/
    mavlink10.messages.vision_speed_estimate = function(usec, x, y, z) {

    this._format = '<Qfff';
    this._id = mavlink10.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 208;
    this._name = 'VISION_SPEED_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.vision_speed_estimate.prototype = new mavlink10.message;
mavlink10.messages.vision_speed_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Global position estimate from a Vicon motion system source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)

*/
    mavlink10.messages.vicon_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this._format = '<Qffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 56;
    this._name = 'VICON_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments,true);

}

mavlink10.messages.vicon_position_estimate.prototype = new mavlink10.message;
mavlink10.messages.vicon_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The IMU readings in SI units in NED body frame

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis (float)
                ygyro                     : Angular speed around Y axis (float)
                zgyro                     : Angular speed around Z axis (float)
                xmag                      : X Magnetic field (float)
                ymag                      : Y Magnetic field (float)
                zmag                      : Z Magnetic field (float)
                abs_pressure              : Absolute pressure (float)
                diff_pressure             : Differential pressure (float)
                pressure_alt              : Altitude calculated from pressure (float)
                temperature               : Temperature (float)
                fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (uint16_t)

*/
    mavlink10.messages.highres_imu = function(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated) {

    this._format = '<QfffffffffffffH';
    this._id = mavlink10.MAVLINK_MSG_ID_HIGHRES_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 93;
    this._name = 'HIGHRES_IMU';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'abs_pressure', 'diff_pressure', 'pressure_alt', 'temperature', 'fields_updated'];


    this.set(arguments,true);

}

mavlink10.messages.highres_imu.prototype = new mavlink10.message;
mavlink10.messages.highres_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.abs_pressure, this.diff_pressure, this.pressure_alt, this.temperature, this.fields_updated];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. (uint32_t)
                integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) (float)
                integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) (float)
                integrated_xgyro          : RH rotation around X axis (float)
                integrated_ygyro          : RH rotation around Y axis (float)
                integrated_zgyro          : RH rotation around Z axis (float)
                temperature               : Temperature (int16_t)
                quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (uint8_t)
                time_delta_distance_us        : Time since the distance was sampled. (uint32_t)
                distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. (float)

*/
    mavlink10.messages.optical_flow_rad = function(time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance) {

    this._format = '<QIfffffIfhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_OPTICAL_FLOW_RAD;
    this.order_map = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 138;
    this._name = 'OPTICAL_FLOW_RAD';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integrated_x', 'integrated_y', 'integrated_xgyro', 'integrated_ygyro', 'integrated_zgyro', 'temperature', 'quality', 'time_delta_distance_us', 'distance'];


    this.set(arguments,true);

}

mavlink10.messages.optical_flow_rad.prototype = new mavlink10.message;
mavlink10.messages.optical_flow_rad.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.integration_time_us, this.integrated_x, this.integrated_y, this.integrated_xgyro, this.integrated_ygyro, this.integrated_zgyro, this.time_delta_distance_us, this.distance, this.temperature, this.sensor_id, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The IMU readings in SI units in NED body frame

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis in body frame (float)
                ygyro                     : Angular speed around Y axis in body frame (float)
                zgyro                     : Angular speed around Z axis in body frame (float)
                xmag                      : X Magnetic field (float)
                ymag                      : Y Magnetic field (float)
                zmag                      : Z Magnetic field (float)
                abs_pressure              : Absolute pressure (float)
                diff_pressure             : Differential pressure (airspeed) (float)
                pressure_alt              : Altitude calculated from pressure (float)
                temperature               : Temperature (float)
                fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (uint32_t)

*/
    mavlink10.messages.hil_sensor = function(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated) {

    this._format = '<QfffffffffffffI';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_SENSOR;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 108;
    this._name = 'HIL_SENSOR';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'abs_pressure', 'diff_pressure', 'pressure_alt', 'temperature', 'fields_updated'];


    this.set(arguments,true);

}

mavlink10.messages.hil_sensor.prototype = new mavlink10.message;
mavlink10.messages.hil_sensor.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.abs_pressure, this.diff_pressure, this.pressure_alt, this.temperature, this.fields_updated];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of simulation environment, if used

                q1                        : True attitude quaternion component 1, w (1 in null-rotation) (float)
                q2                        : True attitude quaternion component 2, x (0 in null-rotation) (float)
                q3                        : True attitude quaternion component 3, y (0 in null-rotation) (float)
                q4                        : True attitude quaternion component 4, z (0 in null-rotation) (float)
                roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (float)
                pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (float)
                yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (float)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis (float)
                ygyro                     : Angular speed around Y axis (float)
                zgyro                     : Angular speed around Z axis (float)
                lat                       : Latitude (float)
                lon                       : Longitude (float)
                alt                       : Altitude (float)
                std_dev_horz              : Horizontal position standard deviation (float)
                std_dev_vert              : Vertical position standard deviation (float)
                vn                        : True velocity in north direction in earth-fixed NED frame (float)
                ve                        : True velocity in east direction in earth-fixed NED frame (float)
                vd                        : True velocity in down direction in earth-fixed NED frame (float)

*/
    mavlink10.messages.sim_state = function(q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd) {

    this._format = '<fffffffffffffffffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_SIM_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 32;
    this._name = 'SIM_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['q1', 'q2', 'q3', 'q4', 'roll', 'pitch', 'yaw', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'lat', 'lon', 'alt', 'std_dev_horz', 'std_dev_vert', 'vn', 've', 'vd'];


    this.set(arguments,true);

}

mavlink10.messages.sim_state.prototype = new mavlink10.message;
mavlink10.messages.sim_state.prototype.pack = function(mav) {
    var orderedfields = [ this.q1, this.q2, this.q3, this.q4, this.roll, this.pitch, this.yaw, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.lat, this.lon, this.alt, this.std_dev_horz, this.std_dev_vert, this.vn, this.ve, this.vd];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status generated by radio and injected into MAVLink stream.

                rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)
                remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)
                txbuf                     : Remaining free transmitter buffer space. (uint8_t)
                noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (uint8_t)
                remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (uint8_t)
                rxerrors                  : Count of radio packet receive errors (since boot). (uint16_t)
                fixed                     : Count of error corrected radio packets (since boot). (uint16_t)

*/
    mavlink10.messages.radio_status = function(rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed) {

    this._format = '<HHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_RADIO_STATUS;
    this.order_map = [2, 3, 4, 5, 6, 0, 1];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 185;
    this._name = 'RADIO_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rssi', 'remrssi', 'txbuf', 'noise', 'remnoise', 'rxerrors', 'fixed'];


    this.set(arguments,true);

}

mavlink10.messages.radio_status.prototype = new mavlink10.message;
mavlink10.messages.radio_status.prototype.pack = function(mav) {
    var orderedfields = [ this.rxerrors, this.fixed, this.rssi, this.remrssi, this.txbuf, this.noise, this.remnoise];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
File transfer message

                target_network            : Network ID (0 for broadcast) (uint8_t)
                target_system             : System ID (0 for broadcast) (uint8_t)
                target_component          : Component ID (0 for broadcast) (uint8_t)
                payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (uint8_t)

*/
    mavlink10.messages.file_transfer_protocol = function(target_network, target_system, target_component, payload) {

    this._format = '<BBB251s';
    this._id = mavlink10.MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 251];
    this.array_len_map = [0, 0, 0, 251];
    this.crc_extra = 84;
    this._name = 'FILE_TRANSFER_PROTOCOL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_network', 'target_system', 'target_component', 'payload'];


    this.set(arguments,true);

}

mavlink10.messages.file_transfer_protocol.prototype = new mavlink10.message;
mavlink10.messages.file_transfer_protocol.prototype.pack = function(mav) {
    var orderedfields = [ this.target_network, this.target_system, this.target_component, this.payload];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Time synchronization message.

                tc1                       : Time sync timestamp 1 (int64_t)
                ts1                       : Time sync timestamp 2 (int64_t)

*/
    mavlink10.messages.timesync = function(tc1, ts1) {

    this._format = '<qq';
    this._id = mavlink10.MAVLINK_MSG_ID_TIMESYNC;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 34;
    this._name = 'TIMESYNC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['tc1', 'ts1'];


    this.set(arguments,true);

}

mavlink10.messages.timesync.prototype = new mavlink10.message;
mavlink10.messages.timesync.prototype.pack = function(mav) {
    var orderedfields = [ this.tc1, this.ts1];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera-IMU triggering and synchronisation message.

                time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                seq                       : Image frame sequence (uint32_t)

*/
    mavlink10.messages.camera_trigger = function(time_usec, seq) {

    this._format = '<QI';
    this._id = mavlink10.MAVLINK_MSG_ID_CAMERA_TRIGGER;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 174;
    this._name = 'CAMERA_TRIGGER';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'seq'];


    this.set(arguments,true);

}

mavlink10.messages.camera_trigger.prototype = new mavlink10.message;
mavlink10.messages.camera_trigger.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The global position, as returned by the Global Positioning System
(GPS). This is                  NOT the global position estimate of
the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION
for the global position estimate.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: 65535 (uint16_t)
                epv                       : GPS VDOP vertical dilution of position. If unknown, set to: 65535 (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: 65535 (uint16_t)
                vn                        : GPS velocity in north direction in earth-fixed NED frame (int16_t)
                ve                        : GPS velocity in east direction in earth-fixed NED frame (int16_t)
                vd                        : GPS velocity in down direction in earth-fixed NED frame (int16_t)
                cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)

*/
    mavlink10.messages.hil_gps = function(time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible) {

    this._format = '<QiiiHHHhhhHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_GPS;
    this.order_map = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'HIL_GPS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'vn', 've', 'vd', 'cog', 'satellites_visible'];


    this.set(arguments,true);

}

mavlink10.messages.hil_gps.prototype = new mavlink10.message;
mavlink10.messages.hil_gps.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.eph, this.epv, this.vel, this.vn, this.ve, this.vd, this.cog, this.fix_type, this.satellites_visible];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
mouse sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. (uint32_t)
                integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) (float)
                integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) (float)
                integrated_xgyro          : RH rotation around X axis (float)
                integrated_ygyro          : RH rotation around Y axis (float)
                integrated_zgyro          : RH rotation around Z axis (float)
                temperature               : Temperature (int16_t)
                quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (uint8_t)
                time_delta_distance_us        : Time since the distance was sampled. (uint32_t)
                distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. (float)

*/
    mavlink10.messages.hil_optical_flow = function(time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance) {

    this._format = '<QIfffffIfhBB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_OPTICAL_FLOW;
    this.order_map = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'HIL_OPTICAL_FLOW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integrated_x', 'integrated_y', 'integrated_xgyro', 'integrated_ygyro', 'integrated_zgyro', 'temperature', 'quality', 'time_delta_distance_us', 'distance'];


    this.set(arguments,true);

}

mavlink10.messages.hil_optical_flow.prototype = new mavlink10.message;
mavlink10.messages.hil_optical_flow.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.integration_time_us, this.integrated_x, this.integrated_y, this.integrated_xgyro, this.integrated_ygyro, this.integrated_zgyro, this.time_delta_distance_us, this.distance, this.temperature, this.sensor_id, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot, avoids in contrast to HIL_STATE
singularities. This packet is useful for high throughput applications
such as hardware in the loop simulations.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (float)
                rollspeed                 : Body frame roll / phi angular speed (float)
                pitchspeed                : Body frame pitch / theta angular speed (float)
                yawspeed                  : Body frame yaw / psi angular speed (float)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude (int32_t)
                vx                        : Ground X Speed (Latitude) (int16_t)
                vy                        : Ground Y Speed (Longitude) (int16_t)
                vz                        : Ground Z Speed (Altitude) (int16_t)
                ind_airspeed              : Indicated airspeed (uint16_t)
                true_airspeed             : True airspeed (uint16_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)

*/
    mavlink10.messages.hil_state_quaternion = function(time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc) {

    this._format = '<Q4ffffiiihhhHHhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_HIL_STATE_QUATERNION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 4;
    this._name = 'HIL_STATE_QUATERNION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'attitude_quaternion', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'ind_airspeed', 'true_airspeed', 'xacc', 'yacc', 'zacc'];


    this.set(arguments,true);

}

mavlink10.messages.hil_state_quaternion.prototype = new mavlink10.message;
mavlink10.messages.hil_state_quaternion.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.attitude_quaternion, this.rollspeed, this.pitchspeed, this.yawspeed, this.lat, this.lon, this.alt, this.vx, this.vy, this.vz, this.ind_airspeed, this.true_airspeed, this.xacc, this.yacc, this.zacc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for secondary 9DOF sensor setup. This message
should contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)

*/
    mavlink10.messages.scaled_imu2 = function(time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this._format = '<Ihhhhhhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_IMU2;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 76;
    this._name = 'SCALED_IMU2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_imu2.prototype = new mavlink10.message;
mavlink10.messages.scaled_imu2.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a list of available logs. On some systems calling this may
stop on-board logging until LOG_REQUEST_END is called. If there are no
log files available this request shall be answered with one LOG_ENTRY
message with id = 0 and num_logs = 0.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start                     : First log id (0 for first available) (uint16_t)
                end                       : Last log id (0xffff for last available) (uint16_t)

*/
    mavlink10.messages.log_request_list = function(target_system, target_component, start, end) {

    this._format = '<HHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_LIST;
    this.order_map = [2, 3, 0, 1];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 128;
    this._name = 'LOG_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start', 'end'];


    this.set(arguments,true);

}

mavlink10.messages.log_request_list.prototype = new mavlink10.message;
mavlink10.messages.log_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start, this.end, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reply to LOG_REQUEST_LIST

                id                        : Log id (uint16_t)
                num_logs                  : Total number of logs (uint16_t)
                last_log_num              : High log number (uint16_t)
                time_utc                  : UTC timestamp of log since 1970, or 0 if not available (uint32_t)
                size                      : Size of the log (may be approximate) (uint32_t)

*/
    mavlink10.messages.log_entry = function(id, num_logs, last_log_num, time_utc, size) {

    this._format = '<IIHHH';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_ENTRY;
    this.order_map = [2, 3, 4, 0, 1];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 56;
    this._name = 'LOG_ENTRY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['id', 'num_logs', 'last_log_num', 'time_utc', 'size'];


    this.set(arguments,true);

}

mavlink10.messages.log_entry.prototype = new mavlink10.message;
mavlink10.messages.log_entry.prototype.pack = function(mav) {
    var orderedfields = [ this.time_utc, this.size, this.id, this.num_logs, this.last_log_num];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a chunk of a log

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                id                        : Log id (from LOG_ENTRY reply) (uint16_t)
                ofs                       : Offset into the log (uint32_t)
                count                     : Number of bytes (uint32_t)

*/
    mavlink10.messages.log_request_data = function(target_system, target_component, id, ofs, count) {

    this._format = '<IIHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_DATA;
    this.order_map = [3, 4, 2, 0, 1];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 116;
    this._name = 'LOG_REQUEST_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id', 'ofs', 'count'];


    this.set(arguments,true);

}

mavlink10.messages.log_request_data.prototype = new mavlink10.message;
mavlink10.messages.log_request_data.prototype.pack = function(mav) {
    var orderedfields = [ this.ofs, this.count, this.id, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reply to LOG_REQUEST_DATA

                id                        : Log id (from LOG_ENTRY reply) (uint16_t)
                ofs                       : Offset into the log (uint32_t)
                count                     : Number of bytes (zero for end of log) (uint8_t)
                data                      : log data (uint8_t)

*/
    mavlink10.messages.log_data = function(id, ofs, count, data) {

    this._format = '<IHB90s';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_DATA;
    this.order_map = [1, 0, 2, 3];
    this.len_map = [1, 1, 1, 90];
    this.array_len_map = [0, 0, 0, 90];
    this.crc_extra = 134;
    this._name = 'LOG_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['id', 'ofs', 'count', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.log_data.prototype = new mavlink10.message;
mavlink10.messages.log_data.prototype.pack = function(mav) {
    var orderedfields = [ this.ofs, this.id, this.count, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Erase all logs

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink10.messages.log_erase = function(target_system, target_component) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_ERASE;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 237;
    this._name = 'LOG_ERASE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.log_erase.prototype = new mavlink10.message;
mavlink10.messages.log_erase.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Stop log transfer and resume normal logging

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink10.messages.log_request_end = function(target_system, target_component) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_LOG_REQUEST_END;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 203;
    this._name = 'LOG_REQUEST_END';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments,true);

}

mavlink10.messages.log_request_end.prototype = new mavlink10.message;
mavlink10.messages.log_request_end.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for injecting into the onboard GPS (used for DGPS)

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                len                       : Data length (uint8_t)
                data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (uint8_t)

*/
    mavlink10.messages.gps_inject_data = function(target_system, target_component, len, data) {

    this._format = '<BBB110s';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_INJECT_DATA;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 110];
    this.array_len_map = [0, 0, 0, 110];
    this.crc_extra = 250;
    this._name = 'GPS_INJECT_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'len', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.gps_inject_data.prototype = new mavlink10.message;
mavlink10.messages.gps_inject_data.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Second GPS data.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : GPS fix type. (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX (uint16_t)
                epv                       : GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: UINT16_MAX (uint16_t)
                cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)
                dgps_numch                : Number of DGPS satellites (uint8_t)
                dgps_age                  : Age of DGPS info (uint32_t)

*/
    mavlink10.messages.gps2_raw = function(time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age) {

    this._format = '<QiiiIHHHHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS2_RAW;
    this.order_map = [0, 9, 1, 2, 3, 5, 6, 7, 8, 10, 11, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 87;
    this._name = 'GPS2_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'cog', 'satellites_visible', 'dgps_numch', 'dgps_age'];


    this.set(arguments,true);

}

mavlink10.messages.gps2_raw.prototype = new mavlink10.message;
mavlink10.messages.gps2_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.dgps_age, this.eph, this.epv, this.vel, this.cog, this.fix_type, this.satellites_visible, this.dgps_numch];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Power supply status

                Vcc                       : 5V rail voltage. (uint16_t)
                Vservo                    : Servo rail voltage. (uint16_t)
                flags                     : Bitmap of power supply status flags. (uint16_t)

*/
    mavlink10.messages.power_status = function(Vcc, Vservo, flags) {

    this._format = '<HHH';
    this._id = mavlink10.MAVLINK_MSG_ID_POWER_STATUS;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 203;
    this._name = 'POWER_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['Vcc', 'Vservo', 'flags'];


    this.set(arguments,true);

}

mavlink10.messages.power_status.prototype = new mavlink10.message;
mavlink10.messages.power_status.prototype.pack = function(mav) {
    var orderedfields = [ this.Vcc, this.Vservo, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control a serial port. This can be used for raw access to an onboard
serial peripheral such as a GPS or telemetry radio. It is designed to
make it possible to update the devices firmware via MAVLink messages
or change the devices settings. A message with zero bytes can be used
to change just the baudrate.

                device                    : Serial control device type. (uint8_t)
                flags                     : Bitmap of serial control flags. (uint8_t)
                timeout                   : Timeout for reply data (uint16_t)
                baudrate                  : Baudrate of transfer. Zero means no change. (uint32_t)
                count                     : how many bytes in this transfer (uint8_t)
                data                      : serial data (uint8_t)

*/
    mavlink10.messages.serial_control = function(device, flags, timeout, baudrate, count, data) {

    this._format = '<IHBBB70s';
    this._id = mavlink10.MAVLINK_MSG_ID_SERIAL_CONTROL;
    this.order_map = [2, 3, 1, 0, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 70];
    this.array_len_map = [0, 0, 0, 0, 0, 70];
    this.crc_extra = 220;
    this._name = 'SERIAL_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['device', 'flags', 'timeout', 'baudrate', 'count', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.serial_control.prototype = new mavlink10.message;
mavlink10.messages.serial_control.prototype.pack = function(mav) {
    var orderedfields = [ this.baudrate, this.timeout, this.device, this.flags, this.count, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTK GPS data. Gives information on the relative baseline calculation
the GPS is reporting

                time_last_baseline_ms        : Time since boot of last baseline message received. (uint32_t)
                rtk_receiver_id           : Identification of connected RTK receiver. (uint8_t)
                wn                        : GPS Week Number of last baseline (uint16_t)
                tow                       : GPS Time of Week of last baseline (uint32_t)
                rtk_health                : GPS-specific health report for RTK data. (uint8_t)
                rtk_rate                  : Rate of baseline messages being received by GPS (uint8_t)
                nsats                     : Current number of sats used for RTK calculation. (uint8_t)
                baseline_coords_type        : Coordinate system of baseline (uint8_t)
                baseline_a_mm             : Current baseline in ECEF x or NED north component. (int32_t)
                baseline_b_mm             : Current baseline in ECEF y or NED east component. (int32_t)
                baseline_c_mm             : Current baseline in ECEF z or NED down component. (int32_t)
                accuracy                  : Current estimate of baseline accuracy. (uint32_t)
                iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (int32_t)

*/
    mavlink10.messages.gps_rtk = function(time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses) {

    this._format = '<IIiiiIiHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_RTK;
    this.order_map = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 25;
    this._name = 'GPS_RTK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow', 'rtk_health', 'rtk_rate', 'nsats', 'baseline_coords_type', 'baseline_a_mm', 'baseline_b_mm', 'baseline_c_mm', 'accuracy', 'iar_num_hypotheses'];


    this.set(arguments,true);

}

mavlink10.messages.gps_rtk.prototype = new mavlink10.message;
mavlink10.messages.gps_rtk.prototype.pack = function(mav) {
    var orderedfields = [ this.time_last_baseline_ms, this.tow, this.baseline_a_mm, this.baseline_b_mm, this.baseline_c_mm, this.accuracy, this.iar_num_hypotheses, this.wn, this.rtk_receiver_id, this.rtk_health, this.rtk_rate, this.nsats, this.baseline_coords_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTK GPS data. Gives information on the relative baseline calculation
the GPS is reporting

                time_last_baseline_ms        : Time since boot of last baseline message received. (uint32_t)
                rtk_receiver_id           : Identification of connected RTK receiver. (uint8_t)
                wn                        : GPS Week Number of last baseline (uint16_t)
                tow                       : GPS Time of Week of last baseline (uint32_t)
                rtk_health                : GPS-specific health report for RTK data. (uint8_t)
                rtk_rate                  : Rate of baseline messages being received by GPS (uint8_t)
                nsats                     : Current number of sats used for RTK calculation. (uint8_t)
                baseline_coords_type        : Coordinate system of baseline (uint8_t)
                baseline_a_mm             : Current baseline in ECEF x or NED north component. (int32_t)
                baseline_b_mm             : Current baseline in ECEF y or NED east component. (int32_t)
                baseline_c_mm             : Current baseline in ECEF z or NED down component. (int32_t)
                accuracy                  : Current estimate of baseline accuracy. (uint32_t)
                iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (int32_t)

*/
    mavlink10.messages.gps2_rtk = function(time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses) {

    this._format = '<IIiiiIiHBBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS2_RTK;
    this.order_map = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 226;
    this._name = 'GPS2_RTK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow', 'rtk_health', 'rtk_rate', 'nsats', 'baseline_coords_type', 'baseline_a_mm', 'baseline_b_mm', 'baseline_c_mm', 'accuracy', 'iar_num_hypotheses'];


    this.set(arguments,true);

}

mavlink10.messages.gps2_rtk.prototype = new mavlink10.message;
mavlink10.messages.gps2_rtk.prototype.pack = function(mav) {
    var orderedfields = [ this.time_last_baseline_ms, this.tow, this.baseline_a_mm, this.baseline_b_mm, this.baseline_c_mm, this.accuracy, this.iar_num_hypotheses, this.wn, this.rtk_receiver_id, this.rtk_health, this.rtk_rate, this.nsats, this.baseline_coords_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for 3rd 9DOF sensor setup. This message should
contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)

*/
    mavlink10.messages.scaled_imu3 = function(time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this._format = '<Ihhhhhhhhh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_IMU3;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 46;
    this._name = 'SCALED_IMU3';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_imu3.prototype = new mavlink10.message;
mavlink10.messages.scaled_imu3.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Handshake message to initiate, control and stop image streaming when
using the Image Transmission Protocol:
https://mavlink.io/en/services/image_transmission.html.

                type                      : Type of requested/acknowledged data. (uint8_t)
                size                      : total data size (set on ACK only). (uint32_t)
                width                     : Width of a matrix or image. (uint16_t)
                height                    : Height of a matrix or image. (uint16_t)
                packets                   : Number of packets being sent (set on ACK only). (uint16_t)
                payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). (uint8_t)
                jpg_quality               : JPEG quality. Values: [1-100]. (uint8_t)

*/
    mavlink10.messages.data_transmission_handshake = function(type, size, width, height, packets, payload, jpg_quality) {

    this._format = '<IHHHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE;
    this.order_map = [4, 0, 1, 2, 3, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 29;
    this._name = 'DATA_TRANSMISSION_HANDSHAKE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'size', 'width', 'height', 'packets', 'payload', 'jpg_quality'];


    this.set(arguments,true);

}

mavlink10.messages.data_transmission_handshake.prototype = new mavlink10.message;
mavlink10.messages.data_transmission_handshake.prototype.pack = function(mav) {
    var orderedfields = [ this.size, this.width, this.height, this.packets, this.type, this.payload, this.jpg_quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet for images sent using the Image Transmission Protocol:
https://mavlink.io/en/services/image_transmission.html.

                seqnr                     : sequence number (starting with 0 on every transmission) (uint16_t)
                data                      : image data bytes (uint8_t)

*/
    mavlink10.messages.encapsulated_data = function(seqnr, data) {

    this._format = '<H253s';
    this._id = mavlink10.MAVLINK_MSG_ID_ENCAPSULATED_DATA;
    this.order_map = [0, 1];
    this.len_map = [1, 253];
    this.array_len_map = [0, 253];
    this.crc_extra = 223;
    this._name = 'ENCAPSULATED_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seqnr', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.encapsulated_data.prototype = new mavlink10.message;
mavlink10.messages.encapsulated_data.prototype.pack = function(mav) {
    var orderedfields = [ this.seqnr, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Distance sensor information for an onboard rangefinder.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                min_distance              : Minimum distance the sensor can measure (uint16_t)
                max_distance              : Maximum distance the sensor can measure (uint16_t)
                current_distance          : Current distance reading (uint16_t)
                type                      : Type of distance sensor. (uint8_t)
                id                        : Onboard ID of the sensor (uint8_t)
                orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (uint8_t)
                covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. (uint8_t)

*/
    mavlink10.messages.distance_sensor = function(time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance) {

    this._format = '<IHHHBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_DISTANCE_SENSOR;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 85;
    this._name = 'DISTANCE_SENSOR';

    this._instance_field = 'id';
    this._instance_offset = 11;

    this.fieldnames = ['time_boot_ms', 'min_distance', 'max_distance', 'current_distance', 'type', 'id', 'orientation', 'covariance'];


    this.set(arguments,true);

}

mavlink10.messages.distance_sensor.prototype = new mavlink10.message;
mavlink10.messages.distance_sensor.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.min_distance, this.max_distance, this.current_distance, this.type, this.id, this.orientation, this.covariance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request for terrain data and terrain status

                lat                       : Latitude of SW corner of first grid (int32_t)
                lon                       : Longitude of SW corner of first grid (int32_t)
                grid_spacing              : Grid spacing (uint16_t)
                mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (uint64_t)

*/
    mavlink10.messages.terrain_request = function(lat, lon, grid_spacing, mask) {

    this._format = '<QiiH';
    this._id = mavlink10.MAVLINK_MSG_ID_TERRAIN_REQUEST;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 6;
    this._name = 'TERRAIN_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'grid_spacing', 'mask'];


    this.set(arguments,true);

}

mavlink10.messages.terrain_request.prototype = new mavlink10.message;
mavlink10.messages.terrain_request.prototype.pack = function(mav) {
    var orderedfields = [ this.mask, this.lat, this.lon, this.grid_spacing];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Terrain data sent from GCS. The lat/lon and grid_spacing must be the
same as a lat/lon from a TERRAIN_REQUEST

                lat                       : Latitude of SW corner of first grid (int32_t)
                lon                       : Longitude of SW corner of first grid (int32_t)
                grid_spacing              : Grid spacing (uint16_t)
                gridbit                   : bit within the terrain request mask (uint8_t)
                data                      : Terrain data MSL (int16_t)

*/
    mavlink10.messages.terrain_data = function(lat, lon, grid_spacing, gridbit, data) {

    this._format = '<iiH16hB';
    this._id = mavlink10.MAVLINK_MSG_ID_TERRAIN_DATA;
    this.order_map = [0, 1, 2, 4, 3];
    this.len_map = [1, 1, 1, 16, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 229;
    this._name = 'TERRAIN_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'grid_spacing', 'gridbit', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.terrain_data.prototype = new mavlink10.message;
mavlink10.messages.terrain_data.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon, this.grid_spacing, this.data, this.gridbit];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request that the vehicle report terrain height at the given location.
Used by GCS to check if vehicle has all terrain data needed for a
mission.

                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)

*/
    mavlink10.messages.terrain_check = function(lat, lon) {

    this._format = '<ii';
    this._id = mavlink10.MAVLINK_MSG_ID_TERRAIN_CHECK;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 203;
    this._name = 'TERRAIN_CHECK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon'];


    this.set(arguments,true);

}

mavlink10.messages.terrain_check.prototype = new mavlink10.message;
mavlink10.messages.terrain_check.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Response from a TERRAIN_CHECK request

                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                spacing                   : grid spacing (zero if terrain at this location unavailable) (uint16_t)
                terrain_height            : Terrain height MSL (float)
                current_height            : Current vehicle height above lat/lon terrain height (float)
                pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (uint16_t)
                loaded                    : Number of 4x4 terrain blocks in memory (uint16_t)

*/
    mavlink10.messages.terrain_report = function(lat, lon, spacing, terrain_height, current_height, pending, loaded) {

    this._format = '<iiffHHH';
    this._id = mavlink10.MAVLINK_MSG_ID_TERRAIN_REPORT;
    this.order_map = [0, 1, 4, 2, 3, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 1;
    this._name = 'TERRAIN_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'spacing', 'terrain_height', 'current_height', 'pending', 'loaded'];


    this.set(arguments,true);

}

mavlink10.messages.terrain_report.prototype = new mavlink10.message;
mavlink10.messages.terrain_report.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon, this.terrain_height, this.current_height, this.spacing, this.pending, this.loaded];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Barometer readings for 2nd barometer

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure (float)
                temperature               : Absolute pressure temperature (int16_t)

*/
    mavlink10.messages.scaled_pressure2 = function(time_boot_ms, press_abs, press_diff, temperature) {

    this._format = '<Iffh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE2;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 195;
    this._name = 'SCALED_PRESSURE2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_pressure2.prototype = new mavlink10.message;
mavlink10.messages.scaled_pressure2.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Motion capture attitude and position

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                x                         : X position (NED) (float)
                y                         : Y position (NED) (float)
                z                         : Z position (NED) (float)

*/
    mavlink10.messages.att_pos_mocap = function(time_usec, q, x, y, z) {

    this._format = '<Q4ffff';
    this._id = mavlink10.MAVLINK_MSG_ID_ATT_POS_MOCAP;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 4, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0];
    this.crc_extra = 109;
    this._name = 'ATT_POS_MOCAP';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'q', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.att_pos_mocap.prototype = new mavlink10.message;
mavlink10.messages.att_pos_mocap.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.q, this.x, this.y, this.z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the vehicle attitude and body angular rates.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (uint8_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (float)

*/
    mavlink10.messages.set_actuator_control_target = function(time_usec, group_mlx, target_system, target_component, controls) {

    this._format = '<Q8fBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET;
    this.order_map = [0, 2, 3, 4, 1];
    this.len_map = [1, 8, 1, 1, 1];
    this.array_len_map = [0, 8, 0, 0, 0];
    this.crc_extra = 168;
    this._name = 'SET_ACTUATOR_CONTROL_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'group_mlx', 'target_system', 'target_component', 'controls'];


    this.set(arguments,true);

}

mavlink10.messages.set_actuator_control_target.prototype = new mavlink10.message;
mavlink10.messages.set_actuator_control_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.controls, this.group_mlx, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the vehicle attitude and body angular rates.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (uint8_t)
                controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (float)

*/
    mavlink10.messages.actuator_control_target = function(time_usec, group_mlx, controls) {

    this._format = '<Q8fB';
    this._id = mavlink10.MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 8, 1];
    this.array_len_map = [0, 8, 0];
    this.crc_extra = 181;
    this._name = 'ACTUATOR_CONTROL_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'group_mlx', 'controls'];


    this.set(arguments,true);

}

mavlink10.messages.actuator_control_target.prototype = new mavlink10.message;
mavlink10.messages.actuator_control_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.controls, this.group_mlx];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The current system altitude.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. (float)
                altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. (float)
                altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. (float)
                altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. (float)
                altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. (float)
                bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. (float)

*/
    mavlink10.messages.altitude = function(time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance) {

    this._format = '<Qffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_ALTITUDE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 47;
    this._name = 'ALTITUDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'altitude_monotonic', 'altitude_amsl', 'altitude_local', 'altitude_relative', 'altitude_terrain', 'bottom_clearance'];


    this.set(arguments,true);

}

mavlink10.messages.altitude.prototype = new mavlink10.message;
mavlink10.messages.altitude.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.altitude_monotonic, this.altitude_amsl, this.altitude_local, this.altitude_relative, this.altitude_terrain, this.bottom_clearance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The autopilot is requesting a resource (file, binary, other type of
data)

                request_id                : Request ID. This ID should be re-used when sending back URI contents (uint8_t)
                uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (uint8_t)
                uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (uint8_t)
                transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (uint8_t)
                storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (uint8_t)

*/
    mavlink10.messages.resource_request = function(request_id, uri_type, uri, transfer_type, storage) {

    this._format = '<BB120sB120s';
    this._id = mavlink10.MAVLINK_MSG_ID_RESOURCE_REQUEST;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 120, 1, 120];
    this.array_len_map = [0, 0, 120, 0, 120];
    this.crc_extra = 72;
    this._name = 'RESOURCE_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'uri_type', 'uri', 'transfer_type', 'storage'];


    this.set(arguments,true);

}

mavlink10.messages.resource_request.prototype = new mavlink10.message;
mavlink10.messages.resource_request.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.uri_type, this.uri, this.transfer_type, this.storage];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Barometer readings for 3rd barometer

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure (float)
                temperature               : Absolute pressure temperature (int16_t)

*/
    mavlink10.messages.scaled_pressure3 = function(time_boot_ms, press_abs, press_diff, temperature) {

    this._format = '<Iffh';
    this._id = mavlink10.MAVLINK_MSG_ID_SCALED_PRESSURE3;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 131;
    this._name = 'SCALED_PRESSURE3';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'];


    this.set(arguments,true);

}

mavlink10.messages.scaled_pressure3.prototype = new mavlink10.message;
mavlink10.messages.scaled_pressure3.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Current motion information from a designated system

                timestamp                 : Timestamp (time since system boot). (uint64_t)
                est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL) (float)
                vel                       : target velocity (0,0,0) for unknown (float)
                acc                       : linear target acceleration (0,0,0) for unknown (float)
                attitude_q                : (1 0 0 0 for unknown) (float)
                rates                     : (0 0 0 for unknown) (float)
                position_cov              : eph epv (float)
                custom_state              : button states or switches of a tracker device (uint64_t)

*/
    mavlink10.messages.follow_target = function(timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state) {

    this._format = '<QQiif3f3f4f3f3fB';
    this._id = mavlink10.MAVLINK_MSG_ID_FOLLOW_TARGET;
    this.order_map = [0, 10, 2, 3, 4, 5, 6, 7, 8, 9, 1];
    this.len_map = [1, 1, 1, 1, 1, 3, 3, 4, 3, 3, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 3, 3, 4, 3, 3, 0];
    this.crc_extra = 127;
    this._name = 'FOLLOW_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['timestamp', 'est_capabilities', 'lat', 'lon', 'alt', 'vel', 'acc', 'attitude_q', 'rates', 'position_cov', 'custom_state'];


    this.set(arguments,true);

}

mavlink10.messages.follow_target.prototype = new mavlink10.message;
mavlink10.messages.follow_target.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.custom_state, this.lat, this.lon, this.alt, this.vel, this.acc, this.attitude_q, this.rates, this.position_cov, this.est_capabilities];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The smoothed, monotonic system state used to feed the control loops of
the system.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                x_acc                     : X acceleration in body frame (float)
                y_acc                     : Y acceleration in body frame (float)
                z_acc                     : Z acceleration in body frame (float)
                x_vel                     : X velocity in body frame (float)
                y_vel                     : Y velocity in body frame (float)
                z_vel                     : Z velocity in body frame (float)
                x_pos                     : X position in local frame (float)
                y_pos                     : Y position in local frame (float)
                z_pos                     : Z position in local frame (float)
                airspeed                  : Airspeed, set to -1 if unknown (float)
                vel_variance              : Variance of body velocity estimate (float)
                pos_variance              : Variance in local position (float)
                q                         : The attitude, represented as Quaternion (float)
                roll_rate                 : Angular rate in roll axis (float)
                pitch_rate                : Angular rate in pitch axis (float)
                yaw_rate                  : Angular rate in yaw axis (float)

*/
    mavlink10.messages.control_system_state = function(time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate) {

    this._format = '<Qffffffffff3f3f4ffff';
    this._id = mavlink10.MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0];
    this.crc_extra = 103;
    this._name = 'CONTROL_SYSTEM_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'x_acc', 'y_acc', 'z_acc', 'x_vel', 'y_vel', 'z_vel', 'x_pos', 'y_pos', 'z_pos', 'airspeed', 'vel_variance', 'pos_variance', 'q', 'roll_rate', 'pitch_rate', 'yaw_rate'];


    this.set(arguments,true);

}

mavlink10.messages.control_system_state.prototype = new mavlink10.message;
mavlink10.messages.control_system_state.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x_acc, this.y_acc, this.z_acc, this.x_vel, this.y_vel, this.z_vel, this.x_pos, this.y_pos, this.z_pos, this.airspeed, this.vel_variance, this.pos_variance, this.q, this.roll_rate, this.pitch_rate, this.yaw_rate];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Battery information

                id                        : Battery ID (uint8_t)
                battery_function          : Function of the battery (uint8_t)
                type                      : Type (chemistry) of the battery (uint8_t)
                temperature               : Temperature of the battery. INT16_MAX for unknown temperature. (int16_t)
                voltages                  : Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1). (uint16_t)
                current_battery           : Battery current, -1: autopilot does not measure the current (int16_t)
                current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate (int32_t)
                energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate (int32_t)
                battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. (int8_t)

*/
    mavlink10.messages.battery_status = function(id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining) {

    this._format = '<iih10HhBBBb';
    this._id = mavlink10.MAVLINK_MSG_ID_BATTERY_STATUS;
    this.order_map = [5, 6, 7, 2, 3, 4, 0, 1, 8];
    this.len_map = [1, 1, 1, 10, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 10, 0, 0, 0, 0, 0];
    this.crc_extra = 154;
    this._name = 'BATTERY_STATUS';

    this._instance_field = 'id';
    this._instance_offset = 32;

    this.fieldnames = ['id', 'battery_function', 'type', 'temperature', 'voltages', 'current_battery', 'current_consumed', 'energy_consumed', 'battery_remaining'];


    this.set(arguments,true);

}

mavlink10.messages.battery_status.prototype = new mavlink10.message;
mavlink10.messages.battery_status.prototype.pack = function(mav) {
    var orderedfields = [ this.current_consumed, this.energy_consumed, this.temperature, this.voltages, this.current_battery, this.id, this.battery_function, this.type, this.battery_remaining];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Version and capability of autopilot software. This should be emitted
in response to a MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.

                capabilities              : Bitmap of capabilities (uint64_t)
                flight_sw_version         : Firmware version number (uint32_t)
                middleware_sw_version        : Middleware version number (uint32_t)
                os_sw_version             : Operating system version number (uint32_t)
                board_version             : HW / board version (last 8 bytes should be silicon ID, if any) (uint32_t)
                flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                vendor_id                 : ID of the board vendor (uint16_t)
                product_id                : ID of the product (uint16_t)
                uid                       : UID if provided by hardware (see uid2) (uint64_t)

*/
    mavlink10.messages.autopilot_version = function(capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid) {

    this._format = '<QQIIIIHH8s8s8s';
    this._id = mavlink10.MAVLINK_MSG_ID_AUTOPILOT_VERSION;
    this.order_map = [0, 2, 3, 4, 5, 8, 9, 10, 6, 7, 1];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8];
    this.crc_extra = 178;
    this._name = 'AUTOPILOT_VERSION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['capabilities', 'flight_sw_version', 'middleware_sw_version', 'os_sw_version', 'board_version', 'flight_custom_version', 'middleware_custom_version', 'os_custom_version', 'vendor_id', 'product_id', 'uid'];


    this.set(arguments,true);

}

mavlink10.messages.autopilot_version.prototype = new mavlink10.message;
mavlink10.messages.autopilot_version.prototype.pack = function(mav) {
    var orderedfields = [ this.capabilities, this.uid, this.flight_sw_version, this.middleware_sw_version, this.os_sw_version, this.board_version, this.vendor_id, this.product_id, this.flight_custom_version, this.middleware_custom_version, this.os_custom_version];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The location of a landing target. See:
https://mavlink.io/en/services/landing_target.html

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                target_num                : The ID of the target if multiple targets are present (uint8_t)
                frame                     : Coordinate frame used for following fields. (uint8_t)
                angle_x                   : X-axis angular offset of the target from the center of the image (float)
                angle_y                   : Y-axis angular offset of the target from the center of the image (float)
                distance                  : Distance to the target from the vehicle (float)
                size_x                    : Size of target along x-axis (float)
                size_y                    : Size of target along y-axis (float)

*/
    mavlink10.messages.landing_target = function(time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y) {

    this._format = '<QfffffBB';
    this._id = mavlink10.MAVLINK_MSG_ID_LANDING_TARGET;
    this.order_map = [0, 6, 7, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 200;
    this._name = 'LANDING_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'target_num', 'frame', 'angle_x', 'angle_y', 'distance', 'size_x', 'size_y'];


    this.set(arguments,true);

}

mavlink10.messages.landing_target.prototype = new mavlink10.message;
mavlink10.messages.landing_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.angle_x, this.angle_y, this.distance, this.size_x, this.size_y, this.target_num, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of geo-fencing. Sent in extended status stream when fencing
enabled.

                breach_status             : Breach status (0 if currently inside fence, 1 if outside). (uint8_t)
                breach_count              : Number of fence breaches. (uint16_t)
                breach_type               : Last breach type. (uint8_t)
                breach_time               : Time (since boot) of last breach. (uint32_t)

*/
    mavlink10.messages.fence_status = function(breach_status, breach_count, breach_type, breach_time) {

    this._format = '<IHBB';
    this._id = mavlink10.MAVLINK_MSG_ID_FENCE_STATUS;
    this.order_map = [2, 1, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 189;
    this._name = 'FENCE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['breach_status', 'breach_count', 'breach_type', 'breach_time'];


    this.set(arguments,true);

}

mavlink10.messages.fence_status.prototype = new mavlink10.message;
mavlink10.messages.fence_status.prototype.pack = function(mav) {
    var orderedfields = [ this.breach_time, this.breach_count, this.breach_status, this.breach_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports results of completed compass calibration. Sent until
MAG_CAL_ACK received.

                compass_id                : Compass being calibrated. (uint8_t)
                cal_mask                  : Bitmask of compasses being calibrated. (uint8_t)
                cal_status                : Calibration Status. (uint8_t)
                autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (uint8_t)
                fitness                   : RMS milligauss residuals. (float)
                ofs_x                     : X offset. (float)
                ofs_y                     : Y offset. (float)
                ofs_z                     : Z offset. (float)
                diag_x                    : X diagonal (matrix 11). (float)
                diag_y                    : Y diagonal (matrix 22). (float)
                diag_z                    : Z diagonal (matrix 33). (float)
                offdiag_x                 : X off-diagonal (matrix 12 and 21). (float)
                offdiag_y                 : Y off-diagonal (matrix 13 and 31). (float)
                offdiag_z                 : Z off-diagonal (matrix 32 and 23). (float)

*/
    mavlink10.messages.mag_cal_report = function(compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z) {

    this._format = '<ffffffffffBBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_MAG_CAL_REPORT;
    this.order_map = [10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 36;
    this._name = 'MAG_CAL_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['compass_id', 'cal_mask', 'cal_status', 'autosaved', 'fitness', 'ofs_x', 'ofs_y', 'ofs_z', 'diag_x', 'diag_y', 'diag_z', 'offdiag_x', 'offdiag_y', 'offdiag_z'];


    this.set(arguments,true);

}

mavlink10.messages.mag_cal_report.prototype = new mavlink10.message;
mavlink10.messages.mag_cal_report.prototype.pack = function(mav) {
    var orderedfields = [ this.fitness, this.ofs_x, this.ofs_y, this.ofs_z, this.diag_x, this.diag_y, this.diag_z, this.offdiag_x, this.offdiag_y, this.offdiag_z, this.compass_id, this.cal_mask, this.cal_status, this.autosaved];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
EFI status output

                health                    : EFI health status (uint8_t)
                ecu_index                 : ECU index (float)
                rpm                       : RPM (float)
                fuel_consumed             : Fuel consumed (float)
                fuel_flow                 : Fuel flow rate (float)
                engine_load               : Engine load (float)
                throttle_position         : Throttle position (float)
                spark_dwell_time          : Spark dwell time (float)
                barometric_pressure        : Barometric pressure (float)
                intake_manifold_pressure        : Intake manifold pressure( (float)
                intake_manifold_temperature        : Intake manifold temperature (float)
                cylinder_head_temperature        : Cylinder head temperature (float)
                ignition_timing           : Ignition timing (Crank angle degrees) (float)
                injection_time            : Injection time (float)
                exhaust_gas_temperature        : Exhaust gas temperature (float)
                throttle_out              : Output throttle (float)
                pt_compensation           : Pressure/temperature compensation (float)

*/
    mavlink10.messages.efi_status = function(health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time, exhaust_gas_temperature, throttle_out, pt_compensation) {

    this._format = '<ffffffffffffffffB';
    this._id = mavlink10.MAVLINK_MSG_ID_EFI_STATUS;
    this.order_map = [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 208;
    this._name = 'EFI_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['health', 'ecu_index', 'rpm', 'fuel_consumed', 'fuel_flow', 'engine_load', 'throttle_position', 'spark_dwell_time', 'barometric_pressure', 'intake_manifold_pressure', 'intake_manifold_temperature', 'cylinder_head_temperature', 'ignition_timing', 'injection_time', 'exhaust_gas_temperature', 'throttle_out', 'pt_compensation'];


    this.set(arguments,true);

}

mavlink10.messages.efi_status.prototype = new mavlink10.message;
mavlink10.messages.efi_status.prototype.pack = function(mav) {
    var orderedfields = [ this.ecu_index, this.rpm, this.fuel_consumed, this.fuel_flow, this.engine_load, this.throttle_position, this.spark_dwell_time, this.barometric_pressure, this.intake_manifold_pressure, this.intake_manifold_temperature, this.cylinder_head_temperature, this.ignition_timing, this.injection_time, this.exhaust_gas_temperature, this.throttle_out, this.pt_compensation, this.health];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Estimator status message including flags, innovation test ratios and
estimated accuracies. The flags message is an integer bitmask
containing information on which EKF outputs are valid. See the
ESTIMATOR_STATUS_FLAGS enum definition for further information. The
innovation test ratios show the magnitude of the sensor innovation
divided by the innovation check threshold. Under normal operation the
innovation test ratios should be below 0.5 with occasional values up
to 1.0. Values greater than 1.0 should be rare under normal operation
and indicate that a measurement has been rejected by the filter. The
user should be notified if an innovation test ratio greater than 1.0
is recorded. Notifications for values in the range between 0.5 and 1.0
should be optional and controllable by the user.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                flags                     : Bitmap indicating which EKF outputs are valid. (uint16_t)
                vel_ratio                 : Velocity innovation test ratio (float)
                pos_horiz_ratio           : Horizontal position innovation test ratio (float)
                pos_vert_ratio            : Vertical position innovation test ratio (float)
                mag_ratio                 : Magnetometer innovation test ratio (float)
                hagl_ratio                : Height above terrain innovation test ratio (float)
                tas_ratio                 : True airspeed innovation test ratio (float)
                pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin (float)
                pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin (float)

*/
    mavlink10.messages.estimator_status = function(time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy) {

    this._format = '<QffffffffH';
    this._id = mavlink10.MAVLINK_MSG_ID_ESTIMATOR_STATUS;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 163;
    this._name = 'ESTIMATOR_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'flags', 'vel_ratio', 'pos_horiz_ratio', 'pos_vert_ratio', 'mag_ratio', 'hagl_ratio', 'tas_ratio', 'pos_horiz_accuracy', 'pos_vert_accuracy'];


    this.set(arguments,true);

}

mavlink10.messages.estimator_status.prototype = new mavlink10.message;
mavlink10.messages.estimator_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.vel_ratio, this.pos_horiz_ratio, this.pos_vert_ratio, this.mag_ratio, this.hagl_ratio, this.tas_ratio, this.pos_horiz_accuracy, this.pos_vert_accuracy, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Wind covariance estimate from vehicle.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                wind_x                    : Wind in X (NED) direction (float)
                wind_y                    : Wind in Y (NED) direction (float)
                wind_z                    : Wind in Z (NED) direction (float)
                var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. (float)
                var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. (float)
                wind_alt                  : Altitude (MSL) that this measurement was taken at (float)
                horiz_accuracy            : Horizontal speed 1-STD accuracy (float)
                vert_accuracy             : Vertical speed 1-STD accuracy (float)

*/
    mavlink10.messages.wind_cov = function(time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy) {

    this._format = '<Qffffffff';
    this._id = mavlink10.MAVLINK_MSG_ID_WIND_COV;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 105;
    this._name = 'WIND_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'wind_x', 'wind_y', 'wind_z', 'var_horiz', 'var_vert', 'wind_alt', 'horiz_accuracy', 'vert_accuracy'];


    this.set(arguments,true);

}

mavlink10.messages.wind_cov.prototype = new mavlink10.message;
mavlink10.messages.wind_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.wind_x, this.wind_y, this.wind_z, this.var_horiz, this.var_vert, this.wind_alt, this.horiz_accuracy, this.vert_accuracy];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
GPS sensor input message.  This is a raw sensor value sent by the GPS.
This is NOT the global position estimate of the system.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                gps_id                    : ID of the GPS for multiple GPS inputs (uint8_t)
                ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (uint16_t)
                time_week_ms              : GPS time (from start of GPS week) (uint32_t)
                time_week                 : GPS week number (uint16_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (float)
                hdop                      : GPS HDOP horizontal dilution of position (float)
                vdop                      : GPS VDOP vertical dilution of position (float)
                vn                        : GPS velocity in north direction in earth-fixed NED frame (float)
                ve                        : GPS velocity in east direction in earth-fixed NED frame (float)
                vd                        : GPS velocity in down direction in earth-fixed NED frame (float)
                speed_accuracy            : GPS speed accuracy (float)
                horiz_accuracy            : GPS horizontal accuracy (float)
                vert_accuracy             : GPS vertical accuracy (float)
                satellites_visible        : Number of satellites visible. (uint8_t)

*/
    mavlink10.messages.gps_input = function(time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible) {

    this._format = '<QIiifffffffffHHBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_INPUT;
    this.order_map = [0, 15, 13, 1, 14, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 151;
    this._name = 'GPS_INPUT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'gps_id', 'ignore_flags', 'time_week_ms', 'time_week', 'fix_type', 'lat', 'lon', 'alt', 'hdop', 'vdop', 'vn', 've', 'vd', 'speed_accuracy', 'horiz_accuracy', 'vert_accuracy', 'satellites_visible'];


    this.set(arguments,true);

}

mavlink10.messages.gps_input.prototype = new mavlink10.message;
mavlink10.messages.gps_input.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.time_week_ms, this.lat, this.lon, this.alt, this.hdop, this.vdop, this.vn, this.ve, this.vd, this.speed_accuracy, this.horiz_accuracy, this.vert_accuracy, this.ignore_flags, this.time_week, this.gps_id, this.fix_type, this.satellites_visible];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTCM message for injecting into the onboard GPS (used for DGPS)

                flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (uint8_t)
                len                       : data length (uint8_t)
                data                      : RTCM message (may be fragmented) (uint8_t)

*/
    mavlink10.messages.gps_rtcm_data = function(flags, len, data) {

    this._format = '<BB180s';
    this._id = mavlink10.MAVLINK_MSG_ID_GPS_RTCM_DATA;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 180];
    this.array_len_map = [0, 0, 180];
    this.crc_extra = 35;
    this._name = 'GPS_RTCM_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['flags', 'len', 'data'];


    this.set(arguments,true);

}

mavlink10.messages.gps_rtcm_data.prototype = new mavlink10.message;
mavlink10.messages.gps_rtcm_data.prototype.pack = function(mav) {
    var orderedfields = [ this.flags, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message appropriate for high latency connections like Iridium

                base_mode                 : Bitmap of enabled system modes. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags. (uint32_t)
                landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (uint8_t)
                roll                      : roll (int16_t)
                pitch                     : pitch (int16_t)
                heading                   : heading (uint16_t)
                throttle                  : throttle (percentage) (int8_t)
                heading_sp                : heading setpoint (int16_t)
                latitude                  : Latitude (int32_t)
                longitude                 : Longitude (int32_t)
                altitude_amsl             : Altitude above mean sea level (int16_t)
                altitude_sp               : Altitude setpoint relative to the home position (int16_t)
                airspeed                  : airspeed (uint8_t)
                airspeed_sp               : airspeed setpoint (uint8_t)
                groundspeed               : groundspeed (uint8_t)
                climb_rate                : climb rate (int8_t)
                gps_nsat                  : Number of satellites visible. If unknown, set to 255 (uint8_t)
                gps_fix_type              : GPS Fix type. (uint8_t)
                battery_remaining         : Remaining battery (percentage) (uint8_t)
                temperature               : Autopilot temperature (degrees C) (int8_t)
                temperature_air           : Air temperature (degrees C) from airspeed sensor (int8_t)
                failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (uint8_t)
                wp_num                    : current waypoint number (uint8_t)
                wp_distance               : distance to target (uint16_t)

*/
    mavlink10.messages.high_latency = function(base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance) {

    this._format = '<IiihhHhhhHBBbBBBbBBBbbBB';
    this._id = mavlink10.MAVLINK_MSG_ID_HIGH_LATENCY;
    this.order_map = [10, 0, 11, 3, 4, 5, 12, 6, 1, 2, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 150;
    this._name = 'HIGH_LATENCY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['base_mode', 'custom_mode', 'landed_state', 'roll', 'pitch', 'heading', 'throttle', 'heading_sp', 'latitude', 'longitude', 'altitude_amsl', 'altitude_sp', 'airspeed', 'airspeed_sp', 'groundspeed', 'climb_rate', 'gps_nsat', 'gps_fix_type', 'battery_remaining', 'temperature', 'temperature_air', 'failsafe', 'wp_num', 'wp_distance'];


    this.set(arguments,true);

}

mavlink10.messages.high_latency.prototype = new mavlink10.message;
mavlink10.messages.high_latency.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.latitude, this.longitude, this.roll, this.pitch, this.heading, this.heading_sp, this.altitude_amsl, this.altitude_sp, this.wp_distance, this.base_mode, this.landed_state, this.throttle, this.airspeed, this.airspeed_sp, this.groundspeed, this.climb_rate, this.gps_nsat, this.gps_fix_type, this.battery_remaining, this.temperature, this.temperature_air, this.failsafe, this.wp_num];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message appropriate for high latency connections like Iridium (version
2)

                timestamp                 : Timestamp (milliseconds since boot or Unix epoch) (uint32_t)
                type                      : Type of the MAV (quadrotor, helicopter, etc.) (uint8_t)
                autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags (2 byte version). (uint16_t)
                latitude                  : Latitude (int32_t)
                longitude                 : Longitude (int32_t)
                altitude                  : Altitude above mean sea level (int16_t)
                target_altitude           : Altitude setpoint (int16_t)
                heading                   : Heading (uint8_t)
                target_heading            : Heading setpoint (uint8_t)
                target_distance           : Distance to target waypoint or position (uint16_t)
                throttle                  : Throttle (uint8_t)
                airspeed                  : Airspeed (uint8_t)
                airspeed_sp               : Airspeed setpoint (uint8_t)
                groundspeed               : Groundspeed (uint8_t)
                windspeed                 : Windspeed (uint8_t)
                wind_heading              : Wind heading (uint8_t)
                eph                       : Maximum error horizontal position since last message (uint8_t)
                epv                       : Maximum error vertical position since last message (uint8_t)
                temperature_air           : Air temperature from airspeed sensor (int8_t)
                climb_rate                : Maximum climb rate magnitude since last message (int8_t)
                battery                   : Battery level (-1 if field not provided). (int8_t)
                wp_num                    : Current waypoint number (uint16_t)
                failure_flags             : Bitmap of failure flags. (uint16_t)
                custom0                   : Field for custom payload. (int8_t)
                custom1                   : Field for custom payload. (int8_t)
                custom2                   : Field for custom payload. (int8_t)

*/
    mavlink10.messages.high_latency2 = function(timestamp, type, autopilot, custom_mode, latitude, longitude, altitude, target_altitude, heading, target_heading, target_distance, throttle, airspeed, airspeed_sp, groundspeed, windspeed, wind_heading, eph, epv, temperature_air, climb_rate, battery, wp_num, failure_flags, custom0, custom1, custom2) {

    this._format = '<IiiHhhHHHBBBBBBBBBBBBbbbbbb';
    this._id = mavlink10.MAVLINK_MSG_ID_HIGH_LATENCY2;
    this.order_map = [0, 9, 10, 3, 1, 2, 4, 5, 11, 12, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 8, 24, 25, 26];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 179;
    this._name = 'HIGH_LATENCY2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['timestamp', 'type', 'autopilot', 'custom_mode', 'latitude', 'longitude', 'altitude', 'target_altitude', 'heading', 'target_heading', 'target_distance', 'throttle', 'airspeed', 'airspeed_sp', 'groundspeed', 'windspeed', 'wind_heading', 'eph', 'epv', 'temperature_air', 'climb_rate', 'battery', 'wp_num', 'failure_flags', 'custom0', 'custom1', 'custom2'];


    this.set(arguments,true);

}

mavlink10.messages.high_latency2.prototype = new mavlink10.message;
mavlink10.messages.high_latency2.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.latitude, this.longitude, this.custom_mode, this.altitude, this.target_altitude, this.target_distance, this.wp_num, this.failure_flags, this.type, this.autopilot, this.heading, this.target_heading, this.throttle, this.airspeed, this.airspeed_sp, this.groundspeed, this.windspeed, this.wind_heading, this.eph, this.epv, this.temperature_air, this.climb_rate, this.battery, this.custom0, this.custom1, this.custom2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Vibration levels and accelerometer clipping

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                vibration_x               : Vibration levels on X-axis (float)
                vibration_y               : Vibration levels on Y-axis (float)
                vibration_z               : Vibration levels on Z-axis (float)
                clipping_0                : first accelerometer clipping count (uint32_t)
                clipping_1                : second accelerometer clipping count (uint32_t)
                clipping_2                : third accelerometer clipping count (uint32_t)

*/
    mavlink10.messages.vibration = function(time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2) {

    this._format = '<QfffIII';
    this._id = mavlink10.MAVLINK_MSG_ID_VIBRATION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 90;
    this._name = 'VIBRATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'vibration_x', 'vibration_y', 'vibration_z', 'clipping_0', 'clipping_1', 'clipping_2'];


    this.set(arguments,true);

}

mavlink10.messages.vibration.prototype = new mavlink10.message;
mavlink10.messages.vibration.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.vibration_x, this.vibration_y, this.vibration_z, this.clipping_0, this.clipping_1, this.clipping_2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
command. The position the system will return to and land on. The
position is set automatically by the system during the takeoff in case
it was not explicitly set by the operator before or after. The global
and local positions encode the position in the respective coordinate
frames, while the q parameter encodes the orientation of the surface.
Under normal conditions it describes the heading and terrain slope,
which can be used by the aircraft to adjust the approach. The approach
3D vector describes the point to which the system should fly in normal
flight mode and then perform a landing sequence along the vector.

                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                x                         : Local X position of this position in the local coordinate frame (float)
                y                         : Local Y position of this position in the local coordinate frame (float)
                z                         : Local Z position of this position in the local coordinate frame (float)
                q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (float)
                approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)

*/
    mavlink10.messages.home_position = function(latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z) {

    this._format = '<iiifff4ffff';
    this._id = mavlink10.MAVLINK_MSG_ID_HOME_POSITION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0];
    this.crc_extra = 104;
    this._name = 'HOME_POSITION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['latitude', 'longitude', 'altitude', 'x', 'y', 'z', 'q', 'approach_x', 'approach_y', 'approach_z'];


    this.set(arguments,true);

}

mavlink10.messages.home_position.prototype = new mavlink10.message;
mavlink10.messages.home_position.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.x, this.y, this.z, this.q, this.approach_x, this.approach_y, this.approach_z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The position the system will return to and land on. The position is
set automatically by the system during the takeoff in case it was not
explicitly set by the operator before or after. The global and local
positions encode the position in the respective coordinate frames,
while the q parameter encodes the orientation of the surface. Under
normal conditions it describes the heading and terrain slope, which
can be used by the aircraft to adjust the approach. The approach 3D
vector describes the point to which the system should fly in normal
flight mode and then perform a landing sequence along the vector.

                target_system             : System ID. (uint8_t)
                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                x                         : Local X position of this position in the local coordinate frame (float)
                y                         : Local Y position of this position in the local coordinate frame (float)
                z                         : Local Z position of this position in the local coordinate frame (float)
                q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (float)
                approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)

*/
    mavlink10.messages.set_home_position = function(target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z) {

    this._format = '<iiifff4ffffB';
    this._id = mavlink10.MAVLINK_MSG_ID_SET_HOME_POSITION;
    this.order_map = [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0];
    this.crc_extra = 85;
    this._name = 'SET_HOME_POSITION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'latitude', 'longitude', 'altitude', 'x', 'y', 'z', 'q', 'approach_x', 'approach_y', 'approach_z'];


    this.set(arguments,true);

}

mavlink10.messages.set_home_position.prototype = new mavlink10.message;
mavlink10.messages.set_home_position.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.x, this.y, this.z, this.q, this.approach_x, this.approach_y, this.approach_z, this.target_system];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The interval between messages for a particular MAVLink message ID.
This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL
command. This interface replaces DATA_STREAM.

                message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (uint16_t)
                interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. (int32_t)

*/
    mavlink10.messages.message_interval = function(message_id, interval_us) {

    this._format = '<iH';
    this._id = mavlink10.MAVLINK_MSG_ID_MESSAGE_INTERVAL;
    this.order_map = [1, 0];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 95;
    this._name = 'MESSAGE_INTERVAL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['message_id', 'interval_us'];


    this.set(arguments,true);

}

mavlink10.messages.message_interval.prototype = new mavlink10.message;
mavlink10.messages.message_interval.prototype.pack = function(mav) {
    var orderedfields = [ this.interval_us, this.message_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Provides state for additional features

                vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (uint8_t)
                landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (uint8_t)

*/
    mavlink10.messages.extended_sys_state = function(vtol_state, landed_state) {

    this._format = '<BB';
    this._id = mavlink10.MAVLINK_MSG_ID_EXTENDED_SYS_STATE;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 130;
    this._name = 'EXTENDED_SYS_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['vtol_state', 'landed_state'];


    this.set(arguments,true);

}

mavlink10.messages.extended_sys_state.prototype = new mavlink10.message;
mavlink10.messages.extended_sys_state.prototype.pack = function(mav) {
    var orderedfields = [ this.vtol_state, this.landed_state];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The location and information of an ADSB vehicle

                ICAO_address              : ICAO address (uint32_t)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                altitude_type             : ADSB altitude type. (uint8_t)
                altitude                  : Altitude(ASL) (int32_t)
                heading                   : Course over ground (uint16_t)
                hor_velocity              : The horizontal velocity (uint16_t)
                ver_velocity              : The vertical velocity. Positive is up (int16_t)
                callsign                  : The callsign, 8+null (char)
                emitter_type              : ADSB emitter type. (uint8_t)
                tslc                      : Time since last communication in seconds (uint8_t)
                flags                     : Bitmap to indicate various statuses including valid data fields (uint16_t)
                squawk                    : Squawk code (uint16_t)

*/
    mavlink10.messages.adsb_vehicle = function(ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk) {

    this._format = '<IiiiHHhHHB9sBB';
    this._id = mavlink10.MAVLINK_MSG_ID_ADSB_VEHICLE;
    this.order_map = [0, 1, 2, 9, 3, 4, 5, 6, 10, 11, 12, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0];
    this.crc_extra = 184;
    this._name = 'ADSB_VEHICLE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['ICAO_address', 'lat', 'lon', 'altitude_type', 'altitude', 'heading', 'hor_velocity', 'ver_velocity', 'callsign', 'emitter_type', 'tslc', 'flags', 'squawk'];


    this.set(arguments,true);

}

mavlink10.messages.adsb_vehicle.prototype = new mavlink10.message;
mavlink10.messages.adsb_vehicle.prototype.pack = function(mav) {
    var orderedfields = [ this.ICAO_address, this.lat, this.lon, this.altitude, this.heading, this.hor_velocity, this.ver_velocity, this.flags, this.squawk, this.altitude_type, this.callsign, this.emitter_type, this.tslc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a potential collision

                src                       : Collision data source (uint8_t)
                id                        : Unique identifier, domain based on src field (uint32_t)
                action                    : Action that is being taken to avoid this collision (uint8_t)
                threat_level              : How concerned the aircraft is about this collision (uint8_t)
                time_to_minimum_delta        : Estimated time until collision occurs (float)
                altitude_minimum_delta        : Closest vertical distance between vehicle and object (float)
                horizontal_minimum_delta        : Closest horizontal distance between vehicle and object (float)

*/
    mavlink10.messages.collision = function(src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta) {

    this._format = '<IfffBBB';
    this._id = mavlink10.MAVLINK_MSG_ID_COLLISION;
    this.order_map = [4, 0, 5, 6, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 81;
    this._name = 'COLLISION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['src', 'id', 'action', 'threat_level', 'time_to_minimum_delta', 'altitude_minimum_delta', 'horizontal_minimum_delta'];


    this.set(arguments,true);

}

mavlink10.messages.collision.prototype = new mavlink10.message;
mavlink10.messages.collision.prototype.pack = function(mav) {
    var orderedfields = [ this.id, this.time_to_minimum_delta, this.altitude_minimum_delta, this.horizontal_minimum_delta, this.src, this.action, this.threat_level];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message implementing parts of the V2 payload specs in V1 frames for
transitional support.

                target_network            : Network ID (0 for broadcast) (uint8_t)
                target_system             : System ID (0 for broadcast) (uint8_t)
                target_component          : Component ID (0 for broadcast) (uint8_t)
                message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (uint16_t)
                payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (uint8_t)

*/
    mavlink10.messages.v2_extension = function(target_network, target_system, target_component, message_type, payload) {

    this._format = '<HBBB249s';
    this._id = mavlink10.MAVLINK_MSG_ID_V2_EXTENSION;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 249];
    this.array_len_map = [0, 0, 0, 0, 249];
    this.crc_extra = 8;
    this._name = 'V2_EXTENSION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_network', 'target_system', 'target_component', 'message_type', 'payload'];


    this.set(arguments,true);

}

mavlink10.messages.v2_extension.prototype = new mavlink10.message;
mavlink10.messages.v2_extension.prototype.pack = function(mav) {
    var orderedfields = [ this.message_type, this.target_network, this.target_system, this.target_component, this.payload];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send raw controller memory. The use of this message is discouraged for
normal packets, but a quite efficient way for testing new messages and
getting experimental debug output.

                address                   : Starting address of the debug variables (uint16_t)
                ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (uint8_t)
                type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (uint8_t)
                value                     : Memory contents at specified address (int8_t)

*/
    mavlink10.messages.memory_vect = function(address, ver, type, value) {

    this._format = '<HBB32s';
    this._id = mavlink10.MAVLINK_MSG_ID_MEMORY_VECT;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 32];
    this.array_len_map = [0, 0, 0, 32];
    this.crc_extra = 204;
    this._name = 'MEMORY_VECT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['address', 'ver', 'type', 'value'];


    this.set(arguments,true);

}

mavlink10.messages.memory_vect.prototype = new mavlink10.message;
mavlink10.messages.memory_vect.prototype.pack = function(mav) {
    var orderedfields = [ this.address, this.ver, this.type, this.value];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
To debug something using a named 3D vector.

                name                      : Name (char)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                x                         : x (float)
                y                         : y (float)
                z                         : z (float)

*/
    mavlink10.messages.debug_vect = function(name, time_usec, x, y, z) {

    this._format = '<Qfff10s';
    this._id = mavlink10.MAVLINK_MSG_ID_DEBUG_VECT;
    this.order_map = [4, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 10];
    this.crc_extra = 49;
    this._name = 'DEBUG_VECT';

    this._instance_field = 'name';
    this._instance_offset = 20;

    this.fieldnames = ['name', 'time_usec', 'x', 'y', 'z'];


    this.set(arguments,true);

}

mavlink10.messages.debug_vect.prototype = new mavlink10.message;
mavlink10.messages.debug_vect.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x, this.y, this.z, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a key-value pair as float. The use of this message is discouraged
for normal packets, but a quite efficient way for testing new messages
and getting experimental debug output.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Floating point value (float)

*/
    mavlink10.messages.named_value_float = function(time_boot_ms, name, value) {

    this._format = '<If10s';
    this._id = mavlink10.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 10];
    this.crc_extra = 170;
    this._name = 'NAMED_VALUE_FLOAT';

    this._instance_field = 'name';
    this._instance_offset = 8;

    this.fieldnames = ['time_boot_ms', 'name', 'value'];


    this.set(arguments,true);

}

mavlink10.messages.named_value_float.prototype = new mavlink10.message;
mavlink10.messages.named_value_float.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a key-value pair as integer. The use of this message is
discouraged for normal packets, but a quite efficient way for testing
new messages and getting experimental debug output.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Signed integer value (int32_t)

*/
    mavlink10.messages.named_value_int = function(time_boot_ms, name, value) {

    this._format = '<Ii10s';
    this._id = mavlink10.MAVLINK_MSG_ID_NAMED_VALUE_INT;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 10];
    this.crc_extra = 44;
    this._name = 'NAMED_VALUE_INT';

    this._instance_field = 'name';
    this._instance_offset = 8;

    this.fieldnames = ['time_boot_ms', 'name', 'value'];


    this.set(arguments,true);

}

mavlink10.messages.named_value_int.prototype = new mavlink10.message;
mavlink10.messages.named_value_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status text message. These messages are printed in yellow in the COMM
console of QGroundControl. WARNING: They consume quite some bandwidth,
so use only for important status and error messages. If implemented
wisely, these messages are buffered on the MCU and sent only at a
limited rate (e.g. 10 Hz).

                severity                  : Severity of status. Relies on the definitions within RFC-5424. (uint8_t)
                text                      : Status text message, without null termination character (char)

*/
    mavlink10.messages.statustext = function(severity, text) {

    this._format = '<B50s';
    this._id = mavlink10.MAVLINK_MSG_ID_STATUSTEXT;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 50];
    this.crc_extra = 83;
    this._name = 'STATUSTEXT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['severity', 'text'];


    this.set(arguments,true);

}

mavlink10.messages.statustext.prototype = new mavlink10.message;
mavlink10.messages.statustext.prototype.pack = function(mav) {
    var orderedfields = [ this.severity, this.text];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a debug value. The index is used to discriminate between values.
These values show up in the plot of QGroundControl as DEBUG N.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                ind                       : index of debug variable (uint8_t)
                value                     : DEBUG value (float)

*/
    mavlink10.messages.debug = function(time_boot_ms, ind, value) {

    this._format = '<IfB';
    this._id = mavlink10.MAVLINK_MSG_ID_DEBUG;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 46;
    this._name = 'DEBUG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'ind', 'value'];


    this.set(arguments,true);

}

mavlink10.messages.debug.prototype = new mavlink10.message;
mavlink10.messages.debug.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.ind];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink10.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


mavlink10.map = {
        0: { format: '<IBBBBB', type: mavlink10.messages.heartbeat, order_map: [1, 2, 3, 0, 4, 5], crc_extra: 50 },
        1: { format: '<IIIHHhHHHHHHb', type: mavlink10.messages.sys_status, order_map: [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11], crc_extra: 124 },
        2: { format: '<QI', type: mavlink10.messages.system_time, order_map: [0, 1], crc_extra: 137 },
        4: { format: '<QIBB', type: mavlink10.messages.ping, order_map: [0, 1, 2, 3], crc_extra: 237 },
        5: { format: '<BBB25s', type: mavlink10.messages.change_operator_control, order_map: [0, 1, 2, 3], crc_extra: 217 },
        6: { format: '<BBB', type: mavlink10.messages.change_operator_control_ack, order_map: [0, 1, 2], crc_extra: 104 },
        7: { format: '<32s', type: mavlink10.messages.auth_key, order_map: [0], crc_extra: 119 },
        11: { format: '<IBB', type: mavlink10.messages.set_mode, order_map: [1, 2, 0], crc_extra: 89 },
        20: { format: '<hBB16s', type: mavlink10.messages.param_request_read, order_map: [1, 2, 3, 0], crc_extra: 214 },
        21: { format: '<BB', type: mavlink10.messages.param_request_list, order_map: [0, 1], crc_extra: 159 },
        22: { format: '<fHH16sB', type: mavlink10.messages.param_value, order_map: [3, 0, 4, 1, 2], crc_extra: 220 },
        23: { format: '<fBB16sB', type: mavlink10.messages.param_set, order_map: [1, 2, 3, 0, 4], crc_extra: 168 },
        24: { format: '<QiiiHHHHBB', type: mavlink10.messages.gps_raw_int, order_map: [0, 8, 1, 2, 3, 4, 5, 6, 7, 9], crc_extra: 24 },
        25: { format: '<B20s20s20s20s20s', type: mavlink10.messages.gps_status, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 23 },
        26: { format: '<Ihhhhhhhhh', type: mavlink10.messages.scaled_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 170 },
        27: { format: '<Qhhhhhhhhh', type: mavlink10.messages.raw_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 144 },
        28: { format: '<Qhhhh', type: mavlink10.messages.raw_pressure, order_map: [0, 1, 2, 3, 4], crc_extra: 67 },
        29: { format: '<Iffh', type: mavlink10.messages.scaled_pressure, order_map: [0, 1, 2, 3], crc_extra: 115 },
        30: { format: '<Iffffff', type: mavlink10.messages.attitude, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 39 },
        31: { format: '<Ifffffff', type: mavlink10.messages.attitude_quaternion, order_map: [0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 246 },
        32: { format: '<Iffffff', type: mavlink10.messages.local_position_ned, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 185 },
        33: { format: '<IiiiihhhH', type: mavlink10.messages.global_position_int, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 104 },
        34: { format: '<IhhhhhhhhBB', type: mavlink10.messages.rc_channels_scaled, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 237 },
        35: { format: '<IHHHHHHHHBB', type: mavlink10.messages.rc_channels_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 244 },
        36: { format: '<IHHHHHHHHB', type: mavlink10.messages.servo_output_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 222 },
        37: { format: '<hhBB', type: mavlink10.messages.mission_request_partial_list, order_map: [2, 3, 0, 1], crc_extra: 212 },
        38: { format: '<hhBB', type: mavlink10.messages.mission_write_partial_list, order_map: [2, 3, 0, 1], crc_extra: 9 },
        39: { format: '<fffffffHHBBBBB', type: mavlink10.messages.mission_item, order_map: [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6], crc_extra: 254 },
        40: { format: '<HBB', type: mavlink10.messages.mission_request, order_map: [1, 2, 0], crc_extra: 230 },
        41: { format: '<HBB', type: mavlink10.messages.mission_set_current, order_map: [1, 2, 0], crc_extra: 28 },
        42: { format: '<H', type: mavlink10.messages.mission_current, order_map: [0], crc_extra: 28 },
        43: { format: '<BB', type: mavlink10.messages.mission_request_list, order_map: [0, 1], crc_extra: 132 },
        44: { format: '<HBB', type: mavlink10.messages.mission_count, order_map: [1, 2, 0], crc_extra: 221 },
        45: { format: '<BB', type: mavlink10.messages.mission_clear_all, order_map: [0, 1], crc_extra: 232 },
        46: { format: '<H', type: mavlink10.messages.mission_item_reached, order_map: [0], crc_extra: 11 },
        47: { format: '<BBB', type: mavlink10.messages.mission_ack, order_map: [0, 1, 2], crc_extra: 153 },
        48: { format: '<iiiB', type: mavlink10.messages.set_gps_global_origin, order_map: [3, 0, 1, 2], crc_extra: 41 },
        49: { format: '<iii', type: mavlink10.messages.gps_global_origin, order_map: [0, 1, 2], crc_extra: 39 },
        50: { format: '<ffffhBB16sB', type: mavlink10.messages.param_map_rc, order_map: [5, 6, 7, 4, 8, 0, 1, 2, 3], crc_extra: 78 },
        51: { format: '<HBB', type: mavlink10.messages.mission_request_int, order_map: [1, 2, 0], crc_extra: 196 },
        54: { format: '<ffffffBBB', type: mavlink10.messages.safety_set_allowed_area, order_map: [6, 7, 8, 0, 1, 2, 3, 4, 5], crc_extra: 15 },
        55: { format: '<ffffffB', type: mavlink10.messages.safety_allowed_area, order_map: [6, 0, 1, 2, 3, 4, 5], crc_extra: 3 },
        61: { format: '<Q4ffff9f', type: mavlink10.messages.attitude_quaternion_cov, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 167 },
        62: { format: '<fffffhhH', type: mavlink10.messages.nav_controller_output, order_map: [0, 1, 5, 6, 7, 2, 3, 4], crc_extra: 183 },
        63: { format: '<Qiiiifff36fB', type: mavlink10.messages.global_position_int_cov, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 119 },
        64: { format: '<Qfffffffff45fB', type: mavlink10.messages.local_position_ned_cov, order_map: [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 191 },
        65: { format: '<IHHHHHHHHHHHHHHHHHHBB', type: mavlink10.messages.rc_channels, order_map: [0, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], crc_extra: 118 },
        66: { format: '<HBBBB', type: mavlink10.messages.request_data_stream, order_map: [1, 2, 3, 0, 4], crc_extra: 148 },
        67: { format: '<HBB', type: mavlink10.messages.data_stream, order_map: [1, 0, 2], crc_extra: 21 },
        69: { format: '<hhhhHB', type: mavlink10.messages.manual_control, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 243 },
        70: { format: '<HHHHHHHHBB', type: mavlink10.messages.rc_channels_override, order_map: [8, 9, 0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 124 },
        73: { format: '<ffffiifHHBBBBB', type: mavlink10.messages.mission_item_int, order_map: [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6], crc_extra: 38 },
        74: { format: '<ffffhH', type: mavlink10.messages.vfr_hud, order_map: [0, 1, 4, 5, 2, 3], crc_extra: 20 },
        75: { format: '<ffffiifHBBBBB', type: mavlink10.messages.command_int, order_map: [8, 9, 10, 7, 11, 12, 0, 1, 2, 3, 4, 5, 6], crc_extra: 158 },
        76: { format: '<fffffffHBBB', type: mavlink10.messages.command_long, order_map: [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6], crc_extra: 152 },
        77: { format: '<HB', type: mavlink10.messages.command_ack, order_map: [0, 1], crc_extra: 143 },
        81: { format: '<IffffBB', type: mavlink10.messages.manual_setpoint, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 106 },
        82: { format: '<I4fffffBBB', type: mavlink10.messages.set_attitude_target, order_map: [0, 6, 7, 8, 1, 2, 3, 4, 5], crc_extra: 49 },
        83: { format: '<I4fffffB', type: mavlink10.messages.attitude_target, order_map: [0, 6, 1, 2, 3, 4, 5], crc_extra: 22 },
        84: { format: '<IfffffffffffHBBB', type: mavlink10.messages.set_position_target_local_ned, order_map: [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 143 },
        85: { format: '<IfffffffffffHB', type: mavlink10.messages.position_target_local_ned, order_map: [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 140 },
        86: { format: '<IiifffffffffHBBB', type: mavlink10.messages.set_position_target_global_int, order_map: [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 5 },
        87: { format: '<IiifffffffffHB', type: mavlink10.messages.position_target_global_int, order_map: [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 150 },
        89: { format: '<Iffffff', type: mavlink10.messages.local_position_ned_system_global_offset, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 231 },
        90: { format: '<Qffffffiiihhhhhh', type: mavlink10.messages.hil_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 183 },
        91: { format: '<QffffffffBB', type: mavlink10.messages.hil_controls, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 63 },
        92: { format: '<QHHHHHHHHHHHHB', type: mavlink10.messages.hil_rc_inputs_raw, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], crc_extra: 54 },
        93: { format: '<QQ16fB', type: mavlink10.messages.hil_actuator_controls, order_map: [0, 2, 3, 1], crc_extra: 47 },
        100: { format: '<QfffhhBB', type: mavlink10.messages.optical_flow, order_map: [0, 6, 4, 5, 1, 2, 7, 3], crc_extra: 175 },
        101: { format: '<Qffffff', type: mavlink10.messages.global_vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 102 },
        102: { format: '<Qffffff', type: mavlink10.messages.vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 158 },
        103: { format: '<Qfff', type: mavlink10.messages.vision_speed_estimate, order_map: [0, 1, 2, 3], crc_extra: 208 },
        104: { format: '<Qffffff', type: mavlink10.messages.vicon_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 56 },
        105: { format: '<QfffffffffffffH', type: mavlink10.messages.highres_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], crc_extra: 93 },
        106: { format: '<QIfffffIfhBB', type: mavlink10.messages.optical_flow_rad, order_map: [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8], crc_extra: 138 },
        107: { format: '<QfffffffffffffI', type: mavlink10.messages.hil_sensor, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], crc_extra: 108 },
        108: { format: '<fffffffffffffffffffff', type: mavlink10.messages.sim_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], crc_extra: 32 },
        109: { format: '<HHBBBBB', type: mavlink10.messages.radio_status, order_map: [2, 3, 4, 5, 6, 0, 1], crc_extra: 185 },
        110: { format: '<BBB251s', type: mavlink10.messages.file_transfer_protocol, order_map: [0, 1, 2, 3], crc_extra: 84 },
        111: { format: '<qq', type: mavlink10.messages.timesync, order_map: [0, 1], crc_extra: 34 },
        112: { format: '<QI', type: mavlink10.messages.camera_trigger, order_map: [0, 1], crc_extra: 174 },
        113: { format: '<QiiiHHHhhhHBB', type: mavlink10.messages.hil_gps, order_map: [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], crc_extra: 124 },
        114: { format: '<QIfffffIfhBB', type: mavlink10.messages.hil_optical_flow, order_map: [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8], crc_extra: 237 },
        115: { format: '<Q4ffffiiihhhHHhhh', type: mavlink10.messages.hil_state_quaternion, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 4 },
        116: { format: '<Ihhhhhhhhh', type: mavlink10.messages.scaled_imu2, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 76 },
        117: { format: '<HHBB', type: mavlink10.messages.log_request_list, order_map: [2, 3, 0, 1], crc_extra: 128 },
        118: { format: '<IIHHH', type: mavlink10.messages.log_entry, order_map: [2, 3, 4, 0, 1], crc_extra: 56 },
        119: { format: '<IIHBB', type: mavlink10.messages.log_request_data, order_map: [3, 4, 2, 0, 1], crc_extra: 116 },
        120: { format: '<IHB90s', type: mavlink10.messages.log_data, order_map: [1, 0, 2, 3], crc_extra: 134 },
        121: { format: '<BB', type: mavlink10.messages.log_erase, order_map: [0, 1], crc_extra: 237 },
        122: { format: '<BB', type: mavlink10.messages.log_request_end, order_map: [0, 1], crc_extra: 203 },
        123: { format: '<BBB110s', type: mavlink10.messages.gps_inject_data, order_map: [0, 1, 2, 3], crc_extra: 250 },
        124: { format: '<QiiiIHHHHBBB', type: mavlink10.messages.gps2_raw, order_map: [0, 9, 1, 2, 3, 5, 6, 7, 8, 10, 11, 4], crc_extra: 87 },
        125: { format: '<HHH', type: mavlink10.messages.power_status, order_map: [0, 1, 2], crc_extra: 203 },
        126: { format: '<IHBBB70s', type: mavlink10.messages.serial_control, order_map: [2, 3, 1, 0, 4, 5], crc_extra: 220 },
        127: { format: '<IIiiiIiHBBBBB', type: mavlink10.messages.gps_rtk, order_map: [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6], crc_extra: 25 },
        128: { format: '<IIiiiIiHBBBBB', type: mavlink10.messages.gps2_rtk, order_map: [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6], crc_extra: 226 },
        129: { format: '<Ihhhhhhhhh', type: mavlink10.messages.scaled_imu3, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 46 },
        130: { format: '<IHHHBBB', type: mavlink10.messages.data_transmission_handshake, order_map: [4, 0, 1, 2, 3, 5, 6], crc_extra: 29 },
        131: { format: '<H253s', type: mavlink10.messages.encapsulated_data, order_map: [0, 1], crc_extra: 223 },
        132: { format: '<IHHHBBBB', type: mavlink10.messages.distance_sensor, order_map: [0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 85 },
        133: { format: '<QiiH', type: mavlink10.messages.terrain_request, order_map: [1, 2, 3, 0], crc_extra: 6 },
        134: { format: '<iiH16hB', type: mavlink10.messages.terrain_data, order_map: [0, 1, 2, 4, 3], crc_extra: 229 },
        135: { format: '<ii', type: mavlink10.messages.terrain_check, order_map: [0, 1], crc_extra: 203 },
        136: { format: '<iiffHHH', type: mavlink10.messages.terrain_report, order_map: [0, 1, 4, 2, 3, 5, 6], crc_extra: 1 },
        137: { format: '<Iffh', type: mavlink10.messages.scaled_pressure2, order_map: [0, 1, 2, 3], crc_extra: 195 },
        138: { format: '<Q4ffff', type: mavlink10.messages.att_pos_mocap, order_map: [0, 1, 2, 3, 4], crc_extra: 109 },
        139: { format: '<Q8fBBB', type: mavlink10.messages.set_actuator_control_target, order_map: [0, 2, 3, 4, 1], crc_extra: 168 },
        140: { format: '<Q8fB', type: mavlink10.messages.actuator_control_target, order_map: [0, 2, 1], crc_extra: 181 },
        141: { format: '<Qffffff', type: mavlink10.messages.altitude, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 47 },
        142: { format: '<BB120sB120s', type: mavlink10.messages.resource_request, order_map: [0, 1, 2, 3, 4], crc_extra: 72 },
        143: { format: '<Iffh', type: mavlink10.messages.scaled_pressure3, order_map: [0, 1, 2, 3], crc_extra: 131 },
        144: { format: '<QQiif3f3f4f3f3fB', type: mavlink10.messages.follow_target, order_map: [0, 10, 2, 3, 4, 5, 6, 7, 8, 9, 1], crc_extra: 127 },
        146: { format: '<Qffffffffff3f3f4ffff', type: mavlink10.messages.control_system_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], crc_extra: 103 },
        147: { format: '<iih10HhBBBb', type: mavlink10.messages.battery_status, order_map: [5, 6, 7, 2, 3, 4, 0, 1, 8], crc_extra: 154 },
        148: { format: '<QQIIIIHH8s8s8s', type: mavlink10.messages.autopilot_version, order_map: [0, 2, 3, 4, 5, 8, 9, 10, 6, 7, 1], crc_extra: 178 },
        149: { format: '<QfffffBB', type: mavlink10.messages.landing_target, order_map: [0, 6, 7, 1, 2, 3, 4, 5], crc_extra: 200 },
        162: { format: '<IHBB', type: mavlink10.messages.fence_status, order_map: [2, 1, 3, 0], crc_extra: 189 },
        192: { format: '<ffffffffffBBBB', type: mavlink10.messages.mag_cal_report, order_map: [10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 36 },
        225: { format: '<ffffffffffffffffB', type: mavlink10.messages.efi_status, order_map: [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 208 },
        230: { format: '<QffffffffH', type: mavlink10.messages.estimator_status, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 163 },
        231: { format: '<Qffffffff', type: mavlink10.messages.wind_cov, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 105 },
        232: { format: '<QIiifffffffffHHBBB', type: mavlink10.messages.gps_input, order_map: [0, 15, 13, 1, 14, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17], crc_extra: 151 },
        233: { format: '<BB180s', type: mavlink10.messages.gps_rtcm_data, order_map: [0, 1, 2], crc_extra: 35 },
        234: { format: '<IiihhHhhhHBBbBBBbBBBbbBB', type: mavlink10.messages.high_latency, order_map: [10, 0, 11, 3, 4, 5, 12, 6, 1, 2, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 9], crc_extra: 150 },
        235: { format: '<IiiHhhHHHBBBBBBBBBBBBbbbbbb', type: mavlink10.messages.high_latency2, order_map: [0, 9, 10, 3, 1, 2, 4, 5, 11, 12, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 8, 24, 25, 26], crc_extra: 179 },
        241: { format: '<QfffIII', type: mavlink10.messages.vibration, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 90 },
        242: { format: '<iiifff4ffff', type: mavlink10.messages.home_position, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 104 },
        243: { format: '<iiifff4ffffB', type: mavlink10.messages.set_home_position, order_map: [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 85 },
        244: { format: '<iH', type: mavlink10.messages.message_interval, order_map: [1, 0], crc_extra: 95 },
        245: { format: '<BB', type: mavlink10.messages.extended_sys_state, order_map: [0, 1], crc_extra: 130 },
        246: { format: '<IiiiHHhHHB9sBB', type: mavlink10.messages.adsb_vehicle, order_map: [0, 1, 2, 9, 3, 4, 5, 6, 10, 11, 12, 7, 8], crc_extra: 184 },
        247: { format: '<IfffBBB', type: mavlink10.messages.collision, order_map: [4, 0, 5, 6, 1, 2, 3], crc_extra: 81 },
        248: { format: '<HBBB249s', type: mavlink10.messages.v2_extension, order_map: [1, 2, 3, 0, 4], crc_extra: 8 },
        249: { format: '<HBB32s', type: mavlink10.messages.memory_vect, order_map: [0, 1, 2, 3], crc_extra: 204 },
        250: { format: '<Qfff10s', type: mavlink10.messages.debug_vect, order_map: [4, 0, 1, 2, 3], crc_extra: 49 },
        251: { format: '<If10s', type: mavlink10.messages.named_value_float, order_map: [0, 2, 1], crc_extra: 170 },
        252: { format: '<Ii10s', type: mavlink10.messages.named_value_int, order_map: [0, 2, 1], crc_extra: 44 },
        253: { format: '<B50s', type: mavlink10.messages.statustext, order_map: [0, 1], crc_extra: 83 },
        254: { format: '<IfB', type: mavlink10.messages.debug, order_map: [0, 2, 1], crc_extra: 46 },
}


// Special mavlink message to capture malformed data packets for debugging
mavlink10.messages.bad_data = function(data, reason) {
    this._id = mavlink10.MAVLINK_MSG_ID_BAD_DATA;
    this._data = data;
    this._reason = reason;
    this._msgbuf = data;
}
mavlink10.messages.bad_data.prototype = new mavlink10.message;

/* MAVLink protocol handling class */
MAVLink10Processor = function(logger, srcSystem, srcComponent) {

    this.logger = logger;

    this.seq = 0;
    this.buf = new Buffer.from([]);
    this.bufInError = new Buffer.from([]);
   
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent =  (typeof srcComponent === 'undefined') ? 0 : srcComponent;

    this.have_prefix_error = false;

    // The first packet we expect is a valid header, 6 bytes.
    this.protocol_marker = 254;   
    this.expected_length = mavlink10.HEADER_LEN;
    this.little_endian = true;

    this.crc_extra = true;
    this.sort_fields = true;
    this.total_packets_sent = 0;
    this.total_bytes_sent = 0;
    this.total_packets_received = 0;
    this.total_bytes_received = 0;
    this.total_receive_errors = 0;
    this.startup_time = Date.now();
    
}

// Implements EventEmitter
util.inherits(MAVLink10Processor, events.EventEmitter);

// If the logger exists, this function will add a message to it.
// Assumes the logger is a winston object.
MAVLink10Processor.prototype.log = function(message) {
    if(this.logger) {
        this.logger.info(message);
    }
}

MAVLink10Processor.prototype.log = function(level, message) {
    if(this.logger) {
        this.logger.log(level, message);
    }
}

MAVLink10Processor.prototype.send = function(mavmsg) {
    buf = mavmsg.pack(this);
    this.file.write(buf);
    this.seq = (this.seq + 1) % 256;
    this.total_packets_sent +=1;
    this.total_bytes_sent += buf.length;
}

// return number of bytes needed for next parsing stage
MAVLink10Processor.prototype.bytes_needed = function() {
    ret = this.expected_length - this.buf.length;
    return ( ret <= 0 ) ? 1 : ret;
}

// add data to the local buffer
MAVLink10Processor.prototype.pushBuffer = function(data) {
    if(data) {
        this.buf = Buffer.concat([this.buf, data]);
        this.total_bytes_received += data.length;
    }
}

// Decode prefix.  Elides the prefix.
MAVLink10Processor.prototype.parsePrefix = function() {

    // Test for a message prefix.
    if( this.buf.length >= 1 && this.buf[0] != this.protocol_marker ) {

        // Strip the offending initial byte and throw an error.
        var badPrefix = this.buf[0];
        this.bufInError = this.buf.slice(0,1);
        this.buf = this.buf.slice(1);
        this.expected_length = mavlink10.HEADER_LEN;

        // TODO: enable subsequent prefix error suppression if robust_parsing is implemented
        //if(!this.have_prefix_error) {
        //    this.have_prefix_error = true;
            throw new Error("Bad prefix ("+badPrefix+")");
        //}

    }
    //else if( this.buf.length >= 1 && this.buf[0] == this.protocol_marker ) {
    //    this.have_prefix_error = false;
    //}

}

// Determine the length.  Leaves buffer untouched.
MAVLink10Processor.prototype.parseLength = function() {
    
    if( this.buf.length >= 2 ) {
        var unpacked = jspack.Unpack('BB', this.buf.slice(0, 2));
        this.expected_length = unpacked[1] + mavlink10.HEADER_LEN + 2 // length of message + header + CRC
    }

}

// input some data bytes, possibly returning a new message
MAVLink10Processor.prototype.parseChar = function(c) {

    var m = null;

    try {

        this.pushBuffer(c);
        this.parsePrefix();
        this.parseLength();
        m = this.parsePayload();

    } catch(e) {

        this.log('error', e.message);
        this.total_receive_errors += 1;
        m = new mavlink10.messages.bad_data(this.bufInError, e.message);
        this.bufInError = new Buffer.from([]);
        
    }

    // emit a packet-specific message as well as a generic message, user/s can choose to use either or both of these.
    if(null != m) {
        this.emit(m._name, m);
        this.emit('message', m);
    }

    return m;

}

MAVLink10Processor.prototype.parsePayload = function() {

    var m = null;

    // If we have enough bytes to try and read it, read it.
    if( this.expected_length >= 8 && this.buf.length >= this.expected_length ) {

        // Slice off the expected packet length, reset expectation to be to find a header.
        var mbuf = this.buf.slice(0, this.expected_length);
        // TODO: slicing off the buffer should depend on the error produced by the decode() function
        // - if a message we find a well formed message, cut-off the expected_length
        // - if the message is not well formed (correct prefix by accident), cut-off 1 char only
        this.buf = this.buf.slice(this.expected_length);
        this.expected_length = 6;

        // w.info("Attempting to parse packet, message candidate buffer is ["+mbuf.toByteArray()+"]");

        try {
            m = this.decode(mbuf);
            this.total_packets_received += 1;
        }
        catch(e) {
            // Set buffer in question and re-throw to generic error handling
            this.bufInError = mbuf;
            throw e;
        }
    }

    return m;

}

// input some data bytes, possibly returning an array of new messages
MAVLink10Processor.prototype.parseBuffer = function(s) {
    
    // Get a message, if one is available in the stream.
    var m = this.parseChar(s);

    // No messages available, bail.
    if ( null === m ) {
        return null;
    }
    
    // While more valid messages can be read from the existing buffer, add
    // them to the array of new messages and return them.
    var ret = [m];
    while(true) {
        m = this.parseChar();
        if ( null === m ) {
            // No more messages left.
            return ret;
        }
        ret.push(m);
    }

}

/* decode a buffer as a MAVLink message */
MAVLink10Processor.prototype.decode = function(msgbuf) {

    var magic, incompat_flags, compat_flags, mlen, seq, srcSystem, srcComponent, unpacked, msgId;

    // decode the header
    try {
        unpacked = jspack.Unpack('cBBBBB', msgbuf.slice(0, 6));
        magic = unpacked[0];
        mlen = unpacked[1];
        seq = unpacked[2];
        srcSystem = unpacked[3];
        srcComponent = unpacked[4];
        msgId = unpacked[5];
        }
    catch(e) {
        throw new Error('Unable to unpack MAVLink header: ' + e.message);
    }

    if (magic.charCodeAt(0) != this.protocol_marker) {
        throw new Error("Invalid MAVLink prefix ("+magic.charCodeAt(0)+")");
    }

    if( mlen != msgbuf.length - (mavlink10.HEADER_LEN + 2)) {
        throw new Error("Invalid MAVLink message length.  Got " + (msgbuf.length - (mavlink10.HEADER_LEN + 2)) + " expected " + mlen + ", msgId=" + msgId);
    }

    if( false === _.has(mavlink10.map, msgId) ) {
        throw new Error("Unknown MAVLink message ID (" + msgId + ")");
    }

    // decode the payload
    // refs: (fmt, type, order_map, crc_extra) = mavlink10.map[msgId]
    var decoder = mavlink10.map[msgId];

    // decode the checksum
    try {
        var receivedChecksum = jspack.Unpack('<H', msgbuf.slice(msgbuf.length - 2));
    } catch (e) {
        throw new Error("Unable to unpack MAVLink CRC: " + e.message);
    }

    var messageChecksum = mavlink10.x25Crc(msgbuf.slice(1, msgbuf.length - 2));

    // Assuming using crc_extra = True.  See the message.prototype.pack() function.
    messageChecksum = mavlink10.x25Crc([decoder.crc_extra], messageChecksum);
    
    if ( receivedChecksum != messageChecksum ) {
        throw new Error('invalid MAVLink CRC in msgID ' +msgId+ ', got 0x' + receivedChecksum + ' checksum, calculated payload checkum as 0x'+messageChecksum );
    }

    var paylen = jspack.CalcLength(decoder.format);
    var payload = msgbuf.slice(mavlink10.HEADER_LEN, msgbuf.length - 2);

        // Decode the payload and reorder the fields to match the order map.
    try {
        var t = jspack.Unpack(decoder.format, payload);
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink payload type='+decoder.type+' format='+decoder.format+' payloadLength='+ payload +': '+ e.message);
    }

    // Need to check if the message contains arrays
    var args = {};
    const elementsInMsg = decoder.order_map.length;
    const actualElementsInMsg = JSON.parse(JSON.stringify(t)).length;

    if (elementsInMsg == actualElementsInMsg) {
        // Reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = t[decoder.order_map[i]]
        });
    } else {
        // This message contains arrays
        var typeIndex = 1;
        var orderIndex = 0;
        var memberIndex = 0;
        var tempArgs = {};

        // Walk through the fields 
        for(var i = 0, size = decoder.format.length-1; i <= size; ++i) {
            var order = decoder.order_map[orderIndex];
            var currentType =  decoder.format[typeIndex];

            if (isNaN(parseInt(currentType))) {
                // This field is not an array cehck the type and add it to the args
                tempArgs[orderIndex] = t[memberIndex];
                memberIndex++;
            } else {
                // This field is part of an array, need to find the length of the array
                var arraySize = ''
                var newArray = []
                while (!isNaN(decoder.format[typeIndex])) {
                    arraySize = arraySize + decoder.format[typeIndex];
                    typeIndex++;
                }

                // Now that we know how long the array is, create an array with the values
                for(var j = 0, size = parseInt(arraySize); j < size; ++j){
                    newArray.push(t[j+orderIndex]);
                    memberIndex++;
                }

                // Add the array to the args object
                arraySize = arraySize + decoder.format[typeIndex];
                currentType = arraySize;
                tempArgs[orderIndex] = newArray;
            }
            orderIndex++;
            typeIndex++;
        }

        // Finally reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = tempArgs[decoder.order_map[i]]
        });
    }

    // construct the message object
    try {
        var m = new decoder.type(args);
        m.set.call(m, args,false);
    }
    catch (e) {
        throw new Error('Unable to instantiate MAVLink message of type '+decoder.type+' : ' + e.message);
    }
    m._msgbuf = msgbuf;
    m._payload = payload
    m.crc = receivedChecksum;
    m._header = new mavlink10.header(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags, compat_flags);
    this.log(m);
    return m;
}


// Expose this code as a module
module.exports = {mavlink10, MAVLink10Processor};

